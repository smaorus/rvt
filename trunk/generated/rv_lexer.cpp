/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
//#include <unistd.h>
#include <io.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 225
#define YY_END_OF_BUFFER 226
static yyconst short int yy_accept[691] =
	{   0,
		0,    0,    0,    0,    0,    0,  195,  195,    0,    0,
		0,    0,  166,  166,   51,   51,    0,    0,   53,   53,
	  226,  224,  222,  223,  223,  122,    4,  170,  116,  126,
		2,  145,  146,  114,  112,  156,  113,  151,  115,  172,
	  172,  154,  155,  137,  142,  139,  153,  160,  170,  147,
	  148,  128,  170,  159,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  149,
	  127,  150,  125,  222,  165,  225,  169,  168,  225,  195,
	  196,  195,  202,  225,  225,  225,  208,  220,  225,  194,
	  180,  179,  225,  166,   51,   50,   52,   66,   67,  225,

	  225,  225,  225,  225,  225,  225,   53,   54,  222,  141,
	  170,  121,  123,  129,  119,  143,  117,  144,  118,  152,
		0,  176,    1,    0,  120,  175,  171,  172,    0,  172,
	  172,    0,  132,  138,  136,  140,  133,    5,    3,  131,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,   37,  170,  170,  170,  170,  170,  170,
	   41,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  130,  124,  222,  165,  165,  161,  164,    0,
		0,  169,  167,  195,  196,  202,  203,  202,  204,  197,
	  200,  201,  199,  198,    0,  219,    0,    0,  219,    0,

		0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	  194,    0,  178,  193,  192,  181,  183,  190,  187,  191,
	  188,  184,  186,  185,  189,  193,  166,   51,   50,   66,
		0,    0,    0,    0,    0,    0,    0,    0,   53,  157,
		0,  176,    0,    6,  174,    0,  175,  171,  171,    0,
	  177,  172,  172,  173,  134,  135,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,   48,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,   39,  170,  170,   19,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

	  170,  170,  170,  170,    0,    0,  221,  218,  217,  205,
		0,    0,  207,  215,  212,  216,  213,  209,  211,  210,
	  214,    0,  181,  183,  182,    0,    0,    0,    0,    0,
		0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
		0,    7,    0,  174,    0,  175,  171,  171,  177,  173,
	  173,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,    8,  170,   34,   17,  170,  170,
	  170,  170,   38,   29,  170,  170,   40,  170,   24,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

	   15,  170,  170,    0,    0,  205,    0,  207,  206,    0,
		0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
		0,   71,    0,    0,    0,  174,  173,  173,   16,  170,
	   46,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,   33,   13,  170,  170,  170,  170,
	   25,  170,  170,  170,   18,  170,  170,  170,  170,  170,
	  170,  170,   31,  170,  170,   45,  163,  162,    0,    0,
		0,    0,    0,    0,    0,    0,    0,   63,   74,    0,
		0,    0,  170,  170,  170,  170,  170,  170,  170,  170,

	  170,  170,   97,  170,  170,  170,  170,   23,  170,  170,
	   99,  170,  170,  170,  170,  170,  106,  170,  170,  170,
	  170,  170,   26,    9,   90,  170,   42,   27,   43,   11,
	   30,   44,  170,   87,  170,  170,  163,  162,    0,    0,
		0,    0,    0,   72,    0,    0,    0,   68,    0,   60,
	  170,   49,  170,  170,  107,  170,   81,  170,  170,  170,
	  170,  170,   22,   21,   20,  170,  170,  170,  170,  170,
	  170,  170,  170,  170,  170,   94,  170,   36,  170,   12,
	  170,  170,    0,   64,   75,    0,    0,    0,    0,    0,
	   57,    0,  170,  170,  170,  170,  170,  170,  170,  170,

	   98,   91,  170,  170,  100,  170,   83,  170,   88,  170,
	  170,  108,   35,   10,   28,   14,    0,    0,    0,   69,
		0,   73,    0,   61,   77,   95,  170,  170,  101,   82,
	  170,  170,  170,  170,  170,  105,  170,  170,  109,  170,
	  170,  110,   58,   65,   76,    0,    0,    0,    0,  170,
	  170,  170,  170,   47,  170,  111,   92,  103,  158,   84,
	   89,   85,    0,   70,   80,   78,   62,   96,   55,  170,
	  102,  170,  170,  170,   59,    0,  170,  170,  170,  104,
	   86,   79,   56,  170,   93,  170,  170,  170,   32,    0
	} ;

static yyconst int yy_ec[256] =
	{   0,
		1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
		3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
	   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
	   24,   25,   26,   27,   26,   28,   29,   30,   31,   32,
	   33,   34,   35,   36,   37,   38,   37,   37,   39,   40,
		9,    9,    9,    9,    9,   41,    9,    9,    9,    9,
		9,    9,    9,    9,   42,    9,    9,   43,    9,    9,
	   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,

	   54,   55,   56,   57,   58,    9,   59,   60,   61,   62,
	   63,   64,    9,   65,   66,   67,   68,   69,   70,   71,
	   72,   73,   74,   75,   76,   77,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1
	} ;

static yyconst int yy_meta[78] =
	{   0,
		1,    1,    2,    3,    1,    1,    4,    1,    5,    1,
		1,    6,    7,    7,    8,    1,    1,    1,    1,    8,
		9,    9,    9,    9,    9,    9,    9,    9,    9,    1,
		1,    1,    1,    1,    1,    1,   10,   10,   11,   12,
	   13,    5,    5,    1,   14,    1,    1,    5,    1,   10,
	   10,   10,   10,   11,    9,    5,    5,    5,    5,   15,
		5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
		5,    5,    5,    1,    1,   16,    1
	} ;

static yyconst short int yy_base[725] =
	{   0,
		0,   75,    0,    0,   75,   76,   77,   80,   82,   84,
	   83,   94, 1362, 1361,   89,   91,   86,  103, 1288, 1287,
	 1362, 1367, 1358, 1367, 1367, 1327, 1367,    0, 1326,   80,
	 1367, 1367, 1367, 1325,   77, 1367,   90,  147,   97,  158,
	  211, 1367, 1367,   82, 1324,   85, 1367, 1367,  119, 1367,
	 1367, 1323,   94, 1367,   77, 1290,  139,   81,   92,   96,
	 1291,   78, 1290, 1298,  136, 1279, 1288, 1286, 1291, 1367,
	  129, 1367, 1367,  187,  188, 1367,    0, 1367, 1343, 1342,
	 1367, 1341,  194,  201, 1340, 1331, 1330, 1329,  276,    0,
	 1367,  217,  344,    0,    0,    0, 1367, 1337, 1367, 1291,

	 1278,  125, 1274, 1273, 1272, 1284,    0, 1367, 1330, 1367,
		0, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
	 1313,  206, 1367, 1316, 1367,  215,  216,    0,  290,  173,
	  167,    0, 1297, 1367, 1367, 1367, 1296, 1367, 1367, 1367,
	 1265,  366, 1274, 1276, 1258, 1266, 1262, 1255, 1267, 1254,
	 1269, 1256, 1262, 1248, 1249, 1246, 1246, 1249, 1246, 1243,
		0,  150, 1247,  175, 1245,  155,  199, 1249, 1242,  215,
	   49, 1247, 1367, 1367,  259,  274,    0, 1367, 1367, 1246,
	 1245,    0, 1367, 1298, 1367,  270, 1367,  305, 1367, 1367,
	 1367, 1367, 1367, 1367, 1289, 1367, 1288, 1287, 1286,  328,

	  362, 1285, 1284, 1283, 1282, 1281, 1280, 1279, 1278, 1277,
		0,  289, 1367, 1367, 1367,  415,  424, 1367, 1367, 1367,
	 1367, 1367, 1367, 1367, 1367,    0,    0,    0,    0, 1285,
	  404, 1229, 1232, 1223, 1219, 1230, 1217, 1229,    0, 1367,
	  451, 1367, 1276, 1367,  282,  465, 1367,  183,  203,  474,
	  320, 1367, 1367,  336, 1367, 1367, 1216,  341, 1210,  160,
	 1223, 1205, 1225,  297, 1224, 1219,  228, 1200, 1208, 1216,
	 1203, 1215, 1211,    0, 1203, 1215, 1210, 1198,  216, 1212,
	 1210, 1206, 1198, 1204, 1207,    0, 1193, 1197,    0, 1198,
	 1195, 1184, 1186, 1188, 1195, 1181, 1179, 1179, 1191, 1181,

	 1185, 1189, 1191, 1180, 1179, 1176, 1367, 1367, 1367, 1367,
	  492,  510, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
	 1367, 1225,  519,  528,    0, 1176,  329, 1172,  283, 1171,
	 1183, 1176, 1179, 1164, 1168, 1174, 1173, 1167,  537,  468,
	 1221, 1367,  551, 1367,  560,  470, 1367, 1367, 1367,  334,
	  303, 1164, 1165, 1161, 1154, 1162, 1165,  361, 1166, 1150,
	 1150, 1165,  268, 1160, 1162,  331, 1156, 1158, 1146, 1149,
	 1156, 1140, 1154, 1143,    0, 1145,    0,    0, 1136, 1144,
	 1133, 1140,    0,    0, 1134, 1131,    0, 1135,    0, 1130,
	 1130, 1127, 1139, 1129, 1133, 1138, 1137,  340, 1126, 1131,

		0, 1119, 1131, 1130, 1129, 1367,  578, 1367, 1367, 1124,
	 1127, 1118, 1114, 1118, 1124, 1111, 1123, 1112, 1113, 1105,
	 1121, 1367, 1103, 1115,  587,  577, 1367, 1367,    0, 1112,
	 1119, 1101, 1105, 1112, 1099, 1096, 1101, 1106, 1092, 1102,
	 1099,  433, 1091, 1101, 1094, 1086, 1090, 1099, 1096, 1099,
	 1088, 1095, 1096, 1082,    0,    0, 1082, 1083, 1088, 1079,
		0, 1086, 1072, 1076,    0, 1084, 1081, 1083, 1067, 1076,
	 1078, 1076,    0, 1068, 1071,    0, 1125, 1124, 1070, 1073,
	 1058, 1062, 1062, 1067, 1066, 1060, 1064, 1367, 1367, 1050,
	 1048, 1062, 1052, 1065, 1054, 1044, 1050, 1049, 1041, 1041,

	 1044, 1053, 1056, 1041, 1075, 1078, 1075,    0, 1049, 1038,
	 1049, 1031, 1041, 1044, 1030, 1025,    0, 1041, 1030, 1034,
	 1020, 1020,    0,    0,    0, 1031,    0,    0,    0,    0,
		0,    0, 1027,    0, 1027, 1018, 1072, 1071, 1009, 1008,
	 1000, 1014,  998, 1012,  967,  979,  973, 1367,  957, 1367,
	  940,    0,  948,  915,    0,  903,  889,  852,  840,  855,
	  788,  766,    0,    0,    0,  747,  756,  745,  731,  735,
	  727,  731,  727,  723,  722,    0,  727,    0,  715,    0,
	  726,  721,  715,  720,  719,  569,  583,  586,  565,  578,
	 1367,  568,  574,  560,  565,  555,  577,  570,  565,  562,

		0,  573,  557,  571,    0,  546,  549,  536,  547,  534,
	  533,    0,    0,    0,    0,    0,  539,  543,  523,  522,
	  520, 1367,  464,  479, 1367,  478,  457,  464,  459,    0,
	  454,  442,  425,  436,  417,    0,  404,  422,    0,  416,
	  409,    0,  414, 1367, 1367,  410,  386,  368,  381,  380,
	  373,  356,  366,    0,  350,    0,    0,  362,    0,    0,
		0,  357,  352, 1367, 1367,  331, 1367,    0,  314,  289,
		0,  284,  276,  262, 1367,  259,  241,  224,  220,    0,
		0, 1367,    0,  147,    0,  103,   91,   44,    0, 1367,
	  637,  653,  669,  685,  701,  717,  733,  749,  761,  775,

	  790,  806,  822,  838,  854,  870,  886,  902,  918,  934,
	  950,  966,  982,  989, 1004, 1012, 1019, 1026, 1030, 1042,
	 1050, 1057, 1064, 1071
	} ;

static yyconst short int yy_def[725] =
	{   0,
	  690,    1,  691,  691,  692,  692,  693,  693,  694,  694,
	  695,  695,  696,  696,  697,  697,  691,  691,  698,  698,
	  690,  690,  690,  690,  690,  690,  690,  699,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  699,  690,
	  690,  690,  699,  690,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  690,
	  690,  690,  690,  690,  700,  690,  701,  690,  690,  702,
	  690,  702,  703,  704,  705,  706,  690,  706,  707,  708,
	  690,  690,  709,  710,  711,  712,  690,  690,  690,  690,

	  690,  690,  690,  690,  690,  690,  713,  690,  690,  690,
	  699,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  714,  690,  715,  690,  716,   40,   41,  690,  690,
	  690,  717,  690,  690,  690,  690,  690,  690,  690,  690,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  690,  690,  690,  700,  176,  690,  690,  690,
	  690,  701,  690,  702,  690,  703,  690,  703,  690,  690,
	  690,  690,  690,  690,  706,  690,  690,  690,  690,  690,

	  690,  690,  690,  690,  690,  690,  690,  690,  690,  718,
	  708,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  719,  710,  711,  712,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  713,  690,
	  690,  690,  720,  690,  716,  690,  690,  690,  690,  690,
	  721,  690,  690,  717,  690,  690,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

	  699,  699,  699,  699,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  718,  690,  690,  719,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  722,
	  720,  690,  690,  690,  690,  723,  690,  690,  690,  690,
	  690,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

	  699,  699,  699,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  724,  690,  690,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  699,  699,  699,  699,  699,  699,  699,  699,

	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  699,  699,  699,  699,  699,  699,  699,  699,

	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  699,  699,  699,  699,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  690,  690,  690,  690,  690,  690,  690,  699,
	  699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
	  699,  699,  690,  690,  690,  690,  690,  699,  699,  699,
	  699,  699,  699,  699,  690,  690,  699,  699,  699,  699,
	  699,  690,  699,  699,  699,  699,  699,  699,  699,    0,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690
	} ;

static yyconst short int yy_nxt[1445] =
	{   0,
	   22,   22,   23,   24,   25,   26,   27,   22,   28,   29,
	   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
	   40,   41,   41,   41,   41,   41,   41,   41,   41,   42,
	   43,   44,   45,   46,   47,   48,   28,   28,   28,   28,
	   49,   28,   28,   50,   22,   51,   52,   53,   54,   55,
	   56,   57,   58,   59,   60,   61,   28,   62,   28,   63,
	   28,   28,   28,   28,   64,   65,   66,   67,   68,   69,
	   28,   28,   28,   70,   71,   72,   73,   74,   78,   78,
	   81,   82,   75,   81,   82,   87,   91,   87,   98,   92,
	  113,   83,  116,   88,   83,   88,   84,   91,   99,   84,

	   92,   96,   97,   96,   97,   98,  302,  118,  303,  117,
	  689,  123,  114,  133,  134,   99,  124,  136,  137,   79,
	   79,   85,  119,  120,   85,  138,   89,   93,   89,  125,
	  139,  141,  161,  100,  153,  101,  146,  102,   93,  162,
	  103,  142,  147,  154,  148,  143,  104,  105,  144,  106,
	  100,  155,  101,  156,  102,  158,  688,  103,  159,  145,
	  687,  173,  157,  104,  105,  121,  106,  122,  122,  122,
	  122,  122,  122,  122,  122,  122,  126,  233,  127,  127,
	  127,  127,  127,  127,  127,  128,  128,  234,  150,  175,
	  177,  178,  165,  166,  176,  151,  129,  187,  130,  131,

	  132,  152,  167,  174,  191,  168,  686,  253,  188,  288,
	  294,  129,  357,  189,  252,  192,  289,  130,  212,  212,
	  212,  212,  358,  213,  347,  131,  253,  295,  132,  126,
	  291,  128,  128,  128,  128,  128,  128,  128,  128,  128,
	  252,  292,  180,  348,  241,  242,  242,  181,  296,  129,
	  347,  130,  131,  246,  247,  247,  248,  249,  690,  241,
	  242,  175,  348,  297,  129,  242,  176,  685,  246,  247,
	  130,  684,  300,  187,  247,  248,  177,  178,  131,  198,
	  301,  379,  380,  249,  690,  367,  690,  199,  683,  690,
	  212,  212,  212,  212,  368,  213,  200,  200,  200,  200,

	  200,  200,  200,  201,  201,  250,  682,  250,  187,  681,
	  251,  251,  251,  251,  251,  251,  251,  251,  251,  188,
	  343,  344,  344,  680,  189,  202,  203,  441,  180,  204,
	  205,  679,  414,  181,  442,  343,  344,  206,  678,  310,
	  207,  344,  208,  428,  209,  415,  210,  215,  311,  311,
	  311,  311,  311,  311,  311,  312,  312,  362,  363,  349,
	  349,  677,  428,  364,  216,  216,  216,  216,  216,  216,
	  216,  217,  217,  313,  349,  427,  350,  351,  676,  349,
	  445,  411,  312,  312,  312,  312,  312,  312,  312,  312,
	  312,  412,  471,  218,  219,  350,  446,  220,  221,  675,

	  353,  427,  472,  351,  674,  222,  354,  355,  223,  673,
	  224,  672,  225,  671,  226,  258,  259,  260,  261,  262,
	  263,  435,  436,  264,  670,  265,  669,  668,  667,  666,
	  266,  267,  268,  665,  269,  323,  323,  323,  323,  323,
	  323,  323,  324,  324,  324,  324,  324,  324,  324,  324,
	  324,  324,  324,  326,  505,  327,  506,  664,  328,  507,
	  508,  663,  662,  661,  329,  330,  339,  331,  339,  660,
	  659,  340,  340,  340,  340,  340,  340,  340,  340,  340,
	  345,  658,  345,  657,  656,  346,  346,  346,  346,  346,
	  346,  346,  346,  346,  251,  251,  251,  251,  251,  251,

	  251,  251,  251,  406,  655,  654,  653,  242,  242,  247,
	  247,  652,  407,  407,  407,  407,  407,  407,  407,  312,
	  312,  408,  242,  651,  247,  650,  649,  242,  648,  247,
	  312,  312,  312,  312,  312,  312,  312,  312,  312,  323,
	  323,  323,  323,  323,  323,  323,  324,  324,  324,  324,
	  324,  324,  324,  324,  324,  324,  324,  340,  340,  340,
	  340,  340,  340,  340,  340,  340,  425,  647,  425,  646,
	  645,  426,  426,  426,  426,  426,  426,  426,  426,  426,
	  346,  346,  346,  346,  346,  346,  346,  346,  346,  406,
	  644,  643,  642,  641,  640,  639,  638,  637,  312,  312,

	  312,  312,  312,  312,  312,  312,  312,  426,  426,  426,
	  426,  426,  426,  426,  426,  426,  344,  344,  636,  635,
	  634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
	  624,  344,  623,  622,  621,  620,  344,   76,   76,   76,
	   76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
	   76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
	   77,   77,   77,   77,   77,   77,   77,   77,   77,   80,
	   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
	   80,   80,   80,   80,   80,   86,   86,   86,   86,   86,
	   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

	   86,   90,   90,   90,   90,   90,   90,   90,   90,   90,
	   90,   90,   90,   90,   90,   90,   90,   94,   94,   94,
	   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
	   94,   94,   94,   95,   95,   95,   95,   95,   95,   95,
	   95,   95,   95,   95,   95,   95,   95,   95,   95,  107,
	  107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
	  107,  107,  107,  107,  107,  111,  619,  618,  617,  111,
	  111,  111,  111,  111,  616,  111,  179,  179,  615,  614,
	  613,  612,  611,  179,  610,  609,  608,  607,  606,  179,
	  182,  182,  605,  182,  182,  182,  182,  182,  182,  182,

	  182,  182,  182,  604,  182,  182,  184,  184,  184,  184,
	  184,  184,  184,  603,  184,  184,  184,  184,  184,  602,
	  184,  184,  186,  186,  186,  186,  186,  186,  186,  186,
	  186,  186,  186,  186,  186,  601,  186,  186,  190,  190,
	  190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
	  190,  190,  190,  190,  193,  193,  193,  193,  193,  193,
	  193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
	  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
	  195,  195,  195,  195,  195,  195,  197,  197,  197,  197,
	  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

	  197,  197,  211,  211,  600,  599,  211,  211,  211,  211,
	  211,  211,  211,  211,  211,  598,  211,  211,  214,  214,
	  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
	  214,  214,  214,  214,  227,  227,  597,  227,  227,  227,
	  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
	  228,  228,  228,  228,  228,  228,  596,  228,  228,  228,
	  228,  228,  228,  228,  228,  228,  229,  229,  229,  229,
	  229,  229,  595,  229,  229,  229,  229,  229,  229,  229,
	  229,  229,  239,  239,  239,  239,  239,  239,  239,  239,
	  239,  239,  239,  239,  239,  239,  239,  122,  594,  122,

	  122,  122,  593,  122,  243,  243,  243,  243,  243,  243,
	  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
	  245,  592,  245,  245,  245,  591,  245,  254,  254,  254,
	  254,  322,  590,  589,  322,  322,  322,  322,  325,  325,
	  325,  325,  341,  341,  341,  341,  341,  341,  341,  341,
	  341,  341,  341,  341,  341,  341,  341,  341,  251,  588,
	  587,  251,  251,  586,  251,  340,  585,  584,  340,  340,
	  583,  340,  346,  538,  537,  346,  346,  582,  346,  426,
	  581,  580,  426,  426,  579,  426,  578,  577,  576,  575,
	  574,  573,  572,  571,  570,  569,  568,  567,  566,  565,

	  564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
	  554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
	  544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
	  534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
	  524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
	  514,  513,  512,  511,  510,  509,  504,  503,  502,  501,
	  500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
	  490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
	  480,  479,  478,  477,  476,  475,  474,  473,  470,  469,
	  468,  467,  466,  465,  464,  463,  462,  461,  460,  459,

	  458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
	  448,  447,  444,  443,  440,  439,  438,  437,  434,  433,
	  432,  431,  430,  429,  342,  424,  423,  422,  421,  420,
	  419,  418,  417,  416,  413,  410,  409,  405,  404,  403,
	  402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
	  392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
	  382,  381,  378,  377,  376,  375,  374,  373,  372,  371,
	  370,  369,  366,  365,  361,  360,  359,  356,  352,  342,
	  338,  337,  336,  335,  334,  333,  332,  230,  308,  321,
	  320,  319,  318,  317,  316,  315,  314,  308,  309,  308,

	  307,  185,  306,  305,  304,  299,  298,  293,  290,  287,
	  286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
	  276,  275,  274,  273,  272,  271,  270,  257,  256,  255,
	  244,  240,  109,  238,  237,  236,  235,  232,  231,  230,
	  690,  196,  196,  194,  185,  185,  183,  172,  171,  170,
	  169,  164,  163,  160,  149,  140,  135,  115,  112,  110,
	  109,  690,  108,  108,   76,   76,   21,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690
	} ;

static yyconst short int yy_chk[1445] =
	{   0,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
		1,    1,    1,    1,    1,    1,    1,    2,    5,    6,
		7,    7,    2,    8,    8,    9,   11,   10,   17,   11,
	   30,    7,   35,    9,    8,   10,    7,   12,   17,    8,

	   12,   15,   15,   16,   16,   18,  171,   37,  171,   35,
	  688,   39,   30,   44,   44,   18,   39,   46,   46,    5,
		6,    7,   37,   37,    8,   49,    9,   11,   10,   39,
	   49,   53,   62,   17,   58,   17,   55,   17,   12,   62,
	   17,   53,   55,   58,   55,   53,   17,   17,   53,   17,
	   18,   59,   18,   59,   18,   60,  687,   18,   60,   53,
	  686,   71,   59,   18,   18,   38,   18,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   40,  102,   40,   40,
	   40,   40,   40,   40,   40,   40,   40,  102,   57,   74,
	   75,   75,   65,   65,   74,   57,   40,   83,   40,   40,

	   40,   57,   65,   71,   84,   65,  684,  131,   83,  162,
	  166,   40,  260,   83,  130,   84,  162,   40,   92,   92,
	   92,   92,  260,   92,  248,   40,  131,  166,   40,   41,
	  164,   41,   41,   41,   41,   41,   41,   41,   41,   41,
	  130,  164,   75,  249,  122,  122,  122,   75,  167,   41,
	  248,   41,   41,  126,  126,  126,  127,  127,  127,  122,
	  122,  175,  249,  167,   41,  122,  175,  679,  126,  126,
	   41,  678,  170,  186,  126,  127,  176,  176,   41,   89,
	  170,  279,  279,  127,  186,  267,  127,   89,  677,  186,
	  212,  212,  212,  212,  267,  212,   89,   89,   89,   89,

	   89,   89,   89,   89,   89,  129,  676,  129,  188,  674,
	  129,  129,  129,  129,  129,  129,  129,  129,  129,  188,
	  245,  245,  245,  673,  188,   89,   89,  363,  176,   89,
	   89,  672,  329,  176,  363,  245,  245,   89,  670,  200,
	   89,  245,   89,  351,   89,  329,   89,   93,  200,  200,
	  200,  200,  200,  200,  200,  200,  200,  264,  264,  251,
	  251,  669,  351,  264,   93,   93,   93,   93,   93,   93,
	   93,   93,   93,  201,  251,  350,  254,  254,  666,  251,
	  366,  327,  201,  201,  201,  201,  201,  201,  201,  201,
	  201,  327,  398,   93,   93,  254,  366,   93,   93,  663,

	  258,  350,  398,  254,  662,   93,  258,  258,   93,  658,
	   93,  655,   93,  653,   93,  142,  142,  142,  142,  142,
	  142,  358,  358,  142,  652,  142,  651,  650,  649,  648,
	  142,  142,  142,  647,  142,  216,  216,  216,  216,  216,
	  216,  216,  216,  216,  217,  217,  217,  217,  217,  217,
	  217,  217,  217,  231,  442,  231,  442,  646,  231,  442,
	  442,  643,  641,  640,  231,  231,  241,  231,  241,  638,
	  637,  241,  241,  241,  241,  241,  241,  241,  241,  241,
	  246,  635,  246,  634,  633,  246,  246,  246,  246,  246,
	  246,  246,  246,  246,  250,  250,  250,  250,  250,  250,

	  250,  250,  250,  311,  632,  631,  629,  340,  340,  346,
	  346,  628,  311,  311,  311,  311,  311,  311,  311,  311,
	  311,  312,  340,  627,  346,  626,  624,  340,  623,  346,
	  312,  312,  312,  312,  312,  312,  312,  312,  312,  323,
	  323,  323,  323,  323,  323,  323,  323,  323,  324,  324,
	  324,  324,  324,  324,  324,  324,  324,  339,  339,  339,
	  339,  339,  339,  339,  339,  339,  343,  621,  343,  620,
	  619,  343,  343,  343,  343,  343,  343,  343,  343,  343,
	  345,  345,  345,  345,  345,  345,  345,  345,  345,  407,
	  618,  617,  611,  610,  609,  608,  607,  606,  407,  407,

	  407,  407,  407,  407,  407,  407,  407,  425,  425,  425,
	  425,  425,  425,  425,  425,  425,  426,  426,  604,  603,
	  602,  600,  599,  598,  597,  596,  595,  594,  593,  592,
	  590,  426,  589,  588,  587,  586,  426,  691,  691,  691,
	  691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
	  691,  691,  691,  692,  692,  692,  692,  692,  692,  692,
	  692,  692,  692,  692,  692,  692,  692,  692,  692,  693,
	  693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
	  693,  693,  693,  693,  693,  694,  694,  694,  694,  694,
	  694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

	  694,  695,  695,  695,  695,  695,  695,  695,  695,  695,
	  695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
	  696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
	  696,  696,  696,  697,  697,  697,  697,  697,  697,  697,
	  697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
	  698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
	  698,  698,  698,  698,  698,  699,  585,  584,  583,  699,
	  699,  699,  699,  699,  582,  699,  700,  700,  581,  579,
	  577,  575,  574,  700,  573,  572,  571,  570,  569,  700,
	  701,  701,  568,  701,  701,  701,  701,  701,  701,  701,

	  701,  701,  701,  567,  701,  701,  702,  702,  702,  702,
	  702,  702,  702,  566,  702,  702,  702,  702,  702,  562,
	  702,  702,  703,  703,  703,  703,  703,  703,  703,  703,
	  703,  703,  703,  703,  703,  561,  703,  703,  704,  704,
	  704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
	  704,  704,  704,  704,  705,  705,  705,  705,  705,  705,
	  705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
	  706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
	  706,  706,  706,  706,  706,  706,  707,  707,  707,  707,
	  707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

	  707,  707,  708,  708,  560,  559,  708,  708,  708,  708,
	  708,  708,  708,  708,  708,  558,  708,  708,  709,  709,
	  709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
	  709,  709,  709,  709,  710,  710,  557,  710,  710,  710,
	  710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
	  711,  711,  711,  711,  711,  711,  556,  711,  711,  711,
	  711,  711,  711,  711,  711,  711,  712,  712,  712,  712,
	  712,  712,  554,  712,  712,  712,  712,  712,  712,  712,
	  712,  712,  713,  713,  713,  713,  713,  713,  713,  713,
	  713,  713,  713,  713,  713,  713,  713,  714,  553,  714,

	  714,  714,  551,  714,  715,  715,  715,  715,  715,  715,
	  715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
	  716,  549,  716,  716,  716,  547,  716,  717,  717,  717,
	  717,  718,  546,  545,  718,  718,  718,  718,  719,  719,
	  719,  719,  720,  720,  720,  720,  720,  720,  720,  720,
	  720,  720,  720,  720,  720,  720,  720,  720,  721,  544,
	  543,  721,  721,  542,  721,  722,  541,  540,  722,  722,
	  539,  722,  723,  538,  537,  723,  723,  536,  723,  724,
	  535,  533,  724,  724,  526,  724,  522,  521,  520,  519,
	  518,  516,  515,  514,  513,  512,  511,  510,  509,  507,

	  506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
	  496,  495,  494,  493,  492,  491,  490,  487,  486,  485,
	  484,  483,  482,  481,  480,  479,  478,  477,  475,  474,
	  472,  471,  470,  469,  468,  467,  466,  464,  463,  462,
	  460,  459,  458,  457,  454,  453,  452,  451,  450,  449,
	  448,  447,  446,  445,  444,  443,  441,  440,  439,  438,
	  437,  436,  435,  434,  433,  432,  431,  430,  424,  423,
	  421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
	  411,  410,  405,  404,  403,  402,  400,  399,  397,  396,
	  395,  394,  393,  392,  391,  390,  388,  386,  385,  382,

	  381,  380,  379,  376,  374,  373,  372,  371,  370,  369,
	  368,  367,  365,  364,  362,  361,  360,  359,  357,  356,
	  355,  354,  353,  352,  341,  338,  337,  336,  335,  334,
	  333,  332,  331,  330,  328,  326,  322,  306,  305,  304,
	  303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
	  293,  292,  291,  290,  288,  287,  285,  284,  283,  282,
	  281,  280,  278,  277,  276,  275,  273,  272,  271,  270,
	  269,  268,  266,  265,  263,  262,  261,  259,  257,  243,
	  238,  237,  236,  235,  234,  233,  232,  230,  210,  209,
	  208,  207,  206,  205,  204,  203,  202,  199,  198,  197,

	  195,  184,  181,  180,  172,  169,  168,  165,  163,  160,
	  159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
	  149,  148,  147,  146,  145,  144,  143,  141,  137,  133,
	  124,  121,  109,  106,  105,  104,  103,  101,  100,   98,
	   88,   87,   86,   85,   82,   80,   79,   69,   68,   67,
	   66,   64,   63,   61,   56,   52,   45,   34,   29,   26,
	   23,   21,   20,   19,   14,   13,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
	  690,  690,  690,  690
	} ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "rv_lexer.l"
#define INITIAL 0
#line 3 "rv_lexer.l"
/*  o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o

	CTool Library
	Copyright (C) 1998-2001	Shaun Flisakowski

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 1, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o  */

#undef yywrap
extern "C" int yywrap(void);

#define  YY_BUFFER_STATE_DEFD

#include <cstdio>
#include <cstdlib>
#include <string>
#include <cerrno>

#include <ctool/config.h>
#include "rv_gram.h"
#include <ctool/lexer.h>
#include <ctool/token.h>
#include <ctool/symbol.h>
#include <ctool/express.h>
#include <ctool/stemnt.h>
#include <ctool/project.h>

#include <rv_parse.h>

#ifdef   WINDOWS
#    ifndef  __STDC__
#    define  __STDC__    1
#    endif

int isatty(int) { return 1; }

#endif  /* WINDOWS */

int cnt_nl(char *txt, int len);

#undef YY_INPUT

/* Scan input from a file pointer (default) */

#define YY_INPUT(buf,result,max_size) \
	do { \
		gProject->Parse_TOS->last_line=gProject->Parse_TOS->line; \
		for(result=0; result<max_size; result++) \
		 { \
		  char ch; \
		  if(!gProject->Parse_TOS->yyinstream->read(&ch, 1)) \
		   { \
			if(result==0) result=YY_NULL; \
			break; \
		   } \
		  if(result==0) gProject->Parse_TOS->line=""; \
		  gProject->Parse_TOS->line+=ch; \
		  buf[result]=ch; \
		  if(ch=='\n') { result++; break; } \
		 } \
	} while(0)

#define YY_USER_ACTION \
	{ \
		gProject->Parse_TOS->yycolno = gProject->Parse_TOS->yynxtcol; \
		gProject->Parse_TOS->yynxtcol += yyleng; \
	\
	prvhooks->collect( yytext, yyleng ); \
	}


#undef HERE
#define HERE Location(gProject->Parse_TOS->yylineno, \
	   gProject->Parse_TOS->yycolno, gProject->Parse_TOS->filename )

#undef SETPOS_TOKEN
#define SETPOS_TOKEN(TOKEN) \
	do { \
		  lvalp->loc = new Location( \
				gProject->Parse_TOS->yylineno, \
				gProject->Parse_TOS->yycolno,  \
				gProject->Parse_TOS->filename ); \
	} while(0)

#undef  LAST_STATE
#define LAST_STATE() \
		do { \
		  if (gProject->Parse_TOS->in_preprocess) \
			BEGIN(PP); \
		  else \
			BEGIN(INITIAL); \
		} while (0)  

#undef  BEGIN_PP
#define BEGIN_PP() \
		do { \
		  BEGIN(PP); \
		  gProject->Parse_TOS->in_preprocess = 1; \
		} while(0)

YYSTYPE my_var;

EXTERN int yylex ARGS((YYSTYPE *lvalp));

/*  To give some args to yylex */
#undef YY_DECL
//#ifdef  __STDC__
  #define YY_DECL int yylex YY_PROTO((YYSTYPE *lvalp))  // ofer
//#define YY_DECL int yylex (YYSTYPE *lvalp)
//#else
//#define YY_DECL int yylex(lvalp) YYSTYPE *lvalp;
//#endif

#define Start 1
#define PP 2
#define CMMT 3
#define CC 4
#define STR 5
#define PPLN 6
#define PAREN_ELIM 7
#define GCC_ATTRIB 8
#define MSC_ASM_ELIM 9

/* %option nounput */
#line 1056 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
				 (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 158 "rv_lexer.l"


#line 1213 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 691 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1367 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 160 "rv_lexer.l"
{ BEGIN(CMMT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 161 "rv_lexer.l"
{ BEGIN(CC); gProject->Parse_TOS->isWide = false; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 162 "rv_lexer.l"
{ BEGIN(CC); gProject->Parse_TOS->isWide = true; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 163 "rv_lexer.l"
{ BEGIN(STR); gProject->Parse_TOS->tokn_ptr = gProject->Parse_TOS->tokn_buff; gProject->Parse_TOS->isWide = false; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 164 "rv_lexer.l"
{ BEGIN(STR); gProject->Parse_TOS->tokn_ptr = gProject->Parse_TOS->tokn_buff; gProject->Parse_TOS->isWide = true; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 166 "rv_lexer.l"
{ // Ambiguous C++ style comment, must parse as
					  //    '/' '/*' to be Ansi compliant 
						 yywarn(
							"Ambiguous C++ comment, use '/ /*' -or- '// *'");
						 yyless(2);
						 SETPOS_TOKEN(DIV);
						 return(DIV);
					}
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 175 "rv_lexer.l"
{ /* C++ style comment */
						 if (gProject->warn_cpp_comment && gProject->Parse_TOS->cpp_comment_warn){
							 gProject->Parse_TOS->cpp_comment_warn = 0;
							 yywarn("C++ style comment encountered");
						 }
					 }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 182 "rv_lexer.l"
{
					  lvalp->storage = ST_Auto;
					  return(gProject->Parse_TOS->err_tok = AUTO);
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 186 "rv_lexer.l"
{
					  lvalp->storage = ST_Extern;
					  return(gProject->Parse_TOS->err_tok = EXTRN);
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 190 "rv_lexer.l"
{
					  lvalp->storage = ST_Register;
					  return(gProject->Parse_TOS->err_tok = REGISTR);
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 194 "rv_lexer.l"
{
					  lvalp->storage = ST_Static;
					  return(gProject->Parse_TOS->err_tok = STATIC);
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 198 "rv_lexer.l"
{
					  lvalp->storage = ST_Typedef;
					  return(gProject->Parse_TOS->err_tok = TYPEDEF);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 203 "rv_lexer.l"
{
					  lvalp->typeQual = TQ_Const;
					  return(gProject->Parse_TOS->err_tok = CONST);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 207 "rv_lexer.l"
{
					  lvalp->typeQual = TQ_Volatile;
					  return(gProject->Parse_TOS->err_tok = VOLATILE);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 212 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Void);
					  return(gProject->Parse_TOS->err_tok = VOID);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 216 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Bool);
					  return(gProject->Parse_TOS->err_tok = BOOL);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 220 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Char);
					  return(gProject->Parse_TOS->err_tok = CHAR);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 224 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Short);
					  return(gProject->Parse_TOS->err_tok = SHORT);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 228 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Int);
					  return(gProject->Parse_TOS->err_tok = INT);
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 232 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Int64);
					  return(gProject->Parse_TOS->err_tok = INT64);
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 236 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Int32);
					  return(gProject->Parse_TOS->err_tok = INT32);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 240 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Int16);
					  return(gProject->Parse_TOS->err_tok = INT16);
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 244 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Int8);
					  return(gProject->Parse_TOS->err_tok = INT8);
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 248 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Long);
					  return(gProject->Parse_TOS->err_tok = LONG);
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 252 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Float);
					  return(gProject->Parse_TOS->err_tok = FLOAT);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 256 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Double);
					  return(gProject->Parse_TOS->err_tok = DOUBLE);
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 260 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_Signed);
					  return(gProject->Parse_TOS->err_tok = SGNED);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 264 "rv_lexer.l"
{
					  lvalp->base = new BaseType(BT_UnSigned);
					  return(gProject->Parse_TOS->err_tok = UNSGNED);
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 268 "rv_lexer.l"
{
					  lvalp->typeSpec = BT_Enum;
					  gProject->Parse_TOS->possibleTag = true;
					  return(gProject->Parse_TOS->err_tok = ENUM);
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 273 "rv_lexer.l"
{ 
					  lvalp->typeSpec = BT_Struct;
					  gProject->Parse_TOS->possibleTag = true;
					  return(gProject->Parse_TOS->err_tok = STRUCT);
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 278 "rv_lexer.l"
{ 
					  lvalp->typeSpec = BT_Union;
					  gProject->Parse_TOS->possibleTag = true;
					  return(gProject->Parse_TOS->err_tok = UNION);
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 284 "rv_lexer.l"
{ 	/* A GCC extension */
   /* TODO - give it a real type */
					  lvalp->base = new BaseType(BT_Int);
					  return(gProject->Parse_TOS->err_tok = INT);
/* 					  SETPOS_TOKEN(ELLIPSIS); return(ELLIPSIS); */
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 290 "rv_lexer.l"
{ SETPOS_TOKEN(BREAK); return(BREAK); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 291 "rv_lexer.l"
{ SETPOS_TOKEN(CASE); return(CASE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 292 "rv_lexer.l"
{ SETPOS_TOKEN(CONT); return(CONT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 293 "rv_lexer.l"
{ SETPOS_TOKEN(DEFLT); return(DEFLT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 294 "rv_lexer.l"
{ SETPOS_TOKEN(DO); return(DO); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 295 "rv_lexer.l"
{ SETPOS_TOKEN(ELSE); return(ELSE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 296 "rv_lexer.l"
{ SETPOS_TOKEN(FOR); return(FOR); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 297 "rv_lexer.l"
{ SETPOS_TOKEN(GOTO); 
					  gProject->Parse_TOS->possibleLabel = true;
					  return(GOTO); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 300 "rv_lexer.l"
{ SETPOS_TOKEN(IF); return(IF); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 301 "rv_lexer.l"
{ SETPOS_TOKEN(RETURN); return(RETURN); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 302 "rv_lexer.l"
{ SETPOS_TOKEN(SIZEOF); return(SIZEOF); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 303 "rv_lexer.l"
{ SETPOS_TOKEN(SWITCH); return(SWITCH); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 304 "rv_lexer.l"
{ SETPOS_TOKEN(WHILE); return(WHILE); }
	YY_BREAK
/* Microsoft Extensions */
case 46:
YY_RULE_SETUP
#line 307 "rv_lexer.l"
{ BEGIN(MSC_ASM_ELIM); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 308 "rv_lexer.l"
{ BEGIN(PAREN_ELIM); }
	YY_BREAK
/* GCC2 Extensions */
case 48:
YY_RULE_SETUP
#line 311 "rv_lexer.l"
{ BEGIN(PAREN_ELIM); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 312 "rv_lexer.l"
{ BEGIN(PAREN_ELIM); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 314 "rv_lexer.l"
{ gProject->Parse_TOS->gcc2_paren_cnt++; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 315 "rv_lexer.l"
{ /* Throw away */ }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 316 "rv_lexer.l"
{ if (--gProject->Parse_TOS->gcc2_paren_cnt == 0)
						  BEGIN(INITIAL);
					  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 320 "rv_lexer.l"
{ /* Throw away */ }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 321 "rv_lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 323 "rv_lexer.l"
{ BEGIN(GCC_ATTRIB); return(gProject->Parse_TOS->err_tok = ATTRIBUTE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 324 "rv_lexer.l"
{ BEGIN(GCC_ATTRIB); return(gProject->Parse_TOS->err_tok = ATTRIBUTE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 326 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = ALIGNED); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 327 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = ALIGNED); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 328 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = ALIGNED); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 329 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = PACKED); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 330 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = PACKED); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 331 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = PACKED); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 332 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CDECL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 333 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CDECL); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 334 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CDECL); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 336 "rv_lexer.l"
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 337 "rv_lexer.l"
{ SETPOS_TOKEN(LPAREN); return(LPAREN); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 339 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = FORMAT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 340 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = FORMAT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 341 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = FORMAT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 342 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = MODE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 343 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = MODE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 344 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = MODE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 345 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CONST); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 346 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CONST); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 347 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = CONST); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 348 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = NORETURN); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 349 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = NORETURN); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 350 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = NORETURN); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 351 "rv_lexer.l"
{ BEGIN(INITIAL); return(gProject->Parse_TOS->err_tok = MALLOC); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 353 "rv_lexer.l"
{
					  lvalp->typeQual = TQ_Const;
					  return(gProject->Parse_TOS->err_tok = CONST);
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 358 "rv_lexer.l"
{
						lvalp->typeQual = TQ_Const;
						return(gProject->Parse_TOS->err_tok = CONST);
					  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 362 "rv_lexer.l"
{
					  lvalp->type = new BaseType(BT_Signed);
					  return(gProject->Parse_TOS->err_tok = SGNED);
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 366 "rv_lexer.l"
{
						lvalp->type = new BaseType(BT_Signed);
						return(gProject->Parse_TOS->err_tok = SGNED);
					  }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 370 "rv_lexer.l"
{
						lvalp->typeQual = TQ_Volatile;
						return(gProject->Parse_TOS->err_tok = VOLATILE);
					  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 374 "rv_lexer.l"
{
						  lvalp->typeQual = TQ_Volatile;
						  return(gProject->Parse_TOS->err_tok = VOLATILE);
						}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 379 "rv_lexer.l"
{ }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 380 "rv_lexer.l"
{ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 381 "rv_lexer.l"
{ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 383 "rv_lexer.l"
{ }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 384 "rv_lexer.l"
{ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 385 "rv_lexer.l"
{ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 387 "rv_lexer.l"
{ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 389 "rv_lexer.l"
{ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 390 "rv_lexer.l"
{ }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 391 "rv_lexer.l"
{ }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 393 "rv_lexer.l"
{ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 394 "rv_lexer.l"
{ }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 395 "rv_lexer.l"
{ }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 396 "rv_lexer.l"
{ }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 397 "rv_lexer.l"
{ }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 398 "rv_lexer.l"
{ }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 399 "rv_lexer.l"
{ }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 400 "rv_lexer.l"
{ }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 401 "rv_lexer.l"
{ }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 403 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 404 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 405 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 406 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 407 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 408 "rv_lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 411 "rv_lexer.l"
{ lvalp->binOp = BO_Plus; return(PLUS); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 412 "rv_lexer.l"
{ lvalp->binOp = BO_Minus; return(MINUS); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 413 "rv_lexer.l"
{ lvalp->binOp = BO_Mult; return(STAR); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 414 "rv_lexer.l"
{ lvalp->binOp = BO_Div; return(DIV); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 415 "rv_lexer.l"
{ lvalp->binOp = BO_Mod; return(MOD); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 417 "rv_lexer.l"
{ lvalp->assignOp = AO_PlusEql; return(ASSIGN); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 418 "rv_lexer.l"
{ lvalp->assignOp = AO_MinusEql; return(ASSIGN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 419 "rv_lexer.l"
{ lvalp->assignOp = AO_MultEql; return(ASSIGN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 420 "rv_lexer.l"
{ lvalp->assignOp = AO_DivEql; return(ASSIGN); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 421 "rv_lexer.l"
{ lvalp->assignOp = AO_ModEql; return(ASSIGN); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 423 "rv_lexer.l"
{ SETPOS_TOKEN(NOT); return(NOT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 424 "rv_lexer.l"
{ SETPOS_TOKEN(AND); return(AND); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 425 "rv_lexer.l"
{ SETPOS_TOKEN(OR); return(OR); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 427 "rv_lexer.l"
{ SETPOS_TOKEN(B_NOT); return(B_NOT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 428 "rv_lexer.l"
{ SETPOS_TOKEN(B_AND); return(B_AND); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 429 "rv_lexer.l"
{ SETPOS_TOKEN(B_OR); return(B_OR); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 430 "rv_lexer.l"
{ SETPOS_TOKEN(B_XOR); return(B_XOR); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 432 "rv_lexer.l"
{ lvalp->assignOp = AO_BitAndEql; return(ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 433 "rv_lexer.l"
{ lvalp->assignOp = AO_BitOrEql; return(ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 434 "rv_lexer.l"
{ lvalp->assignOp = AO_BitXorEql; return(ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 436 "rv_lexer.l"
{ lvalp->binOp = BO_Shl; return(L_SHIFT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 437 "rv_lexer.l"
{ lvalp->binOp = BO_Shr; return(R_SHIFT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 438 "rv_lexer.l"
{ lvalp->assignOp = AO_ShlEql; return(ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 439 "rv_lexer.l"
{ lvalp->assignOp = AO_ShrEql; return(ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 441 "rv_lexer.l"
{ lvalp->relOp = RO_Equal; return(COMP_EQ); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 442 "rv_lexer.l"
{ lvalp->relOp = RO_Less; return(COMP_ARITH); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 443 "rv_lexer.l"
{ lvalp->relOp = RO_LessEql; return(COMP_ARITH); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 444 "rv_lexer.l"
{ lvalp->relOp = RO_Grtr; return(COMP_ARITH); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 445 "rv_lexer.l"
{ lvalp->relOp = RO_GrtrEql; return(COMP_ARITH); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 446 "rv_lexer.l"
{ lvalp->relOp = RO_NotEqual; return(COMP_EQ); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 448 "rv_lexer.l"
{ lvalp->assignOp = AO_Equal; return(EQ); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 449 "rv_lexer.l"
{ SETPOS_TOKEN(INCR); return(INCR); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 450 "rv_lexer.l"
{ SETPOS_TOKEN(DECR); return(DECR); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 452 "rv_lexer.l"
{ SETPOS_TOKEN(LPAREN);
					  gProject->Parse_TOS->possibleType = true;
					  return(LPAREN);
					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 456 "rv_lexer.l"
{ SETPOS_TOKEN(RPAREN); return(RPAREN); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 457 "rv_lexer.l"
{ SETPOS_TOKEN(LBRCKT); return(LBRCKT); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 458 "rv_lexer.l"
{ SETPOS_TOKEN(RBRCKT); return(RBRCKT); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 459 "rv_lexer.l"
{ SETPOS_TOKEN(LBRACE); 
					  gProject->Parse_TOS->possibleTag = false;
			  prvhooks->start_body();
					  return(LBRACE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 463 "rv_lexer.l"
{ SETPOS_TOKEN(RBRACE); return(RBRACE); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 465 "rv_lexer.l"
{ SETPOS_TOKEN(DOT); 
					  prvhooks->next_is_comp = true;
					  return(DOT); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 468 "rv_lexer.l"
{ SETPOS_TOKEN(ARROW); 
					  prvhooks->next_is_comp = true;
					  return(ARROW); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 472 "rv_lexer.l"
{ SETPOS_TOKEN(QUESTMARK); return(QUESTMARK); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 473 "rv_lexer.l"
{ SETPOS_TOKEN(COLON); return(COLON); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 474 "rv_lexer.l"
{ SETPOS_TOKEN(SEMICOLON); return(SEMICOLON); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 475 "rv_lexer.l"
{ SETPOS_TOKEN(COMMA); return(COMMA); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 476 "rv_lexer.l"
{ SETPOS_TOKEN(ELLIPSIS); return(ELLIPSIS); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 477 "rv_lexer.l"
{ /* ignore */} /* GNU extension */
	YY_BREAK
/* Unused (invalid) characters */
case 159:
YY_RULE_SETUP
#line 480 "rv_lexer.l"
{ SETPOS_TOKEN(BACKQUOTE); return(BACKQUOTE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 481 "rv_lexer.l"
{ SETPOS_TOKEN(AT); return(AT); }
	YY_BREAK
/* Preprocessor Stuff */
case 161:
YY_RULE_SETUP
#line 484 "rv_lexer.l"
{ gProject->Parse_TOS->yylineno++;
							 gProject->Parse_TOS->yynxtcol = 0; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 487 "rv_lexer.l"
{ BEGIN(PPLN); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 488 "rv_lexer.l"
{ gProject->Parse_TOS->file_ppln=true; BEGIN(PPLN); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 489 "rv_lexer.l"
{ BEGIN(PPLN); yyless(1); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 490 "rv_lexer.l"
{ BEGIN_PP(); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 492 "rv_lexer.l"
{ 
					   BEGIN_PP();
					   if (get_lineno(gProject->Parse_TOS->file_ppln,yytext,&(lvalp->stemnt)))
							return (gProject->Parse_TOS->err_tok = PP_LINE);
				}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 498 "rv_lexer.l"
{  /* Preprocessor continuation line */
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
					   }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 503 "rv_lexer.l"
{  /* End of this preprocessor logical line */
						 gProject->Parse_TOS->file_ppln=false;
						 gProject->Parse_TOS->in_preprocess = 0;
						 yyless(0);        /* Hack! */
						 BEGIN(INITIAL);
					   }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 510 "rv_lexer.l"
{ /* Swallow cpp junk to prevent it being echo'd */ }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 512 "rv_lexer.l"
{    /* Identifier */
			 /* benny's add: */
			 bool added_prefix;

						 lvalp->symbol = new Symbol();
					   
						 lvalp->symbol->name = yytext;
			 
			 /* benny's add: */
						 //printf("now read identifier: %s\n", yytext); // ofer
			 added_prefix = false;
			 int clevel = gProject->Parse_TOS->transUnit->contxt.syms->clevel;
			 if( clevel == FILE_SCOPE )
			 {
			   prvhooks->insert_side_prefix(NULL, yytext, yyleng, clevel);
			   added_prefix = true;
			 }
			 
						 if (gProject->Parse_TOS->possibleTag)
						 {
						   /* Check the tag table and insert a  */
						   /* ptr back to the definition.  */
						   SymEntry *se
							  = gProject->Parse_TOS->transUnit->contxt.tags->Lookup(
									lvalp->symbol->name);
						   lvalp->symbol->entry = se;
			   
							if( !added_prefix )
								prvhooks->insert_side_prefix(se, yytext, yyleng, clevel);
			   
						   gProject->Parse_TOS->possibleTag = false;
						   return(gProject->Parse_TOS->err_tok = TAG_NAME);
						 }
						 else if (gProject->Parse_TOS->possibleLabel)
						 {
						   /* Check the tag table and insert a  */
						   /* ptr back to the definition.  */
						   SymEntry *se
							  = gProject->Parse_TOS->transUnit->contxt.labels->LookupAt(
									lvalp->symbol->name,FUNCTION_SCOPE);
						   lvalp->symbol->entry = se;
						   if (!se)
							   gProject->Parse_TOS->transUnit->contxt.labels
								   ->InsertAt(lvalp->symbol->entry = mk_label(lvalp->symbol->name, NULL), 
									   FUNCTION_SCOPE);

						   gProject->Parse_TOS->possibleLabel = false;
						   return(gProject->Parse_TOS->err_tok = LABEL_NAME);
						 }
						 else {
						   /* Check the symbol table and insert a  */
						   /* ptr back to the definition.  */
						   SymEntry *se
				 = gProject->Parse_TOS->transUnit->contxt.syms->Lookup(
									lvalp->symbol->name);
			   lvalp->symbol->entry = se;
 
						   if( !added_prefix )
							   prvhooks->insert_side_prefix(se, yytext, yyleng, clevel);

							if (gProject->Parse_TOS->possibleType)
							{
							  if (se && se->IsTypeDef())
							  {
								  return(gProject->Parse_TOS->err_tok = TYPEDEF_NAME);
							  }
							}
						 }
			 
			 prvhooks->next_is_comp = false; /* we just lexed this comp */

						 return(gProject->Parse_TOS->err_tok = IDENT);
					   }
	YY_BREAK
case 171:
#line 586 "rv_lexer.l"
case 172:
#line 587 "rv_lexer.l"
case 173:
YY_RULE_SETUP
#line 587 "rv_lexer.l"
{  /* An integer */

						 bool has_L=strchr(yytext, 'L') || strchr(yytext, 'l');
						 bool has_U=strchr(yytext, 'U') || strchr(yytext, 'u');

						 if(has_U)
						 {
							  ulong ui;
							  ui = strtoul(yytext, (char**) NULL, 0);
							  lvalp->consValue = new UIntConstant(ui,has_L,HERE);
						 }
						 else
						 {
						   errno=0; // reset errno

						   long i = strtol(yytext, (char**) NULL, 0);

						   if (errno == ERANGE)
						   {
							  ulong ui;
							  ui = strtoul(yytext, (char**) NULL, 0);
							  lvalp->consValue = new UIntConstant(ui,has_L,HERE);
						   }
						   else
						   { 
							   lvalp->consValue = new IntConstant(i,has_L,HERE);
						   } 
						 }

						 return(gProject->Parse_TOS->err_tok = INUM);
					}
	YY_BREAK
case 174:
#line 620 "rv_lexer.l"
case 175:
#line 621 "rv_lexer.l"
case 176:
#line 622 "rv_lexer.l"
case 177:
YY_RULE_SETUP
#line 622 "rv_lexer.l"
{
						 /*
						 ** Note: The floatsuffix, if any, will be
						 ** ignored by atof().
						 */
						 lvalp->consValue = new FloatConstant(yytext,HERE);
						 return(gProject->Parse_TOS->err_tok = RNUM);
					   }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 631 "rv_lexer.l"
{   /* String Pasting */
						 cnt_nl(yytext,yyleng);
					   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 635 "rv_lexer.l"
{   /* Closing quote */
						 LAST_STATE();
						 *gProject->Parse_TOS->tokn_ptr = '\0';
						 lvalp->consValue =
						   new StringConstant(std::string(gProject->Parse_TOS->tokn_buff,
							 gProject->Parse_TOS->tokn_ptr-gProject->Parse_TOS->tokn_buff),
							 HERE,gProject->Parse_TOS->isWide);
						 return(gProject->Parse_TOS->err_tok = STRING);
					   }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 645 "rv_lexer.l"
{ /* Error - unterminated string constant */
						 if(yyerr("Unterminated string constant starting"))
						   yyterminate();

						 LAST_STATE();
						 return(INVALID);
					   }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 653 "rv_lexer.l"
{ /* octal escape sequence */
						 uint result;
						 char tmpOct[20];

						 strncpy(tmpOct,yytext,yyleng);
						 tmpOct[yyleng] = '\0';
						 tmpOct[4] = '\0';

						 if (yyleng > 4)
							 yyless(4);

						 if (sscanf(tmpOct+1, "%o", &result ) < 1)
						 {
							 if(yyerr("Invalid octal escape sequence"))
							   yyterminate();

							 LAST_STATE();
							 return(INVALID);
						 }

							 /* error, constant is out-of-bounds */
						 if ( result > 0xff ){
							if(yyerr("Escape sequence out-of-bounds"))
							  yyterminate();
						 }

						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
							*gProject->Parse_TOS->tokn_ptr++ = result;
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 685 "rv_lexer.l"
{   /* hex escape sequence - ISO C */
						 uint result;

						 if (sscanf(yytext+2, "%x", &result ) < 1)
						 {
							 if(yyerr("Invalid hex escape sequence"))
							   yyterminate();

							 LAST_STATE();
							 return(INVALID);
						 }

							 /* error, constant is out-of-bounds */
						 if ( result > 0xff ){
							if(yyerr("Escape sequence out-of-bounds"))
							  yyterminate();
						 } else if (yyleng > 4){
							yywarn("Hexadecimal escape exceeds two chars");
						 }

						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
							*gProject->Parse_TOS->tokn_ptr++ = result;
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 711 "rv_lexer.l"
{  /* Bad escape sequence */
						 yywarn("Bad escape sequence in string");
						*gProject->Parse_TOS->tokn_ptr++ = '?';
					   }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 716 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\n';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 723 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\t';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 730 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\r';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 737 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\b';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 744 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\f';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 751 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\v';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 758 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = '\a';
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 765 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = ESC_VAL;
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 772 "rv_lexer.l"
{  /* String continuation */
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
					   }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 777 "rv_lexer.l"
{
						 if (gProject->Parse_TOS->tokn_ptr < gProject->Parse_TOS->tokn_end)
						   *gProject->Parse_TOS->tokn_ptr++ = yytext[1];
						 else
							yywarn("String constant too long");
					   }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 784 "rv_lexer.l"
{
						 int n = yyleng;
						 if (gProject->Parse_TOS->tokn_ptr + n < gProject->Parse_TOS->tokn_end) {
							 memcpy(gProject->Parse_TOS->tokn_ptr,yytext,n);
							 gProject->Parse_TOS->tokn_ptr += n;
						 } else 
							yywarn("String constant too long");
					   }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 793 "rv_lexer.l"
{   /* Inside C-style comment */ }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 795 "rv_lexer.l"
{
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
						 gProject->Parse_TOS->in_preprocess = 0;
					   }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 800 "rv_lexer.l"
{ }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 801 "rv_lexer.l"
{
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
					   }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 805 "rv_lexer.l"
{
					   }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 807 "rv_lexer.l"
{
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
						 gProject->Parse_TOS->in_preprocess = 0;
					   }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 812 "rv_lexer.l"
{ yywarn("/* inside comment"); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 813 "rv_lexer.l"
{   /* Stars */ }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 814 "rv_lexer.l"
{
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
						 gProject->Parse_TOS->in_preprocess = 0;
					   }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 819 "rv_lexer.l"
{
						 LAST_STATE();
					   }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 823 "rv_lexer.l"
{   /* octal escape sequence */
						 uint result;

						 if (sscanf(yytext+1, "%o", &result ) < 1)
						 {
							 if(yyerr("Invalid octal escape sequence"))
							   yyterminate();

							 LAST_STATE();
							 return(INVALID);
						 }
						 
							 /* error, constant is out-of-bounds */
						 if ( result > 0xff ){
							 yywarn("Escape sequence out-of-bounds");
							 result = 0;
						 }

						 lvalp->consValue = new CharConstant((char) result, HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 846 "rv_lexer.l"
{   /* hex escape sequence - ISO C */
						 uint result;

						 if (sscanf(yytext+2, "%x", &result ) < 1)
						 {
							 if(yyerr("Invalid hex escape sequence"))
							   yyterminate();

							 LAST_STATE();
							 return(INVALID);
						 }

							 /* error, constant is out-of-bounds */
						 if ( result > 0xff ){
							 yywarn("Escape sequence out-of-bounds");
							 result = 0;
						 } else if (yyleng > 5){
							 yywarn("Hexadecimal escape exceeds two chars");
							 result = 0;
						 }

						 lvalp->consValue = new CharConstant((char) result, HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 872 "rv_lexer.l"
{  /* Bad escape sequence */
						 yywarn("Bad escape sequence in char constant");
						 lvalp->consValue = new CharConstant('\0',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 879 "rv_lexer.l"
{ /* Error unterminated char constant */
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
						 yywarn("Unterminated char constant");
						 lvalp->consValue = new CharConstant('\0',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 888 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\n',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 894 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\t',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 900 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\r',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 906 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\b',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 912 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\f',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 918 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\v',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 924 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant('\a',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 930 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant(ESC_VAL,HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 936 "rv_lexer.l"
{
						 gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 1;  /* Oddity */
						 lvalp->consValue = new CharConstant('\n',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 944 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant(yytext[1],HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 950 "rv_lexer.l"
{
						 lvalp->consValue = new CharConstant(*yytext,HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 956 "rv_lexer.l"
{ /* Empty */
						 yywarn("Empty character constant");
						 lvalp->consValue = new CharConstant('\0',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 963 "rv_lexer.l"
{ /* Multiple characters */
						 yywarn("Invalid character constant");
						 lvalp->consValue = new CharConstant('\0',HERE,gProject->Parse_TOS->isWide);
						 LAST_STATE();
						 return(gProject->Parse_TOS->err_tok = CHAR_CONST);
					   }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 970 "rv_lexer.l"
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 972 "rv_lexer.l"
{ gProject->Parse_TOS->yylineno++;
						 gProject->Parse_TOS->yynxtcol = 0;
						 gProject->Parse_TOS->in_preprocess = 0;
					   }
	YY_BREAK
case YY_STATE_EOF(CMMT):
#line 977 "rv_lexer.l"
{ 
						 yyerr("EOF reached inside comment");
						 gProject->Parse_TOS->in_preprocess = 0;
						 return(0);
					   }
	YY_BREAK
case YY_STATE_EOF(CC):
#line 983 "rv_lexer.l"
{ 
						 yyerr("EOF reached inside character constant");
						 return(0);
					   }
	YY_BREAK
case YY_STATE_EOF(STR):
#line 988 "rv_lexer.l"
{ 
						 yyerr("EOF reached inside string constant");
						 return(0);
					   }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 993 "rv_lexer.l"
{ /* Any unknown char is an error */
						*gProject->Parse_TOS->yyerrstream
						   << "Error: Line " << gProject->Parse_TOS->yylineno
						   << ": Illegal Character";
						if ((yytext[0] >= ' ') && (yytext[0] <= '~'))
						  *gProject->Parse_TOS->yyerrstream
						   << ": '" << yytext[0] << "'\n";
						else
						  *gProject->Parse_TOS->yyerrstream
						   << ", ASCII: " << std::oct << (int)(yytext[0]) 
								 << " (octal)\n" << std::dec;
					   }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1006 "rv_lexer.l"
ECHO;
	YY_BREAK
#line 2954 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PPLN):
case YY_STATE_EOF(PAREN_ELIM):
case YY_STATE_EOF(GCC_ATTRIB):
case YY_STATE_EOF(MSC_ASM_ELIM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 691 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 691 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 690);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
		 base[size-2] != YY_END_OF_BUFFER_CHAR ||
		 base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1006 "rv_lexer.l"


/************************************************************************
//
// yywrap() - This function is called by the lexer [yylex() or sslex()] when
//            the end-of-file (or end-of-string for sslex()) is reached.
//            It gets the next file/string ready (if any) and returns 1
//            which indicates to the lexer that there are no more files
//            remaining.  The lexer returns 0 to the parser, indicating
//            no more tokens are remaining. The parser function, yyparse(),
//            then returns 0, indicating that the parse is done.  This
//            behaviour allows a single item to be parsed to be placed
//            on the stack and parsed without the entire stack being consumed.
//
// **********************************************************************/

int yywrap(void)
{
	gProject->Parse_TOS->in_preprocess = 0;
	return 1;
}

/***********************************************************************/
int cnt_nl(char *txt, int len)
{
  int ret = 0;

  do {
	switch (*txt++) {
	  case '\n':
		ret++;
		gProject->Parse_TOS->yylineno++;
		gProject->Parse_TOS->yynxtcol = 0;
		break;

	  default:
		break;
	}
  } while(--len > 0);

  return ret;
}

/***********************************************************************/
/*  Process a #line directive */
int
get_lineno(bool file_ppln, char *txt, Statement **stement)
{
	int   ln = 0;
	*stement = NULL ;
	int   oldyylineno = gProject->Parse_TOS->yylineno;
	do {
		if (txt)
		{
			if (file_ppln)
				ln = 0;
			else
			{
				if (sscanf(txt,"%d", &ln) < 1)
					break;

				gProject->Parse_TOS->yylineno = ln - 1;
			}
		   
			txt = strchr(txt,'"');

			if (txt)
			{
				char *pnt_end;
	
				txt++;

				pnt_end = strchr(txt,'"');
				if (pnt_end)
					*pnt_end = '\0';
				else
					break;
						
				int entered_or_exited;
				if (sscanf(pnt_end+1,"%d", &entered_or_exited) < 1)
					entered_or_exited = -1;
			   
				switch (entered_or_exited)
				{
				  case 2:
					  // new line number into the previous included file
					  gProject->Parse_TOS->yylineno = oldyylineno;
					  #if 0 // whole idea is flawed
					  *stement = new EndInclStemnt(HERE);
					  #endif
					  if (! file_ppln)
						  gProject->Parse_TOS->yylineno = ln - 1;
					  gProject->Parse_TOS->filename = txt;
					  return (*stement != NULL);
					  
				  case 1:
					  // new line number into a new include file
					  gProject->Parse_TOS->yylineno = oldyylineno;
					  if (! file_ppln)
						  gProject->Parse_TOS->yylineno = ln - 1;
					  gProject->Parse_TOS->filename = txt;
					  #if 0 // whole idea is flawed
					  *stement = new InclStemnt(gProject->Parse_TOS->filename, HERE);
					  #endif
					  return (*stement != NULL);
					
				  case 3:
					  // new line number introduced by the gcc preprocessor 
					  // into the same file
					  if (gProject->Parse_TOS->filename == txt && 
						  ln > oldyylineno)
					  {
						  gProject->Parse_TOS->yylineno = ln - 1;
						  return 0;
					  }
					  /* No break */
				  default:
					  yywarn("Malformed #line directive");
					  /* No break */
				  case -1:
					  // new line number into the same file
					  gProject->Parse_TOS->yylineno = oldyylineno;
					  gProject->Parse_TOS->filename = txt;
					  #if 0 // whole idea is flawed
					  *stement = new FileLineStemnt(gProject->Parse_TOS->filename, ln, HERE);
					  #endif
					  if (! file_ppln)
						  gProject->Parse_TOS->yylineno = ln - 1;
					  return (*stement != NULL);
				  }
			  }
		  }

		return 0;
	  } while (0);

	yywarn("Malformed #line directive");
	return 0;
}

/***********************************************************************/

void print_caret(const std::string &s, int pos)
{
	const char *str;
	int i = 0;

	for (str=s.c_str(); *str && (i<pos); i++, str++)
		if (*str=='\t')
			*gProject->Parse_TOS->yyerrstream << "\t";
		else
			*gProject->Parse_TOS->yyerrstream << " ";

	*gProject->Parse_TOS->yyerrstream << "^\n";
}
 
/***********************************************************************/

void yywarn(char *s)
{
	*gProject->Parse_TOS->yyerrstream
		 << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
		 << ": Warning - " << s << ":\n" << gProject->Parse_TOS->line;
	print_caret(gProject->Parse_TOS->line, gProject->Parse_TOS->yycolno);
}

/***********************************************************************/

int yyerr(char *s, const std::string & str)
{
	*gProject->Parse_TOS->yyerrstream
	  << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
	  << ": " << s << str << ":\n" << gProject->Parse_TOS->line;
	print_caret(gProject->Parse_TOS->line, gProject->Parse_TOS->yycolno);

	++gProject->Parse_TOS->err_top_level;
	if (++gProject->Parse_TOS->err_cnt >= 10){
		*gProject->Parse_TOS->yyerrstream
		  << "Too many errors (" << gProject->Parse_TOS->err_cnt << " detected) - quitting.\n";
		return(1);
	}
	return(0); 
}

/***********************************************************************/

int yyerr(char *s)
{
	*gProject->Parse_TOS->yyerrstream
	  << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
	  << ": " << s << ":\n" << gProject->Parse_TOS->line;
	print_caret(gProject->Parse_TOS->line, gProject->Parse_TOS->yycolno);

	++gProject->Parse_TOS->err_top_level;
	if (++gProject->Parse_TOS->err_cnt >= 10){
		*gProject->Parse_TOS->yyerrstream
		  << "Too many errors (" << gProject->Parse_TOS->err_cnt << " detected) - quitting.\n";
		return(1);
	}
	return(0); 
}

/***********************************************************************/

int yyerror(char *s)
{
	*gProject->Parse_TOS->yyerrstream
	  << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
	  << ": Error (" << s << ") before '"
	  << toksym(gProject->Parse_TOS->err_tok,0) << "'\n" << gProject->Parse_TOS->line;
	print_caret(gProject->Parse_TOS->line, gProject->Parse_TOS->yycolno);

	if (++gProject->Parse_TOS->err_cnt >= 10){
		*gProject->Parse_TOS->yyerrstream
		  << "Too many errors (" << gProject->Parse_TOS->err_cnt << " detected) - quitting.\n";
		return(1);
	}
	return(0);
}

/***********************************************************************/
/* created 11/6/99 */
void function_to_eliminate_gcc_warning()
{
  yyunput(0,"");
}

/***********************************************************************/
