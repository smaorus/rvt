#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yycpp_create_buffer
#define yy_delete_buffer yycpp_delete_buffer
#define yy_flex_debug yycpp_flex_debug
#define yy_init_buffer yycpp_init_buffer
#define yy_flush_buffer yycpp_flush_buffer
#define yy_load_buffer_state yycpp_load_buffer_state
#define yy_switch_to_buffer yycpp_switch_to_buffer
#define yyin yycppin
#define yyleng yycppleng
#define yylex yycpplex
#define yylineno yycpplineno
#define yyout yycppout
#define yyrestart yycpprestart
#define yytext yycpptext
#define yywrap yycppwrap
#define yyalloc yycppalloc
#define yyrealloc yycpprealloc
#define yyfree yycppfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yycpprestart(yycppin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yycppleng;

extern FILE *yycppin, *yycppout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yycpptext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yycpprestart()), so that the user can continue scanning by
	 * just pointing yycppin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yycpptext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yycppleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yycppwrap()'s to do buffer switches
 * instead of setting up a fresh yycppin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yycpprestart (FILE *input_file  );
void yycpp_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yycpp_create_buffer (FILE *file,int size  );
void yycpp_delete_buffer (YY_BUFFER_STATE b  );
void yycpp_flush_buffer (YY_BUFFER_STATE b  );
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yycpppop_buffer_state (void );

static void yycppensure_buffer_stack (void );
static void yycpp_load_buffer_state (void );
static void yycpp_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yycpp_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yycpp_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yycpp_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yycpp_scan_bytes (yyconst char *bytes,int len  );

void *yycppalloc (yy_size_t  );
void *yycpprealloc (void *,yy_size_t  );
void yycppfree (void *  );

#define yy_new_buffer yycpp_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yycppin = (FILE *) 0, *yycppout = (FILE *) 0;

typedef int yy_state_type;

extern int yycpplineno;

int yycpplineno = 1;

extern char *yycpptext;
#define yytext_ptr yycpptext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yycpptext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yycppleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 235
#define YY_END_OF_BUFFER 236
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1105] =
    {   0,
        0,    0,    4,    4,    9,    9,    0,    0,   28,   28,
       29,   29,    0,    0,    0,    0,    0,    0,  236,  234,
       37,   39,   38,  198,  234,  185,  173,  200,  193,  234,
      180,  181,  194,  195,  182,  196,  192,  199,  175,  174,
      206,  207,  201,  208,  202,  205,  173,  190,  191,  203,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      188,  204,  189,  197,    4,    6,    5,    5,    9,    8,
       12,  235,   11,   10,   28,   28,   27,   29,   30,   33,
       32,   31,   36,   35,   34,   26,   25,   37,   39,    0,

       38,  220,    0,  179,    0,    0,    0,  186,  187,    0,
        0,    0,  173,  225,  221,  230,    0,    0,  223,  213,
      226,  214,  227,  212,  209,    0,  177,    1,    7,  224,
      177,  175,    0,    0,  175,    0,    0,  174,  174,    0,
      211,  215,  217,  219,  218,  216,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  231,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       98,  173,  173,  173,  173,  173,  173,  173,  108,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  232,  222,    4,    2,    3,    9,   28,
       28,   27,   29,    0,    0,    0,  183,    0,    0,    0,
      178,    0,    0,  210,  233,    0,  177,    0,  177,  176,
        0,    0,    0,  175,    0,    0,    0,  174,  228,  229,
        0,    0,    0,    0,    0,    0,    0,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,   41,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  105,  173,  173,  173,
      110,  173,  173,  173,  114,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  132,  173,  173,  173,  173,  173,  173,  173,
      173,  173,    0,    0,    0,    0,    0,    0,    0,  177,
      176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   86,   87,  173,
       89,  173,   91,  173,  173,  173,  173,  173,  173,  173,
      100,  101,  173,  173,  173,  173,  107,  173,  111,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  130,  173,  173,  173,
      173,  173,  173,  140,  173,  173,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  176,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,  173,  173,  173,
       41,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   81,  173,  173,
      173,  173,   76,  173,  173,  173,   88,   90,   92,   93,
      173,  173,  173,  173,  173,  173,  173,  104,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      122,  173,  173,  173,  173,  173,  173,  131,  173,  173,
      173,  173,  136,  173,  138,  173,  173,  173,  143,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,   69,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   44,  173,  173,  173,  173,  173,   96,   99,

      173,  103,  106,  109,  173,  173,  173,  173,  173,  173,
      119,  173,  173,  121,  123,  124,  125,  127,  128,  173,
      173,  134,  173,   66,  173,  173,  173,  173,    0,    0,
        0,   16,    0,    0,   23,   22,    0,    0,    0,  173,
      173,  173,  173,  173,  173,   45,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   70,   71,   72,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   83,  173,  173,   73,   74,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,   50,  173,  173,   95,

      173,  112,  173,  173,  173,  117,  173,  173,  173,  173,
      173,  133,  173,  173,  139,  173,  142,    0,    0,   17,
        0,   21,    0,    0,    0,   77,  173,  173,  173,  173,
      173,  173,   82,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,   80,   51,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  165,  173,  173,
      173,  173,  173,  173,  173,   24,   79,  173,   62,  173,
      173,   67,   85,   64,  173,  173,   94,   97,  102,  173,
      115,  116,  173,  120,   56,  173,  129,  135,  137,  141,
        0,  184,    0,    0,    0,    0,    0,  173,  173,  173,

       61,  173,  173,  173,  173,   84,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  163,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,   59,  173,  173,  173,   46,
      113,  118,  173,    0,    0,    0,    0,    0,  173,  173,
      173,  173,  173,   60,  173,  173,  146,  173,  173,  173,
      173,  173,  173,  173,   52,  173,  173,  173,  159,  173,
      173,  162,  173,  173,  173,  173,  173,  173,  171,  173,
      173,   58,   63,   75,   68,  173,  173,    0,   19,   13,
        0,    0,  173,   40,   42,   78,  173,  173,  173,  173,

      173,  173,  173,  173,   48,  173,   53,  173,  173,  173,
      173,  173,  173,  173,  173,  169,  173,  173,  173,  173,
      173,  173,    0,   15,    0,  173,  173,  173,  173,  145,
      173,  173,  173,  173,  173,  173,  173,  158,  173,  173,
      173,  173,  173,  173,  173,  173,   55,   57,   65,  173,
        0,    0,  173,   43,   47,   54,  173,  173,  173,  173,
      173,  173,  157,  173,  161,  173,  173,  173,  173,  173,
      173,  126,    0,    0,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  167,  168,  173,  173,    0,    0,
      173,  147,  173,  173,  173,  173,  173,  173,  173,   49,

      173,  173,  173,  173,  173,   18,    0,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  166,  173,  172,
        0,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,    0,  173,  173,  173,  150,  173,
      173,  153,  173,  173,  173,  173,  173,  173,    0,  173,
      173,  173,  173,  173,  173,  173,  173,  160,  173,  173,
        0,  173,  148,  173,  151,  173,  173,  173,  173,  164,
      173,    0,  173,  173,  173,  173,  155,  173,  173,    0,
      144,  173,  173,  173,  173,  173,    0,  173,  173,  173,
      173,  170,    0,  173,  173,  154,  156,    0,  149,  152,

        0,    0,   14,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,    1,   38,   39,   40,   39,   41,   42,
       11,   11,   11,   11,   11,   43,   11,   11,   44,   45,
       11,   46,   47,   11,   48,   49,   11,   50,   11,   11,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   11,   65,   66,   67,   68,
       69,   70,   11,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    4,    1,    1,    5,    1,    1,    1,
        1,    5,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    1,    1,    1,    7,    7,    7,
        8,    6,    9,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,   10,    3,    7,    7,    7,    7,    8,
        6,    3,    3,    3,    3,    9,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,   10,
        1,   11,    1
    } ;

static yyconst flex_int16_t yy_base[1129] =
    {   0,
        0,    0,   81,   82, 1686, 1685,   85,   90,   84,   85,
     1605, 1604,   92,   94,   99,  108,   87,   91, 1685, 1690,
      114, 1690,  123, 1649,   80,  166,    0, 1648,   99, 1630,
     1690, 1690, 1646,   78, 1690,  111,  128,  126,  216,  273,
     1648, 1690,  101, 1644,  106, 1690,  161,  201, 1690, 1643,
      122,  100,  113,  143,  118,  134,  144, 1608,  137, 1607,
     1601,  158, 1604,   89, 1613,  153,  160,   65,  119,  161,
     1690,  144, 1690, 1690,    0, 1690, 1650, 1654,    0, 1690,
     1690, 1690, 1690, 1690,    0,  226, 1690,    0, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690,  247, 1690,  281,

      305, 1690,  213, 1690,  339, 1667,  415, 1690, 1666,  354,
      198,  218,    0, 1690, 1690, 1690,  253,  477, 1690, 1690,
     1690, 1690, 1690, 1651, 1690, 1646,  283, 1690, 1690, 1690,
      309,  157,  406,  430,  272,    0,  293,    0,  345,  305,
     1690, 1631, 1690, 1690, 1690, 1630,  226, 1612,  465, 1625,
      193, 1593, 1601, 1591, 1585, 1690, 1589,  515, 1598, 1596,
     1587, 1587, 1580, 1583, 1591,  183, 1594, 1593, 1580,  213,
     1573, 1574, 1571,  222, 1575, 1572, 1578, 1568,    0,  288,
     1572, 1566, 1571, 1561, 1565, 1575,  194, 1577,  268, 1564,
      266,  271, 1568, 1564,  323, 1552, 1559,  205, 1564, 1556,

      292, 1563, 1561, 1690, 1690,    0, 1690, 1690,    0,    0,
      390, 1690,    0,  469,    0, 1621, 1690,  537,  352,  315,
     1690,  570,    0, 1690, 1690,  582, 1690,  600,  347,  483,
      373, 1598, 1595, 1690,  374, 1596, 1593, 1690, 1690, 1690,
     1564, 1554, 1547, 1557,  331, 1541, 1550, 1546, 1567,  396,
      405, 1551, 1533,  359, 1553,  412, 1548, 1538,  301, 1546,
      426,  444, 1531,  448, 1575, 1543, 1544, 1535,    0, 1531,
     1533, 1542, 1537, 1538, 1524, 1522,  287, 1527, 1536, 1531,
     1533, 1529, 1521, 1521, 1526, 1529,    0, 1524, 1514, 1518,
        0, 1519, 1524, 1519,    0, 1518, 1506, 1501, 1502, 1508,

     1509, 1499, 1497, 1499, 1501, 1508, 1494, 1492, 1492, 1494,
     1491, 1493,    0, 1501, 1491, 1495, 1490, 1484, 1497, 1499,
     1498, 1487,  592,  636,  403,  168,  627,  684,  609,  485,
      625,  494, 1522, 1521,  379, 1477, 1480, 1474, 1487, 1472,
     1474, 1485, 1473, 1496, 1477, 1473, 1466, 1478, 1466,  384,
     1478,  483, 1463, 1466, 1462, 1460, 1476, 1474,  409, 1474,
     1472, 1456, 1470, 1454,  393, 1462, 1464, 1458, 1443, 1450,
     1455, 1460, 1451, 1489, 1457, 1448, 1449,    0,    0, 1447,
        0, 1448,    0, 1438, 1436, 1444, 1434, 1432, 1432, 1438,
        0,    0, 1439, 1431, 1428, 1432,    0, 1431,    0, 1441,

     1425, 1423, 1439, 1438, 1433, 1428, 1419, 1419, 1418, 1415,
     1427, 1417, 1421, 1426, 1425, 1416,    0, 1405,  669, 1412,
     1417, 1416, 1403,    0, 1403, 1404, 1414,  467,    0,  744,
      422,  528,    0,  458, 1448, 1445, 1690, 1402,  440, 1396,
     1405, 1397, 1401, 1410, 1394, 1406, 1690, 1397, 1418, 1399,
     1405, 1388, 1400, 1399, 1386, 1383, 1388, 1393, 1392, 1378,
     1394, 1391, 1393,  475, 1385, 1382,  656,  720, 1370, 1384,
     1381,  484, 1376, 1368, 1372, 1381, 1366,    0, 1377, 1377,
     1362, 1378,    0, 1367, 1360, 1363,    0,    0,    0,    0,
     1362, 1351, 1362, 1367, 1366, 1367, 1356,    0, 1364, 1362,

     1355, 1350, 1345, 1345, 1344, 1358, 1357, 1341, 1349, 1344,
        0, 1352, 1349, 1351, 1335, 1344, 1350,    0, 1345, 1345,
     1347, 1341,    0, 1333,    0, 1344, 1335, 1343,    0,  732,
      474, 1367, 1325, 1323, 1334, 1335, 1333, 1318, 1330, 1316,
     1320, 1327, 1326, 1336, 1316, 1328, 1318, 1315, 1324, 1313,
     1305, 1305, 1306, 1307, 1316, 1307, 1312,  725, 1294, 1301,
     1314, 1300, 1338, 1341, 1338,    0, 1293, 1306, 1306,  503,
     1301,  491, 1292, 1290, 1298,  582, 1289, 1300, 1295, 1281,
     1286, 1327, 1324, 1295, 1278, 1288, 1291, 1288, 1276, 1275,
     1274, 1269,    0, 1271, 1280, 1265, 1268, 1264,    0,    0,

     1272,    0,    0,    0, 1275, 1278, 1262, 1263, 1271, 1257,
        0, 1269, 1270,    0,    0,    0, 1272,    0,    0, 1253,
     1264,    0, 1257,    0, 1263, 1256, 1255, 1247,  698, 1252,
     1245, 1690, 1259, 1250, 1690, 1690, 1259, 1239, 1258, 1235,
     1270, 1241, 1252, 1242, 1247,    0, 1236, 1232, 1232, 1247,
     1236, 1237, 1228, 1230, 1234, 1228, 1225, 1223, 1230, 1229,
     1219, 1236, 1230,    0,    0,    0, 1228, 1216, 1215, 1230,
     1217, 1218, 1213, 1208, 1208,  511, 1219, 1223, 1211, 1213,
     1210,    0, 1201, 1218,    0,    0, 1218, 1208, 1212, 1204,
     1213, 1207, 1206, 1195, 1201, 1204,    0, 1203, 1202,    0,

     1188,    0, 1202, 1191, 1187,    0, 1197, 1185, 1182, 1198,
     1193,    0, 1192, 1192,    0, 1190,    0, 1246, 1192, 1690,
     1187, 1690, 1189, 1189, 1188,    0, 1197, 1181, 1167, 1174,
     1162, 1178,    0, 1173, 1170, 1157, 1166, 1161, 1162, 1163,
     1157, 1165, 1168, 1156, 1154, 1170,    0, 1169, 1167, 1149,
     1161, 1148, 1144, 1158, 1144, 1149, 1155,    0, 1136, 1158,
     1146, 1141, 1141, 1135, 1137,    0,    0, 1149, 1151, 1139,
     1138, 1136,    0,    0, 1124, 1129,    0,    0,    0, 1126,
        0,    0, 1114,    0,    0, 1060,    0,    0,    0,    0,
     1121, 1690, 1048, 1040, 1044, 1038, 1035, 1026,   67,   77,

        0,  130,  146,  212,  225,    0,  247,  268,  295,  330,
      342,  413,  445,  471,  480,  522,  537,  545,  533,  559,
      571,  587,  586,  571,    0,  586,  591,  613,  610,  606,
      613,  623,  616,  614,  635,    0,  636,  648,  644,    0,
        0,    0,  634,  670,  646,  659,  646,  653,  654,  674,
      670,  676,  664,    0,  684,  687,    0,  684,  681,  689,
      699,  690,  693,  689,    0,  722,  729,  718,    0,  717,
      733,    0,  735,  728,  730,  736,  744,  744,    0,  750,
      751,  752,    0,    0,    0,  753,  749,  738, 1690, 1690,
      752,  744,  751,    0,  760,    0,  761,  749,  750,  755,

      751,  765,  763,  767,    0,  760,    0,  767,  765,  754,
      755,  773,  759,  760,  776,    0,  778,  776,  780,  781,
      782,  767,  768, 1690,  767,  770,  787,  788,  784,    0,
      766,  770,  781,  788,  783,  778,  778,    0,  788,  793,
      796,  785,  800,  785,  783,  793,    0,    0,    0,  787,
      797,  806,  803,    0,    0,    0,  804,  810,  811,  795,
      813,  796,    0,  813,    0,  811,  809,  795,  802,  819,
      820,    0,  809,  805,  823,  809,  825,  826,  813,  828,
      816,  823,  835,  827,    0,    0,  826,  821,  832,  831,
      837,    0,  825,  829,  827,  831,  841,  831,  843,    0,

      844,  847,  848,  833,  836, 1690,  840,  855,  839,  844,
      841,  847,  844,  844,  847,  865,  855,    0,  862,    0,
      855,  858,  861,  854,  849,  864,  857,  852,  858,  874,
      860,  861,  879,  881,  882,  869,  877,  867,    0,  879,
      869,    0,  872,  871,  874,  877,  875,  890,  893,  892,
      883,  881,  885,  883,  881,  887,  883,    0,  886,  893,
      887,  905,    0,  888,    0,  889,  906,  894,  908,    0,
      911,  895,  903,  912,  913,  899,    0,  900,  902,  904,
        0,  903,  904,  909,  910,  908,  917,  913,  914,  913,
      914,    0,  929,  916,  917,    0,    0,  915,    0,    0,

      917,  931, 1690, 1690,  991, 1002, 1013, 1024, 1035, 1046,
     1057, 1068, 1079, 1090, 1099, 1108, 1119, 1130, 1141, 1150,
     1160, 1166, 1170, 1173, 1176, 1179, 1183, 1192
    } ;

static yyconst flex_int16_t yy_def[1129] =
    {   0,
     1104,    1, 1105, 1105, 1106, 1106, 1107, 1107, 1108, 1108,
     1109, 1109, 1110, 1110, 1111, 1111, 1112, 1112, 1104, 1104,
     1104, 1104, 1104, 1104, 1113, 1114, 1115, 1104, 1104, 1116,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1115, 1104, 1104, 1104,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1104, 1104, 1104, 1104, 1117, 1104, 1104, 1104, 1118, 1104,
     1104, 1104, 1104, 1104, 1119, 1119, 1104, 1120, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104, 1104, 1113, 1104, 1104, 1114, 1114, 1104, 1114, 1121,
     1114, 1114, 1115, 1104, 1104, 1104, 1116, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1122, 1104, 1104, 1104,
     1122,   39, 1104, 1104, 1104, 1123, 1104,   40, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1113, 1116, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1104, 1104, 1117, 1104, 1104, 1118, 1119,
     1119, 1104, 1120, 1113, 1124, 1121, 1104, 1121, 1114, 1114,
     1104, 1116, 1125, 1104, 1104, 1104, 1104, 1104, 1126, 1123,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1113, 1113, 1114, 1114, 1116, 1116, 1104, 1127,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1113,  324, 1114,
     1114, 1116,  328, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1114,
     1114, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1114, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1128, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1128, 1104, 1104, 1104, 1104, 1104, 1104, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1104, 1104, 1104, 1104, 1104, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1104, 1104, 1104,
     1104, 1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1104, 1104, 1104, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1104, 1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1104, 1104, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1104, 1104,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1115, 1104, 1104, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1104, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1104, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1104, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1104,
     1115, 1115, 1115, 1115, 1115, 1115, 1104, 1115, 1115, 1115,
     1115, 1115, 1104, 1115, 1115, 1115, 1115, 1104, 1115, 1115,

     1104, 1104, 1104,    0, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104
    } ;

static yyconst flex_int16_t yy_nxt[1774] =
    {   0,
       20,   21,   22,   23,   23,   23,   21,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   42,   43,   44,   45,   46,   27,   27,   27,
       27,   27,   47,   27,   27,   27,   27,   27,   27,   27,
       48,   20,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   27,   59,   27,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   27,   27,   27,   71,
       72,   73,   74,   76,   76,   86,   86,   82,  104,   82,
       86,   86,   82,   82,   82,  120,   82,   77,   77,   83,

       84,   82,   78,   78,   83,   84,   91,   92,   91,   92,
       82,  115,  121,   94,   95,   98,   99,  100,  100,  100,
       98,  850,   94,   95,  100,   99,  101,  101,  101,  100,
      122,  105,  198,  116,  142,  143,  199,   82,   82,   97,
      145,  146,  128,   97,  125,  123,  124,  129,  126,  851,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  187,
      130,  157,  188,   87,   87,   82,   82,  107,  108,  147,
      108,  162,  107,  163,  148,  109,  158,  170,  204,  159,
      160,  164,  200,  165,  852,  161,  171,  201,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  179,  166,  172,

      108,  173,  149,  840,  180,  167, 1104,  149,  168,  175,
      174,  169,  176,  183,  177,  190,  191,  184,  202,  194,
      108,  104,  195,  203,  205,  192,  185,  211,  193,  431,
      196,  111,  211, 1104,  104,  112,  131,  197,  132,  132,
      132,  132,  132,  132,  132,  133,  133,  150,   98,   99,
      100,  100,  100,   98,  273,  274,  134,  298,  135,  242,
      151,  219,  299,  135,  105,  136,  221,  152,  315,  243,
      278,  153,  154,  279,  155,  134,  316,  105,  280,  137,
      853,  135,  100,   99,  100,  100,  100,  100,  220,  135,
      854,  284,  136,  131,  285,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  118,  212,  100,   99,  101,  101,
      101,  100,  855,  134,  135,  139,  231,  108,  232,  135,
      139,  233,  234,  226,  227,  227,  307,  305,  235,  301,
      236,  856,  134,  237,  238,  137,  140,  135,  139,  302,
      303,  308,  226,  227,  306,  135,  139,  103,  227,  226,
      227,  227,  103,  290,  108,  319,  217,  320,  385,  386,
      291,  214,  214,  214,  214,  214,  214,  214,  226,  227,
      326,  363,  857,  364,  227,  103,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  858,  311,  139,  227,  227,
      103,  211,  139,  312,  103,  103,  211,  333,  334,  103,

      339,  234,  238,  340,  859,  108,  103,  227,  140,  103,
      139,  103,  227,  103,  353,  215,  107,  108,  139,  325,
      438,  107,  354,  439,  108,  440,  131,  355,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  134,  228,  473,  228,
      455,  456,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  345,  430,  348,  474,  134,  149,  346,  347,  212,
      349,  149,  357,  350,  466,  104,  108,  104,  358,  359,
      111,  467,  532,  360,  112,  117,  437,  860,  531,  366,
      117,  323,  323,  323,  323,  323,  323,  323,  367,  222,

      222,  222,  222,  222,  222,  222,  368,  372,  534,  582,
      535,  150,  583,  117,  369,  861,  373,  434,  105,  435,
      105,  370,  436,  437,  151,  331,  227,  227,  117,  629,
      331,  152,  117,  117,  559,  153,  154,  117,  155,  217,
      458,  221,  560,  862,  117,  227,  332,  117,  331,  117,
      227,  117,  863,  223,  249,  459,  331,  673,  674,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  670,  758,
      250,  671,  251,  252,  253,  254,  759,  255,  256,  118,
      257,  864,  258,  221,  259,  260,  261,  262,  263,  264,
      265,  865,  327,  327,  327,  327,  327,  327,  327,  329,

      104,  329,  866,  867,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  868,  428,  428,  428,  428,  428,  428,
      428,  118,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      221,  678,  869,  105,  104,  679,  870,  871,  872,  432,
      432,  432,  432,  432,  432,  432,  873,  874,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  331,  875,  877,
      876,  878,  331,  429,  429,  429,  429,  429,  118,  563,
      879,  564,  880,  881,  565,  566,  882,  105,  332,  883,
      331,  429,  429,  429,  429,  429,  429,  221,  331,  718,

      108,  884,  885,  886,  718,  887,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  567,  888,  889,  890,  891,
      892,  433,  433,  433,  433,  433,  893,  519,  894,  895,
      896,  897,  520,  530,  108,  118,  521,  522,  530,  433,
      433,  433,  433,  433,  433,  530,  108,  898,  899,  900,
      530,  901,  902,  903,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  904,  905,  906,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  568,  569,  570,  571,  572,
      653,  907,  654,  573,  908,  655,  909,  910,  911,  574,
      575,  576,  656,  577,  578,  912,  913,  657,  658,  659,

      914,  915,  916,  917,  918,  919,  920,  921,  922,  111,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  948,  949,  950,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  995,  994,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,

     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1026, 1025, 1027, 1029, 1028, 1030, 1031, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  103,
      849,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  113,  848,  847,  113,  113,  113,  113,  117,  846,
      117,  845,  117,  117,  117,  117,  117,  117,  117,  206,
      844,  206,  206,  792,  206,  206,  206,  206,  206,  206,
      209,  843,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  127,  842,  127,  127,  230,  230,  230,  324,  324,
      324,  328,  328,  328,  229,  841,  840,  229,  330,  839,
      838,  330,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  837,  836,  835,  834,  833,  832,  831,
      830,  829,  828,  827,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  817,  816,  815,  814,  813,  812,  811,
      810,  809,  808,  807,  806,  805,  804,  803,  802,  801,
      800,  799,  798,  797,  796,  795,  794,  793,  792,  790,
      789,  788,  787,  786,  785,  784,  783,  782,  781,  780,
      779,  778,  777,  776,  775,  774,  773,  772,  771,  770,
      769,  768,  767,  766,  765,  764,  763,  762,  761,  760,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  744,  743,  742,  741,  740,  739,  738,

      737,  736,  735,  734,  733,  732,  731,  730,  729,  728,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  717,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  677,  676,  675,
      672,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      660,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      593,  643,  269,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  437,  628,  627,  626,

      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  581,  580,  579,  562,  561,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      533,  437,  437,  529,  528,  527,  526,  525,  524,  523,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,

      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  472,  471,  470,  469,  468,  465,
      464,  463,  462,  461,  460,  457,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      238,  234,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  384,  383,  382,  381,  380,  379,  378,

      377,  376,  375,  374,  371,  365,  362,  361,  356,  352,
      351,  344,  343,  342,  341,  338,  337,  336,  335,  238,
      238,  234,  234,  217,  322,  321,  318,  317,  314,  313,
      310,  309,  304,  300,  297,  296,  295,  294,  293,  292,
      289,  288,  287,  286,  283,  282,  281,  277,  276,  275,
      272,  271,  270,  269,  268,  267,  266,  248,  247,  246,
      245,  244,  241,  118,  240,  239,  225,  224,  108,  108,
      208,  207,  189,  186,  182,  181,  178,  156,  144,  141,
      119,  118,  114,  102, 1104,   89,   89,   80,   80,   19,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104
    } ;

static yyconst flex_int16_t yy_chk[1774] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,    9,   10,    7,   25,   17,
        9,   10,    8,   18,   13,   34,   14,    3,    4,    7,

        7,   15,    3,    4,    8,    8,   13,   13,   14,   14,
       16,   29,   34,   15,   15,   21,   21,   21,   21,   21,
       21,  799,   16,   16,   23,   23,   23,   23,   23,   23,
       36,   25,   68,   29,   43,   43,   68,    9,   10,   17,
       45,   45,   38,   18,   37,   36,   36,   38,   37,  800,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   64,
       38,   51,   64,    9,   10,    9,   10,   26,   26,   47,
      326,   52,   26,   52,   47,   26,   51,   55,   72,   51,
       51,   53,   69,   53,  802,   51,   55,   69,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   59,   54,   56,

      111,   56,   48,  803,   59,   54,  132,   48,   54,   57,
       56,   54,   57,   62,   57,   66,   66,   62,   70,   67,
      112,  103,   67,   70,   72,   66,   62,   86,   66,  326,
       67,   26,   86,  132,  147,   26,   39,   67,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   48,   98,   98,
       98,   98,   98,   98,  166,  166,   39,  187,   39,  151,
       48,  111,  187,   39,  103,   39,  117,   48,  198,  151,
      170,   48,   48,  170,   48,   39,  198,  147,  170,   39,
      804,   39,  100,  100,  100,  100,  100,  100,  112,   39,
      805,  174,   39,   40,  174,   40,   40,   40,   40,   40,

       40,   40,   40,   40,  117,   86,  101,  101,  101,  101,
      101,  101,  807,   40,  135,   40,  137,  220,  137,  135,
       40,  137,  137,  127,  127,  127,  192,  191,  140,  189,
      140,  808,   40,  140,  140,  135,   40,  135,   40,  189,
      189,  192,  127,  127,  191,  135,   40,  105,  127,  131,
      131,  131,  105,  180,  219,  201,  110,  201,  277,  277,
      180,  105,  105,  105,  105,  105,  105,  105,  131,  131,
      220,  259,  809,  259,  131,  105,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  810,  195,  139,  229,  229,
      105,  211,  139,  195,  105,  105,  211,  231,  235,  105,

      245,  231,  235,  245,  811,  325,  105,  229,  139,  105,
      139,  105,  229,  105,  254,  105,  107,  107,  139,  219,
      335,  107,  254,  335,  431,  335,  133,  254,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  133,  134,  365,  134,
      350,  350,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  250,  325,  251,  365,  133,  149,  250,  250,  211,
      251,  149,  256,  251,  359,  428,  531,  214,  256,  256,
      107,  359,  434,  256,  107,  118,  434,  812,  431,  261,
      118,  214,  214,  214,  214,  214,  214,  214,  261,  118,

      118,  118,  118,  118,  118,  118,  262,  264,  439,  472,
      439,  149,  472,  118,  262,  813,  264,  332,  428,  332,
      214,  262,  332,  332,  149,  230,  330,  330,  118,  531,
      230,  149,  118,  118,  464,  149,  149,  118,  149,  218,
      352,  432,  464,  814,  118,  330,  230,  118,  230,  118,
      330,  118,  815,  118,  158,  352,  230,  572,  572,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  570,  676,
      158,  570,  158,  158,  158,  158,  676,  158,  158,  432,
      158,  816,  158,  222,  158,  158,  158,  158,  158,  158,
      158,  817,  222,  222,  222,  222,  222,  222,  222,  226,

      323,  226,  818,  819,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  820,  323,  323,  323,  323,  323,  323,
      323,  222,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      327,  576,  821,  323,  324,  576,  822,  823,  824,  327,
      327,  327,  327,  327,  327,  327,  826,  827,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  331,  828,  829,
      828,  830,  331,  324,  324,  324,  324,  324,  327,  467,
      831,  467,  832,  833,  467,  467,  834,  324,  331,  835,
      331,  324,  324,  324,  324,  324,  324,  328,  331,  629,

      629,  837,  838,  839,  629,  843,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  467,  844,  845,  846,  847,
      848,  328,  328,  328,  328,  328,  849,  419,  850,  851,
      852,  853,  419,  530,  530,  328,  419,  419,  530,  328,
      328,  328,  328,  328,  328,  430,  430,  855,  856,  858,
      430,  859,  860,  861,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  862,  863,  864,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  468,  468,  468,  468,  468,
      558,  866,  558,  468,  867,  558,  868,  870,  871,  468,
      468,  468,  558,  468,  468,  873,  874,  558,  558,  558,

      875,  876,  877,  878,  880,  881,  882,  886,  887,  430,
      888,  891,  892,  893,  895,  897,  898,  899,  900,  901,
      902,  903,  904,  906,  908,  909,  910,  911,  912,  913,
      914,  915,  917,  918,  919,  920,  921,  922,  923,  925,
      926,  927,  928,  929,  931,  932,  933,  934,  935,  936,
      937,  939,  940,  941,  942,  943,  944,  945,  946,  950,
      951,  952,  953,  957,  958,  959,  960,  961,  962,  964,
      966,  967,  968,  969,  970,  971,  973,  974,  975,  976,
      977,  978,  977,  978,  978,  979,  980,  981,  982,  983,
      984,  987,  988,  989,  990,  991,  993,  994,  995,  996,

      997,  998,  999, 1001, 1002, 1003, 1004, 1005, 1007, 1008,
     1009, 1010, 1011, 1010, 1012, 1013, 1012, 1014, 1015, 1016,
     1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061,
     1062, 1064, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074,
     1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1098, 1101,
     1102, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1113,
      798, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1115,  797,  796, 1115, 1115, 1115, 1115, 1116,  795,
     1116,  794, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117,
      793, 1117, 1117,  791, 1117, 1117, 1117, 1117, 1117, 1117,
     1118,  786, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1121, 1122,  783, 1122, 1122, 1123, 1123, 1123, 1124, 1124,
     1124, 1125, 1125, 1125, 1126,  780,  776, 1126, 1127,  775,
      772, 1127, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128,  771,  770,  769,  768,  765,  764,  763,
      762,  761,  760,  759,  757,  756,  755,  754,  753,  752,
      751,  750,  749,  748,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  732,  731,  730,
      729,  728,  727,  725,  724,  723,  721,  719,  718,  716,
      714,  713,  711,  710,  709,  708,  707,  705,  704,  703,
      701,  699,  698,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  684,  683,  681,  680,  679,  678,  677,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,

      652,  651,  650,  649,  648,  647,  645,  644,  643,  642,
      641,  640,  639,  638,  637,  634,  633,  631,  630,  628,
      627,  626,  625,  623,  621,  620,  617,  613,  612,  610,
      609,  608,  607,  606,  605,  601,  598,  597,  596,  595,
      594,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  575,  574,  573,
      571,  569,  568,  567,  565,  564,  563,  562,  561,  560,
      559,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  528,  527,  526,

      524,  522,  521,  520,  519,  517,  516,  515,  514,  513,
      512,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  497,  496,  495,  494,  493,  492,  491,
      486,  485,  484,  482,  481,  480,  479,  477,  476,  475,
      474,  473,  471,  470,  469,  466,  465,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  446,  445,  444,  443,  442,  441,  440,
      438,  436,  435,  427,  426,  425,  423,  422,  421,  420,
      418,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  398,  396,

      395,  394,  393,  390,  389,  388,  387,  386,  385,  384,
      382,  380,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  364,  363,  362,  361,  360,  358,
      357,  356,  355,  354,  353,  351,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      334,  333,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  294,  293,
      292,  290,  289,  288,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  276,  275,  274,  273,  272,  271,  270,

      268,  267,  266,  265,  263,  260,  258,  257,  255,  253,
      252,  249,  248,  247,  246,  244,  243,  242,  241,  237,
      236,  233,  232,  216,  203,  202,  200,  199,  197,  196,
      194,  193,  190,  188,  186,  185,  184,  183,  182,  181,
      178,  177,  176,  175,  173,  172,  171,  169,  168,  167,
      165,  164,  163,  162,  161,  160,  159,  157,  155,  154,
      153,  152,  150,  148,  146,  142,  126,  124,  109,  106,
       78,   77,   65,   63,   61,   60,   58,   50,   44,   41,
       33,   30,   28,   24,   19,   12,   11,    6,    5, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yycpp_flex_debug;
int yycpp_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yycpptext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*************** Includes and Defines *****************************/

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/unescape_string.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER cpp_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "cpp_parser.h"
#include "tokens.h"

void set_line_no();









#line 47 "scanner.l"
void cpp_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0); // this is INITIAL, hopefully
}
#line 1278 "lex.yy.cpp"

#define INITIAL 0
#define COMMENT1 1
#define COMMENT2 2
#define GCC_ATTRIBUTE 3
#define MSC_ASM1 4
#define MSC_ASM2 5
#define MSC_DECLSPEC 6
#define MSC_PRAGMA 7
#define MSC_ANNOTATION 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yycpplex_destroy (void );

int yycppget_debug (void );

void yycppset_debug (int debug_flag  );

YY_EXTRA_TYPE yycppget_extra (void );

void yycppset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yycppget_in (void );

void yycppset_in  (FILE * in_str  );

FILE *yycppget_out (void );

void yycppset_out  (FILE * out_str  );

int yycppget_leng (void );

char *yycppget_text (void );

int yycppget_lineno (void );

void yycppset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yycppwrap (void );
#else
extern int yycppwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yycpptext, yycppleng, 1, yycppout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yycppin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yycppin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yycppin))==0 && ferror(yycppin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yycppin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yycpplex (void);

#define YY_DECL int yycpplex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yycpptext and yycppleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 88 "scanner.l"



#define loc() (PARSER.current_token().text=yycpptext,PARSER.set_location())
#define MSC_Keyword(x) (PARSER.mode==cpp_parsert::MSC?x:TOK_Identifier)


#line 1474 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yycppin )
			yycppin = stdin;

		if ( ! yycppout )
			yycppout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yycppensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yycpp_create_buffer(yycppin,YY_BUF_SIZE );
		}

		yycpp_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yycpptext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1105 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1690 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 95 "scanner.l"
{ BEGIN(COMMENT1); }	/* begin C comment state */
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 98 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "scanner.l"
{ yycpperror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 100 "scanner.l"
{ yycpperror("Unterminated comment"); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 101 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 102 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 103 "scanner.l"
{ } 
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 106 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 109 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 114 "scanner.l"
{ PARSER.parenthesis_counter--;
         if(PARSER.parenthesis_counter==0)
         BEGIN(INITIAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 117 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 118 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 121 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 123 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 124 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 125 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 126 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 127 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 128 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 130 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 131 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "scanner.l"
{ BEGIN(MSC_PRAGMA); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "scanner.l"
{ BEGIN(MSC_ASM2); loc(); return '{'; }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 139 "scanner.l"
{ loc();
                    PARSER.current_token().data=exprt(yycpptext);
                    BEGIN(INITIAL);
                    return TOK_StringL; }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 144 "scanner.l"
{ loc();
                  PARSER.current_token().data=exprt(yycpptext);
                  return TOK_StringL; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "scanner.l"
{ BEGIN(INITIAL); loc(); return '}'; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 152 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 162 "scanner.l"

	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "scanner.l"

	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 164 "scanner.l"

	YY_BREAK
case 40:
YY_RULE_SETUP
#line 166 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "scanner.l"
{ if(PARSER.mode==cpp_parsert::MSC)
                      {
                        BEGIN(MSC_ASM1);
                        return TOK_MSC_ASM;
                      }
                      else
                      {
                        loc();
                        return TOK_GCC_ASM;
                      }
                    }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CDECL); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "scanner.l"
{ BEGIN(MSC_DECLSPEC); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INTERFACE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INLINE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "scanner.l"
{ loc(); return MSC_Keyword(TOK_STDCALL); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "scanner.l"
{ loc(); return MSC_Keyword(TOK_FASTCALL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CLRCALL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT64); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR64); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "scanner.l"
{ loc(); return TOK_REAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "scanner.l"
{ loc(); return TOK_IMAG; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TRY); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_EXCEPT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_LEAVE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_FINALLY); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UUIDOF); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "scanner.l"
{ loc(); return TOK_BOOLEAN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "scanner.l"
{ loc(); return TOK_CATCH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "scanner.l"
{ loc(); return TOK_CLASS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "scanner.l"
{ loc(); return TOK_DELETE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "scanner.l"
{ loc(); return TOK_DECLTYPE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "scanner.l"
{ loc(); return TOK_ENUM; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "scanner.l"
{ loc(); return TOK_EXPLICIT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "scanner.l"
{ loc(); return TOK_FRIEND; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 243 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 244 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 245 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 246 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 247 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 248 "scanner.l"
{ loc(); return TOK_MUTABLE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 249 "scanner.l"
{ loc(); return TOK_NAMESPACE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 250 "scanner.l"
{ loc(); return TOK_NEW; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 251 "scanner.l"
{ loc(); return TOK_Ignore; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 252 "scanner.l"
{ loc(); return TOK_OPERATOR; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 253 "scanner.l"
{ loc(); return TOK_PRIVATE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 254 "scanner.l"
{ loc(); return TOK_PROTECTED; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 255 "scanner.l"
{ loc(); return TOK_PUBLIC; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 256 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 257 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 258 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 259 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 260 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 261 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 262 "scanner.l"
{ loc(); return TOK_STATIC_ASSERT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 263 "scanner.l"
{ loc(); return TOK_STRUCT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 264 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 265 "scanner.l"
{ loc(); return TOK_TEMPLATE; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 266 "scanner.l"
{ loc(); return TOK_THIS; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 267 "scanner.l"
{ loc(); return TOK_THROW; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 268 "scanner.l"
{ loc(); return TOK_TRY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 269 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 270 "scanner.l"
{ loc(); return TOK_TYPEID; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 271 "scanner.l"
{ loc(); return TOK_TYPENAME; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 272 "scanner.l"
{ loc(); return TOK_UNION; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 273 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 274 "scanner.l"
{ loc(); return TOK_USING; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 275 "scanner.l"
{ loc(); return TOK_VIRTUAL; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 276 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 277 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 278 "scanner.l"
{ loc(); return TOK_WCHAR_T; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 279 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 280 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK

/* a huge batch of MS extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 145:
YY_RULE_SETUP
#line 287 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 288 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 289 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 290 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 291 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 292 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 293 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 294 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 295 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 296 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 297 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 298 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 299 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 300 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 301 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 302 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 303 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 304 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 305 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 306 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 307 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 308 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 309 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 310 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 311 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 312 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 313 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 314 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TYPE_PREDICATE); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 316 "scanner.l"
{ loc();
                      return TOK_Identifier; // or TYPDEFname
                    }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 320 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 10);
                      return TOK_Constant;
                    }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 325 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 8);
                      return TOK_Constant;
                    }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 330 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 16);
                      return TOK_Constant;
                    }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 335 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_float_literal(yycpptext);
                      return TOK_Constant;
                    }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 341 "scanner.l"
{ 
                      loc();
                      PARSER.current_token().data=convert_character_literal(yycpptext, false);
                      return TOK_Constant;
                    }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 347 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_string_literal(yycpptext);
                      return TOK_StringL;
                    }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 353 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 354 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 355 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 357 "scanner.l"
{ set_line_no(); }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 358 "scanner.l"
{ /* ignore it */ }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 360 "scanner.l"

	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 362 "scanner.l"
{ yycpperror("unknown preprocessor directive"); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 364 "scanner.l"
{ }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 366 "scanner.l"
{ loc(); return '{'; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 367 "scanner.l"
{ loc(); return '}'; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 368 "scanner.l"
{ loc(); return '['; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 369 "scanner.l"
{ loc(); return ']'; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 370 "scanner.l"
{ loc(); return '.'; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 371 "scanner.l"
{ loc(); return '&'; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 372 "scanner.l"
{ loc(); return '*'; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 373 "scanner.l"
{ loc(); return '+'; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 374 "scanner.l"
{ loc(); return '-'; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 375 "scanner.l"
{ loc(); return '~'; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 376 "scanner.l"
{ loc(); return '!'; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 377 "scanner.l"
{ loc(); return '/'; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 378 "scanner.l"
{ loc(); return '%'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 379 "scanner.l"
{ loc(); return '<'; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 380 "scanner.l"
{ loc(); return '>'; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 381 "scanner.l"
{ loc(); return '^'; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 382 "scanner.l"
{ loc(); return '|'; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 383 "scanner.l"
{ loc(); return '?'; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 384 "scanner.l"
{ loc(); return ':'; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 385 "scanner.l"
{ loc(); return ';'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 386 "scanner.l"
{ loc(); return '='; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 388 "scanner.l"
{ loc(); return TOK_PmOp; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 389 "scanner.l"
{ loc(); return TOK_PmOp; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 390 "scanner.l"
{ loc(); return TOK_Scope; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 391 "scanner.l"
{ loc(); return TOK_ArrowOp; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 392 "scanner.l"
{ loc(); return TOK_IncOp; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 393 "scanner.l"
{ loc(); return TOK_IncOp; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 394 "scanner.l"
{ loc(); return TOK_ShiftOp; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 395 "scanner.l"
{ loc(); return TOK_ShiftOp; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 396 "scanner.l"
{ loc(); return TOK_RelOp; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 397 "scanner.l"
{ loc(); return TOK_RelOp; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 398 "scanner.l"
{ loc(); return TOK_EqualOp; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 399 "scanner.l"
{ loc(); return TOK_EqualOp; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 400 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 401 "scanner.l"
{ loc(); return TOK_LogOrOp; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 402 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 403 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 404 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 405 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 406 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 407 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 408 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 409 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 410 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 411 "scanner.l"
{ loc(); return TOK_AssignOp; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 412 "scanner.l"
{ loc(); return TOK_Ellipsis; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 414 "scanner.l"
{ yycpperror("unknown character"); }
	YY_BREAK

case 235:
YY_RULE_SETUP
#line 417 "scanner.l"
ECHO;
	YY_BREAK
#line 2800 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(GCC_ATTRIBUTE):
case YY_STATE_EOF(MSC_ASM1):
case YY_STATE_EOF(MSC_ASM2):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yycppin at a new source and called
			 * yycpplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yycppin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yycppwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yycpptext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yycpplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yycpprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yycpprestart(yycppin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yycpprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1105 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1105 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1104);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yycpprestart(yycppin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yycppwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yycpptext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yycpprestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yycppensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yycpp_create_buffer(yycppin,YY_BUF_SIZE );
	}

	yycpp_init_buffer(YY_CURRENT_BUFFER,input_file );
	yycpp_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yycpp_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yycpppop_buffer_state();
	 *		yycpppush_buffer_state(new_buffer);
     */
	yycppensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yycpp_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yycppwrap()) processing, but the only time this flag
	 * is looked at is after yycppwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yycpp_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yycppin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yycpp_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yycppalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yycpp_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yycpp_create_buffer()
 * 
 */
    void yycpp_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yycppfree((void *) b->yy_ch_buf  );

	yycppfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yycpprestart() or at EOF.
 */
    static void yycpp_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yycpp_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yycpp_init_buffer was _probably_
     * called from yycpprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yycpp_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yycpp_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yycppensure_buffer_stack();

	/* This block is copied from yycpp_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yycpp_switch_to_buffer. */
	yycpp_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yycpppop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yycpp_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yycpp_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yycppensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycppalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycpprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yycpp_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yycpp_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yycpplex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yycpp_scan_bytes() instead.
 */
YY_BUFFER_STATE yycpp_scan_string (yyconst char * yystr )
{
    
	return yycpp_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yycpplex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yycpp_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yycppalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yycpp_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yycpp_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yycpptext[yycppleng] = (yy_hold_char); \
		(yy_c_buf_p) = yycpptext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yycppleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yycppget_lineno  (void)
{
        
    return yycpplineno;
}

/** Get the input stream.
 * 
 */
FILE *yycppget_in  (void)
{
        return yycppin;
}

/** Get the output stream.
 * 
 */
FILE *yycppget_out  (void)
{
        return yycppout;
}

/** Get the length of the current token.
 * 
 */
int yycppget_leng  (void)
{
        return yycppleng;
}

/** Get the current token.
 * 
 */

char *yycppget_text  (void)
{
        return yycpptext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yycppset_lineno (int  line_number )
{
    
    yycpplineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yycpp_switch_to_buffer
 */
void yycppset_in (FILE *  in_str )
{
        yycppin = in_str ;
}

void yycppset_out (FILE *  out_str )
{
        yycppout = out_str ;
}

int yycppget_debug  (void)
{
        return yycpp_flex_debug;
}

void yycppset_debug (int  bdebug )
{
        yycpp_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yycpplex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yycppin = stdin;
    yycppout = stdout;
#else
    yycppin = (FILE *) 0;
    yycppout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yycpplex_init()
     */
    return 0;
}

/* yycpplex_destroy is for both reentrant and non-reentrant scanners. */
int yycpplex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yycpp_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yycpppop_buffer_state();
	}

	/* Destroy the stack itself. */
	yycppfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yycpplex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yycppalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yycpprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yycppfree (void * ptr )
{
	free( (char *) ptr );	/* see yycpprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 417 "scanner.l"



int yycppwrap() { return 1; }

void set_line_no()
{
  preprocessor_line(yycpptext, PARSER.line_no, PARSER.filename);
}

