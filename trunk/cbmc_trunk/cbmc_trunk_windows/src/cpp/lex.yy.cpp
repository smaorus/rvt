#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yycpp_create_buffer
#define yy_delete_buffer yycpp_delete_buffer
#define yy_flex_debug yycpp_flex_debug
#define yy_init_buffer yycpp_init_buffer
#define yy_flush_buffer yycpp_flush_buffer
#define yy_load_buffer_state yycpp_load_buffer_state
#define yy_switch_to_buffer yycpp_switch_to_buffer
#define yyin yycppin
#define yyleng yycppleng
#define yylex yycpplex
#define yylineno yycpplineno
#define yyout yycppout
#define yyrestart yycpprestart
#define yytext yycpptext
#define yywrap yycppwrap
#define yyalloc yycppalloc
#define yyrealloc yycpprealloc
#define yyfree yycppfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yycpprestart(yycppin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yycppleng;

extern FILE *yycppin, *yycppout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yycpptext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yycpprestart()), so that the user can continue scanning by
	 * just pointing yycppin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yycpptext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yycppleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yycppwrap()'s to do buffer switches
 * instead of setting up a fresh yycppin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yycpprestart (FILE *input_file  );
void yycpp_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yycpp_create_buffer (FILE *file,int size  );
void yycpp_delete_buffer (YY_BUFFER_STATE b  );
void yycpp_flush_buffer (YY_BUFFER_STATE b  );
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yycpppop_buffer_state (void );

static void yycppensure_buffer_stack (void );
static void yycpp_load_buffer_state (void );
static void yycpp_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yycpp_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yycpp_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yycpp_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yycpp_scan_bytes (yyconst char *bytes,int len  );

void *yycppalloc (yy_size_t  );
void *yycpprealloc (void *,yy_size_t  );
void yycppfree (void *  );

#define yy_new_buffer yycpp_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yycppensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yycpp_create_buffer(yycppin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yycppin = (FILE *) 0, *yycppout = (FILE *) 0;

typedef int yy_state_type;

extern int yycpplineno;

int yycpplineno = 1;

extern char *yycpptext;
#define yytext_ptr yycpptext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yycpptext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yycppleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 241
#define YY_END_OF_BUFFER 242
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1132] =
    {   0,
        0,    0,    4,    4,    9,    9,    0,    0,   29,   29,
       28,   28,    0,    0,    0,    0,    0,    0,  242,  240,
       37,   39,   38,  203,  240,  191,  179,  205,  198,  240,
      186,  187,  199,  200,  188,  201,  197,  204,  181,  180,
      211,  214,  206,  212,  207,  210,  179,  195,  196,  208,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      213,  209,  194,  202,    4,    6,    5,    5,    9,    8,
       12,  241,   11,   10,   29,   30,   28,   28,   27,   33,
       32,   31,   36,   35,   34,   26,   25,   37,   39,    0,

       38,  226,    0,  185,    0,    0,    0,  192,  193,    0,
        0,    0,  179,  231,  227,  236,    0,    0,  229,  219,
      232,  220,  233,  218,  215,    0,  183,    1,    7,  230,
      183,  181,    0,    0,  181,    0,    0,  180,  180,    0,
      217,  221,  223,  225,  224,  222,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  237,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      100,  179,  179,  179,  179,  179,  179,  179,  110,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  238,  228,    4,    2,    3,    9,
       29,   28,   28,   27,    0,    0,    0,  189,    0,    0,
        0,  184,    0,    0,  216,  239,    0,  183,    0,  183,
      182,    0,    0,    0,  181,    0,    0,    0,  180,  234,
      235,    0,    0,    0,    0,    0,    0,    0,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,   42,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  107,  179,  179,
      179,  112,  179,  179,  179,  116,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  136,  179,  179,  179,  179,  179,
      179,  179,  179,  179,    0,    0,    0,    0,    0,    0,
        0,  183,  182,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
       88,   89,  179,   91,  179,   93,  179,  179,  179,  179,
      179,  179,  179,  102,  103,  179,  179,  179,  179,  109,

      179,  113,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      133,  179,  179,  179,  179,  179,  179,  179,  144,  179,
      179,  179,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  182,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,  179,  179,  179,   41,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,   83,  179,  179,  179,  179,   78,  179,
      179,  179,   90,   92,   94,   95,  179,  179,  179,  179,

      179,  179,  179,  106,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  125,  179,  179,
      179,  179,  179,  179,  179,  135,  179,  179,  179,  179,
      140,  179,  142,  179,  179,  179,  148,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,   71,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,   46,  179,  179,  179,  179,  179,   98,  101,  179,
      105,  108,  111,  179,  179,  179,  179,  179,  179,  179,
      122,  179,  179,  124,  126,  127,  128,  130,  131,  179,
      179,  179,  138,  179,   68,  179,  179,  179,  179,    0,
        0,    0,   16,    0,    0,   23,   22,    0,    0,    0,
      179,  179,  179,   43,  179,  179,  179,   47,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,   72,   73,   74,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,   85,  179,  179,   75,   76,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,   52,
      179,  179,   97,  179,  114,  179,  179,  118,  179,  120,
      179,  179,  179,  179,  179,  179,  137,  179,  179,  143,
      179,  146,    0,    0,   17,    0,   21,    0,    0,    0,
       79,  179,  179,  179,  179,  179,  179,   84,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,   82,   53,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  171,  179,  179,  179,  179,  179,  179,
      179,   24,   81,  179,   64,  179,  179,   69,   87,   66,
      179,  179,   96,   99,  104,  179,  117,  119,  179,  123,

       58,  179,  132,  179,  139,  141,  145,    0,  190,    0,
        0,    0,    0,    0,  179,  179,  179,   63,  179,  179,
      179,  179,   86,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  169,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,   61,  179,  179,  179,   48,  115,  121,
      179,  179,    0,    0,    0,    0,    0,  179,  179,  179,
      179,  179,   62,  147,  179,  179,  152,  179,  179,  179,
      179,  179,  179,  179,   54,  179,  179,  179,  165,  179,
      179,  168,  179,  179,  179,  179,  179,  179,  177,  179,

      179,   60,   65,   77,   70,  179,  179,  179,    0,   19,
       13,    0,    0,  179,  179,   40,   44,   80,  179,  179,
      179,  179,  179,  179,  179,  179,   50,  179,   55,  179,
      179,  179,  179,  179,  179,  179,  179,  175,  179,  179,
      179,  179,  179,  179,  179,    0,   15,    0,  179,  179,
      179,  179,  179,  151,  179,  179,  179,  179,  179,  179,
      179,  164,  179,  179,  179,  179,  179,  179,  179,  179,
       57,   59,   67,  179,  134,    0,    0,  179,  179,   45,
       49,   56,  179,  179,  179,  179,  179,  179,  163,  179,
      167,  179,  179,  179,  179,  179,  179,  129,    0,    0,

      150,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  173,  174,  179,  179,    0,    0,  179,  153,  179,
      179,  179,  179,  179,  179,  179,   51,  179,  179,  179,
      179,  179,   18,    0,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  172,  179,  178,    0,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,    0,  179,  179,  179,  156,  179,  179,  159,  179,
      179,  179,  179,  179,  179,    0,  179,  179,  179,  179,
      179,  179,  179,  179,  166,  179,  179,    0,  179,  154,
      179,  157,  179,  179,  179,  179,  170,  179,    0,  179,

      179,  179,  179,  161,  179,  179,    0,  149,  179,  179,
      179,  179,  179,    0,  179,  179,  179,  179,  176,    0,
      179,  179,  160,  162,    0,  155,  158,    0,    0,   14,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   28,   30,   31,   32,   33,   34,
       35,   36,   37,    1,   38,   39,   40,   39,   41,   42,
       11,   11,   11,   11,   11,   43,   11,   11,   44,   45,
       11,   46,   47,   11,   48,   49,   11,   50,   11,   11,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   11,   65,   66,   67,   68,
       69,   70,   11,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    4,    1,    1,    5,    1,    1,    1,
        1,    5,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    1,    1,    1,    7,    7,    7,
        8,    6,    9,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,   10,    3,    7,    7,    7,    7,    8,
        6,    3,    3,    3,    3,    9,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,   10,
        1,   11,    1
    } ;

static yyconst flex_int16_t yy_base[1156] =
    {   0,
        0,    0,   81,   82, 1713, 1712,   85,   90, 1632, 1631,
       84,   87,   92,   94,   99,  108,   89,   93, 1712, 1717,
      114, 1717,  123, 1676,  103,  168,    0, 1675,  100, 1657,
     1717, 1717, 1673,  104, 1717,  112,  156,  114,  218,  275,
     1675, 1717,   99, 1671,  108, 1717,  131,  154, 1717, 1670,
      148,   78,   82,  153,   94,   91,  139, 1635,   97, 1634,
     1628,  144, 1631,  146, 1640,  160,  191,  104,  163,  172,
     1717,  176, 1717, 1717,    0, 1717, 1677, 1681,    0, 1717,
     1717, 1717, 1717, 1717,    0, 1717,    0,  248, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717,  268, 1717,  283,

      305, 1717,  206, 1717,  341, 1694,  417, 1717, 1693,  356,
      199,  226,    0, 1717, 1717, 1717,  239,  479, 1717, 1717,
     1717, 1717, 1717, 1678, 1717, 1673,  272, 1717, 1717, 1717,
      311,  112,  408,  432,  282,    0,  365,    0,  426,  375,
     1717, 1658, 1717, 1717, 1717, 1657,  228, 1639,  404, 1652,
      200, 1620, 1628, 1618, 1612, 1717, 1616,  517, 1625, 1623,
     1614, 1614, 1607, 1610, 1618,  192, 1621, 1620, 1607,  261,
     1600, 1601, 1598,  206, 1602, 1599, 1605, 1595,    0,  251,
     1599, 1593, 1598, 1588, 1592, 1596, 1601,  257, 1603,  221,
     1590,  258,  273, 1594, 1590,  272, 1578, 1585,  188, 1590,

     1582,  276, 1589, 1587, 1717, 1717,    0, 1717, 1717,    0,
        0,    0,  401, 1717,  486,    0, 1647, 1717,  494,  328,
      134, 1717,  572,    0, 1717, 1717,  535, 1717,  579,  411,
      568,  322, 1624, 1621, 1717,  332, 1622, 1619, 1717, 1717,
     1717, 1590, 1580, 1573, 1583,  290, 1567, 1576, 1572, 1593,
      349,  341, 1577, 1559,  361, 1579,  412, 1574, 1564,  302,
     1572,  167,  423, 1557,  422, 1601, 1569, 1570, 1561,    0,
     1557, 1559, 1568, 1563, 1564, 1550, 1548,  393, 1553, 1562,
     1557, 1559, 1555, 1547, 1547, 1552, 1555,    0, 1550, 1540,
     1544,    0, 1545, 1550, 1545,    0, 1544, 1537, 1531, 1526,

     1527, 1533, 1534, 1524, 1522, 1524, 1526, 1533, 1519, 1517,
     1517, 1519, 1516,  429,    0, 1527, 1517, 1521, 1516, 1510,
     1523, 1525, 1524, 1513,  612,  656,  410,  423,  647,  704,
      620,  485,  645,  513, 1548, 1547,  487, 1503, 1506, 1500,
     1513, 1498, 1500, 1511, 1499, 1522, 1503, 1499, 1492, 1504,
     1492,  477, 1504,  468, 1489, 1492, 1490, 1487, 1485, 1501,
     1499,  501, 1499, 1497, 1481, 1495, 1479,  302, 1487, 1489,
     1483, 1468, 1475, 1480, 1485, 1476, 1514, 1482, 1473, 1474,
        0,    0, 1472,    0, 1473,    0, 1463, 1461, 1469, 1459,
     1457, 1457, 1463,    0,    0, 1464, 1456, 1453, 1457,    0,

     1456,    0, 1466, 1450, 1448, 1450, 1463, 1462, 1457, 1452,
     1443, 1443, 1442, 1439, 1451, 1441, 1445, 1450, 1449, 1440,
        0, 1449, 1428,  554, 1435, 1440, 1439, 1426,    0, 1426,
     1427, 1437,  336,    0,  764,  527,  376,    0,  543, 1471,
     1468, 1717, 1425,  500, 1419, 1428, 1420, 1424, 1433, 1417,
     1429, 1717, 1420, 1441, 1422, 1428, 1411, 1423, 1422, 1409,
     1406, 1411, 1416, 1415, 1401, 1417, 1416, 1413, 1415,  552,
     1407, 1404,  629,  740, 1392, 1406, 1403,  470, 1398, 1390,
     1394, 1403, 1388,    0, 1399, 1399, 1384, 1400,    0, 1389,
     1382, 1385,    0,    0,    0,    0, 1384, 1373, 1384, 1389,

     1388, 1389, 1378,    0, 1386, 1384, 1377, 1372, 1367, 1367,
     1366, 1365, 1379, 1378, 1362, 1370, 1365,    0, 1373, 1370,
     1372, 1356, 1365, 1371, 1367,    0, 1365, 1365, 1367, 1361,
        0, 1353,    0, 1364, 1355, 1363,    0,  750,  278, 1387,
     1345, 1343, 1354, 1355, 1353, 1338, 1350, 1336, 1340, 1347,
     1346, 1356, 1336, 1348, 1338, 1335, 1344, 1333, 1325, 1325,
     1326, 1327, 1336, 1327, 1319, 1331,  745, 1313, 1320, 1333,
     1319, 1357, 1360, 1357,    0, 1312, 1325, 1325,  513, 1320,
      481, 1311, 1309, 1317,  555, 1308, 1319, 1314, 1300, 1305,
     1346, 1343, 1314, 1297, 1307, 1310, 1307, 1295, 1294, 1293,

     1288,    0, 1290, 1299, 1284, 1287, 1283,    0,    0, 1291,
        0,    0,    0, 1294, 1297, 1281, 1280, 1281, 1289, 1275,
        0, 1287, 1288,    0,    0,    0, 1290,    0,    0, 1271,
     1288, 1281,    0, 1274,    0, 1280, 1273, 1272, 1264,  623,
     1269, 1262, 1717, 1276, 1267, 1717, 1717, 1276, 1256, 1275,
     1252, 1287, 1258,    0, 1269, 1259, 1264,    0, 1253, 1249,
     1249, 1264, 1253, 1294, 1253, 1244, 1246, 1250, 1244, 1241,
     1239, 1246, 1245, 1235, 1252, 1246,    0,    0,    0, 1244,
     1232, 1231, 1246, 1233, 1234, 1229, 1224, 1224,  597, 1235,
     1239, 1227, 1229, 1226,    0, 1217, 1234,    0,    0, 1234,

     1224, 1228, 1220, 1229, 1223, 1222, 1211, 1217, 1220,    0,
     1219, 1218,    0, 1204,    0, 1218, 1207,    0, 1203,    0,
     1213, 1201, 1198, 1214, 1209, 1202,    0, 1207, 1207,    0,
     1205,    0, 1261, 1207, 1717, 1202, 1717, 1204, 1204, 1203,
        0, 1212, 1196, 1182, 1189, 1177, 1193,    0, 1188, 1185,
     1172, 1224, 1180, 1175, 1176, 1177, 1171, 1179, 1182, 1170,
     1168, 1184,    0, 1183, 1181, 1163, 1175, 1162, 1158, 1172,
     1146, 1151, 1155,    0, 1136, 1146, 1115, 1090, 1083, 1075,
     1069,    0,    0, 1080, 1077, 1065, 1043,  105,    0,    0,
      108,  198,    0,    0,    0,  302,    0,    0,  317,    0,

        0,  320,    0,  354,    0,    0,    0,  464, 1717,  460,
      498,  518,  548,  549,  572,  573,  556,    0,  576,  575,
      583,  588,    0,  627,  594,  598,  588,  611,  605,  594,
      606,  605,  617,  631,  637,  642,  630,  647,  631,  644,
      643,  628,    0,  636,  643,  664,  661,  657,  656,  665,
      658,  663,  682,    0,  672,  684,  680,    0,    0,    0,
      669,  689,  701,  677,  690,  677,  686,  711,  700,  698,
      704,  701,    0,    0,  706,  710,    0,  716,  712,  721,
      731,  728,  733,  730,    0,  748,  753,  747,    0,  746,
      765,    0,  761,  754,  753,  759,  767,  767,    0,  773,

      774,  776,    0,    0,    0,  777,  773,  778,  762, 1717,
     1717,  776,  768,  769,  776,    0,  785,    0,  786,  774,
      775,  780,  776,  790,  788,  792,    0,  785,    0,  792,
      790,  779,  780,  798,  784,  785,  801,    0,  803,  801,
      805,  806,  807,  792,  798,  794, 1717,  793,  798,  797,
      814,  815,  811,    0,  793,  797,  808,  815,  810,  805,
      805,    0,  815,  820,  823,  812,  827,  812,  810,  820,
        0,    0,    0,  814,    0,  824,  833,  824,  831,    0,
        0,    0,  832,  838,  839,  823,  841,  824,    0,  841,
        0,  839,  837,  823,  830,  847,  848,    0,  837,  833,

        0,  851,  837,  853,  854,  841,  856,  844,  851,  863,
      855,    0,    0,  854,  849,  860,  859,  865,    0,  853,
      857,  855,  859,  869,  859,  871,    0,  872,  875,  876,
      861,  864, 1717,  868,  883,  867,  872,  869,  875,  872,
      872,  875,  893,  883,    0,  890,    0,  883,  886,  889,
      882,  877,  892,  885,  880,  886,  902,  888,  889,  907,
      909,  910,  897,  905,  895,    0,  907,  897,    0,  900,
      899,  902,  905,  903,  918,  921,  920,  911,  909,  913,
      911,  909,  915,  911,    0,  914,  921,  915,  933,    0,
      916,    0,  917,  934,  922,  936,    0,  939,  923,  931,

      940,  941,  927,    0,  928,  930,  932,    0,  931,  932,
      937,  938,  936,  945,  941,  942,  941,  942,    0,  957,
      944,  945,    0,    0,  943,    0,    0,  945,  959, 1717,
     1717, 1019, 1030, 1041, 1052, 1063, 1074, 1085, 1096, 1107,
     1118, 1127, 1136, 1147, 1158, 1169, 1179, 1188, 1194, 1198,
     1201, 1204, 1207, 1211, 1220
    } ;

static yyconst flex_int16_t yy_def[1156] =
    {   0,
     1131,    1, 1132, 1132, 1133, 1133, 1134, 1134, 1135, 1135,
     1136, 1136, 1137, 1137, 1138, 1138, 1139, 1139, 1131, 1131,
     1131, 1131, 1131, 1131, 1140, 1141, 1142, 1131, 1131, 1143,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1142, 1131, 1131, 1131,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1131, 1131, 1131, 1131, 1144, 1131, 1131, 1131, 1145, 1131,
     1131, 1131, 1131, 1131, 1146, 1131, 1147, 1147, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,

     1131, 1131, 1140, 1131, 1131, 1141, 1141, 1131, 1141, 1148,
     1141, 1141, 1142, 1131, 1131, 1131, 1143, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1149, 1131, 1131, 1131,
     1149,   39, 1131, 1131, 1131, 1150, 1131,   40, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1140, 1143, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1131, 1131, 1144, 1131, 1131, 1145,
     1146, 1147, 1147, 1131, 1140, 1151, 1148, 1131, 1148, 1141,
     1141, 1131, 1143, 1152, 1131, 1131, 1131, 1131, 1131, 1153,
     1150, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1140, 1140, 1141, 1141, 1143, 1143,
     1131, 1154, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1140,  326, 1141, 1141, 1143,  330, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141, 1141, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1155, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1155, 1131, 1131,
     1131, 1131, 1131, 1131, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1131, 1131, 1131, 1131, 1131, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1131, 1131,
     1131, 1131, 1131, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1131, 1131, 1131, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1131, 1131, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1131, 1131,

     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1131, 1131, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1131, 1131, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1131, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1131, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1131, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1131, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1131, 1142,

     1142, 1142, 1142, 1142, 1142, 1142, 1131, 1142, 1142, 1142,
     1142, 1142, 1142, 1131, 1142, 1142, 1142, 1142, 1142, 1131,
     1142, 1142, 1142, 1142, 1131, 1142, 1142, 1131, 1131, 1131,
        0, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131
    } ;

static yyconst flex_int16_t yy_nxt[1801] =
    {   0,
       20,   21,   22,   23,   23,   23,   21,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   42,   43,   44,   45,   46,   27,   27,   27,
       27,   27,   47,   27,   27,   27,   27,   27,   27,   27,
       48,   20,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   27,   59,   27,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   27,   27,   27,   71,
       72,   73,   74,   76,   76,   88,   82,   82,   88,   82,
       88,   82,   82,   88,   82,   82,   82,   77,   77,   83,

       84,   82,   78,   78,   83,   84,   91,   92,   91,   92,
       82,  104,  115,   94,   95,   98,   99,  100,  100,  100,
       98,  120,   94,   95,  100,   99,  101,  101,  101,  100,
      128,  122,  142,  143,  116,  129,  108,   82,  121,  147,
       82,   97,  145,  146,  148,   97,  123,  124,  130,  162,
      164,  163,  165,  170,  105,  149,  172,  179,  173,  856,
      149, 1131,  171,   89,  180,   82,   89,  174,   82,  107,
      108,  199,  125,  857,  107,  200,  126,  109,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  157, 1131,  328,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  183,

      150,  108,  158,  184,  175,  159,  160,  176,  166,  177,
      205,  161,  185,  151,  104,  167,  188,  186,  168,  189,
      152,  169,  191,  192,  153,  154,  201,  155,  108,  203,
      369,  202,  193,  111,  204,  194,  104,  112,  131,  370,
      132,  132,  132,  132,  132,  132,  132,  133,  133,  213,
      195,  317,  222,  196,  213,  858,  206,  105,  134,  318,
      135,  197,  220,  274,  275,  135,  243,  136,  198,   98,
       99,  100,  100,  100,   98,  285,  244,  134,  286,  105,
      108,  137,  303,  135,  100,   99,  100,  100,  100,  100,
      118,  135,  304,  305,  136,  131,  221,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  100,   99,  101,  101,
      101,  100,  227,  228,  228,  134,  291,  139,  279,  307,
      300,  280,  139,  292,  135,  301,  281,  214,  309,  135,
      108,  227,  228,  640,  134,  313,  308,  228,  140,  321,
      139,  322,  314,  310,  104,  137,  335,  135,  139,  103,
      235,  227,  228,  228,  103,  135,  336,  479,  218,  341,
      239,  859,  342,  215,  215,  215,  215,  215,  215,  215,
      227,  228,  366,  480,  367,  860,  228,  103,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  105,  232,  222,
      233,  861,  103,  234,  235,  327,  103,  103,  236,  350,

      237,  103,  213,  238,  239,  149,  351,  213,  103,  352,
      149,  103,  108,  103,  347,  103,  355,  216,  107,  108,
      348,  349,  862,  107,  356,  108,  357,  118,  131,  358,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  134,  229,
      150,  229,  228,  228,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  151,  388,  389,  809,  134,  139,  435,
      152,  228,  360,  139,  153,  154,  228,  155,  361,  362,
      214,  375,  111,  363,  436,  371,  112,  117,  422,  140,
      376,  139,  117,  372,  104,  591,  218,  423,  592,  139,

      373,  223,  223,  223,  223,  223,  223,  223,  325,  325,
      325,  325,  325,  325,  325,  117,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  463,  228,  228,  443,  108,
      117,  444,  863,  445,  117,  117,  439,  105,  440,  117,
      464,  441,  442,  460,  461,  228,  117,  686,  687,  117,
      228,  117,  331,  117,  331,  224,  250,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  472,  540,  542,  864,
      543,  442,  251,  473,  252,  253,  254,  255,  683,  256,
      257,  684,  258,  865,  259,  222,  260,  261,  262,  263,
      264,  265,  266,  539,  329,  329,  329,  329,  329,  329,

      329,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      333,  568,  527,  866,  691,  333,  867,  528,  692,  569,
      104,  529,  530,  118,  733,  108,  868,  869,  870,  733,
      871,  334,  858,  333,  433,  433,  433,  433,  433,  433,
      433,  333,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  872,  572,  873,  573,  774,  874,  574,  575,  875,
      222,  876,  775,  105,  104,  877,  878,  879,  880,  437,
      437,  437,  437,  437,  437,  437,  881,  882,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  333,  576,  883,
      884,  885,  333,  434,  434,  434,  434,  434,  118,  886,

      887,  888,  889,  890,  891,  892,  893,  105,  334,  894,
      333,  434,  434,  434,  434,  434,  434,  222,  333,  895,
      897,  896,  898,  899,  900,  901,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  902,  903,  904,  905,  906,
      907,  438,  438,  438,  438,  438,  908,  909,  910,  911,
      912,  538,  108,  913,  916,  118,  538,  917,  918,  438,
      438,  438,  438,  438,  438,  538,  108,  914,  919,  920,
      538,  921,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  922,  923,  915,  924,  925,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  577,  578,  579,  580,  581,

      666,  926,  667,  582,  927,  668,  928,  929,  930,  583,
      584,  585,  669,  586,  587,  931,  932,  670,  671,  672,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  111,
      942,  943,  944,  945,  946,  947,  948,  949,  950,  951,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  968,  969,  970,  971,
      972,  973,  974,  975,  976,  977,  978,  979,  980,  981,
      982,  983,  984,  985,  986,  987,  988,  989,  990,  991,
      992,  993,  994,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,

     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022,
     1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
     1053, 1052, 1054, 1056, 1055, 1057, 1058, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,

     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,  103,  855,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  113,
      854,  853,  113,  113,  113,  113,  117,  852,  117,  851,
      117,  117,  117,  117,  117,  117,  117,  207,  850,  207,
      207,  849,  207,  207,  207,  207,  207,  207,  210,  848,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  212,
      847,  212,  212,  212,  212,  212,  212,  212,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  127,

      846,  127,  127,  231,  231,  231,  326,  326,  326,  330,
      330,  330,  230,  845,  844,  230,  332,  843,  842,  332,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  841,  840,  839,  838,  837,  836,  835,  834,  833,
      832,  831,  830,  829,  828,  827,  826,  825,  824,  823,
      822,  821,  820,  819,  818,  817,  816,  815,  814,  813,
      812,  811,  810,  809,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
      791,  790,  789,  788,  787,  786,  785,  784,  783,  782,
      781,  780,  779,  778,  777,  776,  773,  772,  771,  770,

      769,  768,  767,  766,  765,  764,  763,  762,  761,  760,
      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  747,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  696,  695,  694,  693,  690,  689,  688,  685,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,

      602,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  442,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  590,  589,  588,  571,  570,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  541,  442,  442,  537,  536,  535,  534,

      533,  532,  531,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  478,
      477,  476,  475,  474,  471,  470,  469,  468,  467,  466,
      465,  462,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  239,  235,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,

      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      374,  368,  365,  364,  359,  354,  353,  346,  345,  344,
      343,  340,  339,  338,  337,  239,  239,  235,  235,  218,
      324,  323,  320,  319,  316,  315,  312,  311,  306,  302,
      299,  298,  297,  296,  295,  294,  293,  290,  289,  288,
      287,  284,  283,  282,  278,  277,  276,  273,  272,  271,
      270,  269,  268,  267,  249,  248,  247,  246,  245,  242,
      118,  241,  240,  226,  225,  108,  108,  209,  208,  190,

      187,  182,  181,  178,  156,  144,  141,  119,  118,  114,
      102, 1131,   86,   86,   80,   80,   19, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131

    } ;

static yyconst flex_int16_t yy_chk[1801] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,   11,   11,    7,   12,   12,
       11,   17,    8,   12,   13,   18,   14,    3,    4,    7,

        7,   15,    3,    4,    8,    8,   13,   13,   14,   14,
       16,   25,   29,   15,   15,   21,   21,   21,   21,   21,
       21,   34,   16,   16,   23,   23,   23,   23,   23,   23,
       38,   36,   43,   43,   29,   38,  221,   11,   34,   47,
       12,   17,   45,   45,   47,   18,   36,   36,   38,   52,
       53,   52,   53,   55,   25,   48,   56,   59,   56,  788,
       48,  132,   55,   11,   59,   11,   12,   56,   12,   26,
       26,   68,   37,  791,   26,   68,   37,   26,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   51,  132,  221,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   62,

       48,  111,   51,   62,   57,   51,   51,   57,   54,   57,
       72,   51,   62,   48,  103,   54,   64,   62,   54,   64,
       48,   54,   66,   66,   48,   48,   69,   48,  112,   70,
      262,   69,   66,   26,   70,   66,  147,   26,   39,  262,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   88,
       67,  199,  117,   67,   88,  792,   72,  103,   39,  199,
       39,   67,  111,  166,  166,   39,  151,   39,   67,   98,
       98,   98,   98,   98,   98,  174,  151,   39,  174,  147,
      539,   39,  190,   39,  100,  100,  100,  100,  100,  100,
      117,   39,  190,  190,   39,   40,  112,   40,   40,   40,

       40,   40,   40,   40,   40,   40,  101,  101,  101,  101,
      101,  101,  127,  127,  127,   40,  180,   40,  170,  192,
      188,  170,   40,  180,  135,  188,  170,   88,  193,  135,
      220,  127,  127,  539,   40,  196,  192,  127,   40,  202,
       40,  202,  196,  193,  433,  135,  232,  135,   40,  105,
      232,  131,  131,  131,  105,  135,  236,  368,  110,  246,
      236,  796,  246,  105,  105,  105,  105,  105,  105,  105,
      131,  131,  260,  368,  260,  799,  131,  105,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  433,  137,  437,
      137,  802,  105,  137,  137,  220,  105,  105,  140,  252,

      140,  105,  213,  140,  140,  149,  252,  213,  105,  252,
      149,  105,  327,  105,  251,  105,  255,  105,  107,  107,
      251,  251,  804,  107,  255,  328,  255,  437,  133,  255,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  133,  134,
      149,  134,  230,  230,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  149,  278,  278,  808,  133,  139,  327,
      149,  230,  257,  139,  149,  149,  230,  149,  257,  257,
      213,  265,  107,  257,  328,  263,  107,  118,  314,  139,
      265,  139,  118,  263,  215,  478,  219,  314,  478,  139,

      263,  118,  118,  118,  118,  118,  118,  118,  215,  215,
      215,  215,  215,  215,  215,  118,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  354,  332,  332,  337,  436,
      118,  337,  810,  337,  118,  118,  334,  215,  334,  118,
      354,  334,  334,  352,  352,  332,  118,  581,  581,  118,
      332,  118,  227,  118,  227,  118,  158,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  362,  439,  444,  811,
      444,  439,  158,  362,  158,  158,  158,  158,  579,  158,
      158,  579,  158,  812,  158,  223,  158,  158,  158,  158,
      158,  158,  158,  436,  223,  223,  223,  223,  223,  223,

      223,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      231,  470,  424,  813,  585,  231,  814,  424,  585,  470,
      325,  424,  424,  223,  640,  640,  815,  816,  817,  640,
      819,  231,  820,  231,  325,  325,  325,  325,  325,  325,
      325,  231,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  821,  473,  822,  473,  689,  824,  473,  473,  825,
      329,  826,  689,  325,  326,  827,  828,  829,  830,  329,
      329,  329,  329,  329,  329,  329,  831,  832,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  333,  473,  833,
      834,  835,  333,  326,  326,  326,  326,  326,  329,  836,

      837,  838,  839,  840,  841,  842,  844,  326,  333,  845,
      333,  326,  326,  326,  326,  326,  326,  330,  333,  846,
      847,  846,  848,  849,  850,  851,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  852,  853,  855,  856,  857,
      861,  330,  330,  330,  330,  330,  862,  863,  864,  865,
      866,  538,  538,  867,  869,  330,  538,  870,  871,  330,
      330,  330,  330,  330,  330,  435,  435,  868,  872,  875,
      435,  876,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  878,  879,  868,  880,  881,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  474,  474,  474,  474,  474,

      567,  882,  567,  474,  883,  567,  884,  886,  887,  474,
      474,  474,  567,  474,  474,  888,  890,  567,  567,  567,
      891,  893,  894,  895,  896,  897,  898,  900,  901,  435,
      902,  906,  907,  908,  909,  912,  913,  914,  915,  917,
      919,  920,  921,  922,  923,  924,  925,  926,  928,  930,
      931,  932,  933,  934,  935,  936,  937,  939,  940,  941,
      942,  943,  944,  945,  946,  948,  949,  950,  951,  952,
      953,  955,  956,  957,  958,  959,  960,  961,  963,  964,
      965,  966,  967,  968,  969,  970,  974,  976,  977,  978,
      979,  983,  984,  985,  986,  987,  988,  990,  992,  993,

      994,  995,  996,  997,  999, 1000, 1002, 1003, 1004, 1005,
     1004, 1005, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014,
     1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037,
     1038, 1037, 1039, 1040, 1039, 1041, 1042, 1043, 1044, 1046,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091,
     1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103,

     1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1120, 1121, 1122, 1125, 1128, 1129, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1140,  787, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142,
      786,  785, 1142, 1142, 1142, 1142, 1143,  784, 1143,  781,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144,  780, 1144,
     1144,  779, 1144, 1144, 1144, 1144, 1144, 1144, 1145,  778,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1147,
      777, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1149,

      776, 1149, 1149, 1150, 1150, 1150, 1151, 1151, 1151, 1152,
     1152, 1152, 1153,  775,  773, 1153, 1154,  772,  771, 1154,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155,  770,  769,  768,  767,  766,  765,  764,  762,  761,
      760,  759,  758,  757,  756,  755,  754,  753,  752,  751,
      750,  749,  747,  746,  745,  744,  743,  742,  740,  739,
      738,  736,  734,  733,  731,  729,  728,  726,  725,  724,
      723,  722,  721,  719,  717,  716,  714,  712,  711,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  697,
      696,  694,  693,  692,  691,  690,  688,  687,  686,  685,

      684,  683,  682,  681,  680,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  657,  656,  655,  653,  652,  651,  650,
      649,  648,  645,  644,  642,  641,  639,  638,  637,  636,
      634,  632,  631,  630,  627,  623,  622,  620,  619,  618,
      617,  616,  615,  614,  610,  607,  606,  605,  604,  603,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  584,  583,  582,  580,
      578,  577,  576,  574,  573,  572,  571,  570,  569,  568,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,

      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  536,  535,  534,
      532,  530,  529,  528,  527,  525,  524,  523,  522,  521,
      520,  519,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  503,  502,  501,  500,  499,
      498,  497,  492,  491,  490,  488,  487,  486,  485,  483,
      482,  481,  480,  479,  477,  476,  475,  472,  471,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  451,  450,  449,  448,
      447,  446,  445,  443,  441,  440,  432,  431,  430,  428,

      427,  426,  425,  423,  422,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  401,  399,  398,  397,  396,  393,  392,
      391,  390,  389,  388,  387,  385,  383,  380,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  367,
      366,  365,  364,  363,  361,  360,  359,  358,  357,  356,
      355,  353,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  336,  335,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,

      300,  299,  298,  297,  295,  294,  293,  291,  290,  289,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  277,
      276,  275,  274,  273,  272,  271,  269,  268,  267,  266,
      264,  261,  259,  258,  256,  254,  253,  250,  249,  248,
      247,  245,  244,  243,  242,  238,  237,  234,  233,  217,
      204,  203,  201,  200,  198,  197,  195,  194,  191,  189,
      187,  186,  185,  184,  183,  182,  181,  178,  177,  176,
      175,  173,  172,  171,  169,  168,  167,  165,  164,  163,
      162,  161,  160,  159,  157,  155,  154,  153,  152,  150,
      148,  146,  142,  126,  124,  109,  106,   78,   77,   65,

       63,   61,   60,   58,   50,   44,   41,   33,   30,   28,
       24,   19,   10,    9,    6,    5, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yycpp_flex_debug;
int yycpp_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yycpptext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*************** Includes and Defines *****************************/

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/unescape_string.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER cpp_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "cpp_parser.h"
#include "tokens.h"

void set_line_no();









#line 47 "scanner.l"
void cpp_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0); // this is INITIAL, hopefully
}
#line 1293 "lex.yy.cpp"

#define INITIAL 0
#define COMMENT1 1
#define COMMENT2 2
#define GCC_ATTRIBUTE 3
#define ASM_BLOCK 4
#define MSC_ASM 5
#define MSC_DECLSPEC 6
#define MSC_PRAGMA 7
#define MSC_ANNOTATION 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yycpplex_destroy (void );

int yycppget_debug (void );

void yycppset_debug (int debug_flag  );

YY_EXTRA_TYPE yycppget_extra (void );

void yycppset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yycppget_in (void );

void yycppset_in  (FILE * in_str  );

FILE *yycppget_out (void );

void yycppset_out  (FILE * out_str  );

int yycppget_leng (void );

char *yycppget_text (void );

int yycppget_lineno (void );

void yycppset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yycppwrap (void );
#else
extern int yycppwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yycpptext, yycppleng, 1, yycppout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yycppin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yycppin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yycppin))==0 && ferror(yycppin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yycppin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yycpplex (void);

#define YY_DECL int yycpplex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yycpptext and yycppleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 88 "scanner.l"



#define loc() (PARSER.current_token().text=yycpptext,PARSER.set_location())
#define MSC_Keyword(x) (PARSER.mode==cpp_parsert::MSC?x:TOK_IDENTIFIER)


#line 1489 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yycppin )
			yycppin = stdin;

		if ( ! yycppout )
			yycppout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yycppensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yycpp_create_buffer(yycppin,YY_BUF_SIZE );
		}

		yycpp_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yycpptext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1132 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1717 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 95 "scanner.l"
{ BEGIN(COMMENT1); }	/* begin C comment state */
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 98 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "scanner.l"
{ yycpperror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 100 "scanner.l"
{ yycpperror("Unterminated comment"); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 101 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 102 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 103 "scanner.l"
{ } 
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 106 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 109 "scanner.l"
{ BEGIN(INITIAL); }	/* end comment state, back to INITIAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 114 "scanner.l"
{ PARSER.parenthesis_counter--;
         if(PARSER.parenthesis_counter==0)
         BEGIN(INITIAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 117 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 118 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 121 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 123 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 124 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 125 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 126 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 127 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 128 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 130 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 131 "scanner.l"
{ BEGIN(MSC_ANNOTATION); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "scanner.l"
{ BEGIN(MSC_PRAGMA); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "scanner.l"
{ loc();
                    PARSER.current_token().data=exprt(yycpptext);
                    BEGIN(INITIAL);
                    return TOK_ASM_STRING; }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 144 "scanner.l"
{ loc();
                  PARSER.current_token().data=exprt(yycpptext);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(INITIAL); loc(); return '}'; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 150 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 153 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 156 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(INITIAL); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 163 "scanner.l"

	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "scanner.l"

	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 165 "scanner.l"

	YY_BREAK
case 40:
YY_RULE_SETUP
#line 167 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "scanner.l"
{ if(PARSER.mode==cpp_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 183 "scanner.l"
{ if(PARSER.mode==cpp_parsert::GCC ||
                     PARSER.mode==cpp_parsert::CW)
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                  else
                  {
                    loc();
                    return TOK_IDENTIFIER;
                  }
                }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 197 "scanner.l"
{ if(PARSER.mode==cpp_parsert::GCC ||
                     PARSER.mode==cpp_parsert::CW ||
                     PARSER.mode==cpp_parsert::ARM)
                  {
                    loc();
                    PARSER.asm_block_following=true;
                    return TOK_GCC_ASM;
                  }
                  else
                  {
                    loc();
                    return TOK_IDENTIFIER;
                  }
                }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 212 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 213 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 214 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CDECL); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 215 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 216 "scanner.l"
{ BEGIN(MSC_DECLSPEC); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 217 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 218 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 219 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 220 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 221 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 222 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 223 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INTERFACE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 224 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INLINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 225 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 226 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 227 "scanner.l"
{ /* ignroe */ }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 228 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 229 "scanner.l"
{ loc(); return MSC_Keyword(TOK_STDCALL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 230 "scanner.l"
{ loc(); return MSC_Keyword(TOK_FASTCALL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 231 "scanner.l"
{ loc(); return MSC_Keyword(TOK_CLRCALL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 232 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 233 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 234 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 235 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 236 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 237 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 238 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 239 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 240 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 241 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 242 "scanner.l"
{ loc(); return MSC_Keyword(TOK_INT64); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 243 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 244 "scanner.l"
{ loc(); return MSC_Keyword(TOK_PTR64); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 245 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 246 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 247 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 248 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 249 "scanner.l"
{ loc(); return TOK_REAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 250 "scanner.l"
{ loc(); return TOK_IMAG; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 251 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_TRY); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 252 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_EXCEPT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 253 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_LEAVE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 254 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_FINALLY); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 255 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UUIDOF); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 256 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 257 "scanner.l"
{ loc(); return TOK_BOOL; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 258 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 259 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 260 "scanner.l"
{ loc(); return TOK_CATCH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 261 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 262 "scanner.l"
{ loc(); return TOK_CLASS; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 263 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 264 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 265 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 266 "scanner.l"
{ loc(); return TOK_DELETE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 267 "scanner.l"
{ loc(); return TOK_DECLTYPE; } // C++11
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 268 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 269 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 270 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 271 "scanner.l"
{ loc(); return TOK_ENUM; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 272 "scanner.l"
{ loc(); return TOK_EXPLICIT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 273 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 274 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 275 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 276 "scanner.l"
{ loc(); return TOK_FRIEND; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 277 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 278 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 279 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 280 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 281 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 282 "scanner.l"
{ loc(); return TOK_MUTABLE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 283 "scanner.l"
{ loc(); return TOK_NAMESPACE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 284 "scanner.l"
{ loc(); return TOK_NEW; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 285 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 286 "scanner.l"
{ loc(); return TOK_NULLPTR; } // C++11
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 287 "scanner.l"
{ loc(); return TOK_OPERATOR; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 288 "scanner.l"
{ loc(); return TOK_PRIVATE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 289 "scanner.l"
{ loc(); return TOK_PROTECTED; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 290 "scanner.l"
{ loc(); return TOK_PUBLIC; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 291 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 292 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 293 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 294 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 295 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 296 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 297 "scanner.l"
{ loc(); return TOK_STATIC_ASSERT; } // C++11
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 298 "scanner.l"
{ loc(); return TOK_STRUCT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 299 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 300 "scanner.l"
{ loc(); return TOK_TEMPLATE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 301 "scanner.l"
{ loc(); return TOK_THIS; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 302 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; } // C++11
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 303 "scanner.l"
{ loc(); return TOK_THROW; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 304 "scanner.l"
{ loc(); return TOK_TRY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 305 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 306 "scanner.l"
{ loc(); return TOK_TYPEID; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 307 "scanner.l"
{ loc(); return TOK_TYPENAME; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 308 "scanner.l"
{ loc(); return TOK_UNION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 309 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 310 "scanner.l"
{ loc(); return TOK_USING; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 311 "scanner.l"
{ loc(); return TOK_VIRTUAL; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 312 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 313 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 314 "scanner.l"
{ // CodeWarrior has an option to
                      // enable/disable wchar_t
                      loc();
                      if(PARSER.mode==cpp_parsert::CW &&
                         !PARSER.recognize_wchar_t)
                        return TOK_IDENTIFIER;
                      else
                        return TOK_WCHAR_T;
                    }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 323 "scanner.l"
{ loc();
                      if(PARSER.mode==cpp_parsert::GCC)
                        return TOK_GCC_FLOAT128;
                      else
                        return TOK_IDENTIFIER;
                    }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 329 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 330 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 331 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK

/* a huge batch of MS extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 151:
YY_RULE_SETUP
#line 338 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 339 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 340 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 341 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 342 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 343 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 344 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 345 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 346 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 347 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 348 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 349 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 350 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 351 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 352 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 353 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 354 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 355 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 356 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 357 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 358 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 359 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 360 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 361 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 362 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 363 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 364 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 365 "scanner.l"
{ loc(); return MSC_Keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 367 "scanner.l"
{ loc();
                      return TOK_IDENTIFIER; // or TYPDEFname
                    }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 371 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 10);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 376 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 8);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 381 "scanner.l"
{ loc();
                      PARSER.current_token().data=convert_integer_literal(yycpptext, 16);
                      return TOK_INTEGER;
                    }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 386 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_float_literal(yycpptext);
                      return TOK_FLOATING;
                    }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 392 "scanner.l"
{ 
                      loc();
                      PARSER.current_token().data=convert_character_literal(yycpptext, false);
                      return TOK_CHARACTER;
                    }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 398 "scanner.l"
{
                      loc();
                      PARSER.current_token().data=convert_string_literal(yycpptext);
                      return TOK_STRING;
                    }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 404 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 405 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 406 "scanner.l"
{ loc(); return yycpptext[0]; }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 408 "scanner.l"
{ set_line_no(); }
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 409 "scanner.l"
{ /* ignore it */ }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 411 "scanner.l"

	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 413 "scanner.l"
{ yycpperror("unknown preprocessor directive"); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 415 "scanner.l"
{ }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 417 "scanner.l"
{ loc(); return '}'; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 418 "scanner.l"
{ loc(); return '['; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 419 "scanner.l"
{ loc(); return ']'; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 420 "scanner.l"
{ loc(); return '.'; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 421 "scanner.l"
{ loc(); return '&'; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 422 "scanner.l"
{ loc(); return '*'; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 423 "scanner.l"
{ loc(); return '+'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 424 "scanner.l"
{ loc(); return '-'; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 425 "scanner.l"
{ loc(); return '~'; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 426 "scanner.l"
{ loc(); return '!'; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 427 "scanner.l"
{ loc(); return '/'; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 428 "scanner.l"
{ loc(); return '%'; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 429 "scanner.l"
{ loc(); return '<'; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 430 "scanner.l"
{ loc(); return '>'; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 431 "scanner.l"
{ loc(); return '^'; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 432 "scanner.l"
{ loc(); return '|'; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 433 "scanner.l"
{ loc(); return '?'; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 434 "scanner.l"
{ loc(); return ':'; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 435 "scanner.l"
{ loc(); return '='; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 437 "scanner.l"
{ 
                      if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                      loc();
                      return '{';
                    }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 443 "scanner.l"
{ PARSER.asm_block_following=false;
                      loc();
                      return ';';
                    }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 448 "scanner.l"
{ loc(); return TOK_DOTPM; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 449 "scanner.l"
{ loc(); return TOK_ARROWPM; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 450 "scanner.l"
{ loc(); return TOK_SCOPE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 451 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 452 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 453 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 454 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 455 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 456 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 457 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 458 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 459 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 460 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 461 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 462 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 463 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 464 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 465 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 466 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 467 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 468 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 469 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 470 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 471 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 472 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 474 "scanner.l"
{ yycpperror("unknown character"); }
	YY_BREAK

case 241:
YY_RULE_SETUP
#line 477 "scanner.l"
ECHO;
	YY_BREAK
#line 2892 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(GCC_ATTRIBUTE):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yycppin at a new source and called
			 * yycpplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yycppin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yycppwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yycpptext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yycpplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yycpprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yycpprestart(yycppin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yycpprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1132 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1132 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1131);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yycpprestart(yycppin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yycppwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yycpptext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yycpprestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yycppensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yycpp_create_buffer(yycppin,YY_BUF_SIZE );
	}

	yycpp_init_buffer(YY_CURRENT_BUFFER,input_file );
	yycpp_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yycpp_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yycpppop_buffer_state();
	 *		yycpppush_buffer_state(new_buffer);
     */
	yycppensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yycpp_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yycppwrap()) processing, but the only time this flag
	 * is looked at is after yycppwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yycpp_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yycppin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yycpp_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yycppalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yycpp_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yycpp_create_buffer()
 * 
 */
    void yycpp_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yycppfree((void *) b->yy_ch_buf  );

	yycppfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yycpprestart() or at EOF.
 */
    static void yycpp_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yycpp_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yycpp_init_buffer was _probably_
     * called from yycpprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yycpp_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yycpp_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yycpppush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yycppensure_buffer_stack();

	/* This block is copied from yycpp_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yycpp_switch_to_buffer. */
	yycpp_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yycpppop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yycpp_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yycpp_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yycppensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycppalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yycpprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yycppensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yycpp_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yycppalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yycpp_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yycpplex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yycpp_scan_bytes() instead.
 */
YY_BUFFER_STATE yycpp_scan_string (yyconst char * yystr )
{
    
	return yycpp_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yycpplex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yycpp_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yycppalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yycpp_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yycpp_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yycpp_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yycpptext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yycpptext[yycppleng] = (yy_hold_char); \
		(yy_c_buf_p) = yycpptext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yycppleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yycppget_lineno  (void)
{
        
    return yycpplineno;
}

/** Get the input stream.
 * 
 */
FILE *yycppget_in  (void)
{
        return yycppin;
}

/** Get the output stream.
 * 
 */
FILE *yycppget_out  (void)
{
        return yycppout;
}

/** Get the length of the current token.
 * 
 */
int yycppget_leng  (void)
{
        return yycppleng;
}

/** Get the current token.
 * 
 */

char *yycppget_text  (void)
{
        return yycpptext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yycppset_lineno (int  line_number )
{
    
    yycpplineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yycpp_switch_to_buffer
 */
void yycppset_in (FILE *  in_str )
{
        yycppin = in_str ;
}

void yycppset_out (FILE *  out_str )
{
        yycppout = out_str ;
}

int yycppget_debug  (void)
{
        return yycpp_flex_debug;
}

void yycppset_debug (int  bdebug )
{
        yycpp_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yycpplex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yycppin = stdin;
    yycppout = stdout;
#else
    yycppin = (FILE *) 0;
    yycppout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yycpplex_init()
     */
    return 0;
}

/* yycpplex_destroy is for both reentrant and non-reentrant scanners. */
int yycpplex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yycpp_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yycpppop_buffer_state();
	}

	/* Destroy the stack itself. */
	yycppfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yycpplex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yycppalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yycpprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yycppfree (void * ptr )
{
	free( (char *) ptr );	/* see yycpprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 477 "scanner.l"



int yycppwrap() { return 1; }

void set_line_no()
{
  preprocessor_line(yycpptext, PARSER.line_no, PARSER.filename);
}

