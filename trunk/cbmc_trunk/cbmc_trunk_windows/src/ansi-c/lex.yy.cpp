#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyansi_c_create_buffer
#define yy_delete_buffer yyansi_c_delete_buffer
#define yy_flex_debug yyansi_c_flex_debug
#define yy_init_buffer yyansi_c_init_buffer
#define yy_flush_buffer yyansi_c_flush_buffer
#define yy_load_buffer_state yyansi_c_load_buffer_state
#define yy_switch_to_buffer yyansi_c_switch_to_buffer
#define yyin yyansi_cin
#define yyleng yyansi_cleng
#define yylex yyansi_clex
#define yylineno yyansi_clineno
#define yyout yyansi_cout
#define yyrestart yyansi_crestart
#define yytext yyansi_ctext
#define yywrap yyansi_cwrap
#define yyalloc yyansi_calloc
#define yyrealloc yyansi_crealloc
#define yyfree yyansi_cfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyansi_crestart(yyansi_cin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyansi_cleng;

extern FILE *yyansi_cin, *yyansi_cout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyansi_ctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyansi_crestart()), so that the user can continue scanning by
	 * just pointing yyansi_cin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyansi_ctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyansi_cleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyansi_cwrap()'s to do buffer switches
 * instead of setting up a fresh yyansi_cin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyansi_crestart (FILE *input_file  );
void yyansi_c_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyansi_c_create_buffer (FILE *file,int size  );
void yyansi_c_delete_buffer (YY_BUFFER_STATE b  );
void yyansi_c_flush_buffer (YY_BUFFER_STATE b  );
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyansi_cpop_buffer_state (void );

static void yyansi_censure_buffer_stack (void );
static void yyansi_c_load_buffer_state (void );
static void yyansi_c_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyansi_c_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyansi_c_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyansi_c_scan_bytes (yyconst char *bytes,int len  );

void *yyansi_calloc (yy_size_t  );
void *yyansi_crealloc (void *,yy_size_t  );
void yyansi_cfree (void *  );

#define yy_new_buffer yyansi_c_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyansi_cin = (FILE *) 0, *yyansi_cout = (FILE *) 0;

typedef int yy_state_type;

extern int yyansi_clineno;

int yyansi_clineno = 1;

extern char *yyansi_ctext;
#define yytext_ptr yyansi_ctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyansi_ctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyansi_cleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 336
#define YY_END_OF_BUFFER 337
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2770] =
    {   0,
        0,    0,    0,    0,    5,    5,   10,   10,  270,  270,
      269,  269,    0,    0,    0,    0,    0,    0,  287,  287,
      300,  300,  324,  324,    0,    0,  333,  333,  278,  278,
        0,    0,    0,    0,  337,    1,  265,   14,   13,   13,
      265,  265,   17,  235,  265,  265,  265,  265,  265,  265,
      265,  265,  244,  236,  265,  264,  265,  265,  265,  235,
      265,  265,  265,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  263,  265,    5,    7,    6,    6,   10,
        9,  270,  271,  269,  269,  336,  268,  274,  273,  272,

      277,  276,  275,  267,  266,  289,  287,  288,  288,  289,
      289,  304,  300,  301,  301,  302,  303,  304,  302,  302,
      302,  302,  302,  302,  327,  324,  325,  325,  327,  326,
      327,  327,  305,  306,  327,  327,  307,  327,  327,  327,
      327,  308,  327,  327,  327,  327,  327,  327,  327,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  327,
      331,  328,  329,  330,  335,  333,  334,  334,  332,  335,
      285,  278,  279,  279,  281,  285,  285,  285,  285,  280,
       14,   17,  221,    0,   12,    0,   17,   17,   17,   17,

       17,  235,  227,  222,  232,    0,    0,  225,  214,  228,
      215,  229,  213,  102,    0,  260,    2,    8,  226,  260,
      244,    0,    0,  261,  245,  247,    0,    0,  236,  237,
      239,    0,  104,  216,  218,  220,  219,  217,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,  233,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,   27,  235,  235,  235,  235,  235,  235,  235,
      235,   35,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  234,  223,
        5,    3,    4,   10,  270,  269,  269,  268,  287,    0,
      286,  288,  300,  302,  301,  302,  302,  302,  302,  302,
      302,  324,  326,    0,  308,  309,  311,    0,  325,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,   27,  326,  326,  326,  326,  326,  326,  326,
      326,   35,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  333,  334,

      278,  279,    0,    0,    0,    0,    0,   17,   17,   15,
       15,   17,   17,   17,   17,   11,    0,    0,  103,  224,
        0,  262,  260,    0,    0,  260,  246,  248,  248,    0,
      252,    0,    0,    0,  250,  238,  240,  240,    0,    0,
        0,    0,  242,  230,  231,    0,    0,    0,    0,    0,
        0,    0,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,   74,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,   33,  235,  235,  235,
       37,  235,  235,  235,  235,   86,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  191,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  316,  310,  312,  312,    0,    0,
        0,    0,  314,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,   74,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,   33,  326,  326,
      326,   37,  326,  326,  326,  326,   86,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  191,  326,  326,  326,  326,
      326,  326,  326,  326,  326,    0,    0,    0,    0,    0,
       15,   17,   17,    0,    0,    0,  260,    0,  260,  249,
        0,    0,    0,  251,    0,  253,    0,  255,    0,    0,
      241,    0,    0,    0,  243,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,   18,   76,  235,   21,  235,   22,  235,  235,  235,
      235,  235,  235,  235,   29,   30,  235,  235,  235,  235,
      235,  235,   34,  235,  235,   38,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,   94,  235,  235,  235,  235,  235,

      235,  235,   51,  235,  235,  235,  302,  302,  302,  302,
      302,  302,  298,  302,  302,  302,  317,  319,    0,  313,
        0,    0,    0,  315,    0,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,   18,   76,  326,   21,  326,   22,  326,  326,
      326,  326,  326,  326,  326,   29,   30,  326,  326,  326,

      326,  326,  326,   34,  326,  326,   38,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,   94,  326,  326,  326,  326,
      326,  326,  326,   51,  326,  326,  326,    0,  284,    0,
        0,    0,   17,   17,    0,    0,    0,    0,    0,  254,
      256,    0,  260,  256,    0,    0,    0,    0,  258,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  142,
      235,  235,   19,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,   73,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  173,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  171,  235,  235,  179,  235,  190,
      235,  235,  235,  162,  235,  235,  235,  235,  235,  235,
      235,   20,   77,   78,   24,  235,  235,  235,  235,  235,
      235,  235,  235,  235,   32,  235,  235,  197,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,   42,
      235,  235,  235,  235,  235,  235,  235,   96,  235,  235,
      235,  235,   49,  235,   99,  235,  235,  235,   53,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  318,  320,
      320,    0,    0,    0,    0,  322,    0,  326,  326,   19,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
       73,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  173,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  171,  326,  326,  179,  326,  190,  326,  326,  326,
      162,  326,  326,  326,  326,  326,  326,  326,   20,   77,
       78,   24,  326,  326,  326,  326,  326,  326,  326,  326,
      326,   32,  326,  326,  197,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,   42,  326,  326,  326,
      326,  326,  326,  326,   96,  326,  326,  326,  326,   49,

      326,   99,  326,  326,  326,   53,    0,    0,   17,   17,
        0,    0,  260,  257,    0,    0,    0,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,   55,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  169,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  176,  235,  155,  235,  235,  235,  235,

      235,  235,  235,  235,   80,   28,  195,  235,   31,  235,
       83,   36,  235,  235,  235,  235,  235,  235,  235,   91,
      235,  235,   41,   43,   44,   45,   46,   47,  235,  235,
      235,   97,  235,  183,  235,  235,  235,  235,  302,  302,
      302,  302,  302,  302,  292,  302,  302,  321,    0,    0,
        0,  323,    0,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,   55,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  169,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  176,  326,  155,
      326,  326,  326,  326,  326,  326,  326,  326,   80,   28,
      195,  326,   31,  326,   83,   36,  326,  326,  326,  326,
      326,  326,  326,   91,  326,  326,   41,   43,   44,   45,
       46,   47,  326,  326,  326,   97,  326,  183,  326,  326,
      326,  326,    0,    0,   16,    0,  260,    0,    0,    0,
      138,    0,    0,  145,  144,    0,    0,    0,  235,  235,
      207,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      170,   75,  235,  235,  156,  235,  163,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,   56,   57,   58,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  196,  235,  235,  235,   59,   60,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,   26,  235,
      193,   84,  235,   87,  235,  235,   89,  235,  235,  235,
      235,  235,  235,   48,  235,  235,  100,  235,  101,  302,
      302,  302,  302,  302,  290,  302,  302,    0,  326,  326,
      207,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      170,   75,  326,  326,  156,  326,  163,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,   56,   57,   58,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  196,  326,  326,  326,   59,   60,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,   26,  326,
      193,   84,  326,   87,  326,  326,   89,  326,  326,  326,
      326,  326,  326,   48,  326,  326,  100,  326,  101,    0,
        0,   16,   16,    0,  139,    0,  143,    0,    0,    0,

      205,  206,   23,  208,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  194,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,   63,  187,  235,  235,  235,
      235,  235,  235,  235,  235,  125,  235,  235,  235,  235,
      235,  235,  235,  235,  174,  148,   62,  235,  165,  182,
      235,  235,  204,  184,  235,  235,  235,  235,  235,  158,
      235,  235,   25,   81,   82,  235,   68,   88,  235,   39,
       40,  235,   93,  235,   98,   50,   52,  302,  299,  302,
      302,  302,  302,  302,  205,  206,   23,  208,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  194,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,   63,
      187,  326,  326,  326,  326,  326,  326,  326,  326,  125,
      326,  326,  326,  326,  326,  326,  326,  326,  174,  148,
       62,  326,  165,  182,  326,  326,  204,  184,  326,  326,
      326,  326,  326,  158,  326,  326,   25,   81,   82,  326,
       68,   88,  326,   39,   40,  326,   93,  326,   98,   50,
       52,    0,  282,    0,    0,    0,    0,    0,  235,  210,
      235,  235,  235,  235,  235,  151,  235,  235,  235,  157,

      235,  164,  235,  235,  235,  192,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  123,  235,  235,  235,  235,
      235,  235,  235,  189,  235,  235,  235,  159,  235,  235,
      235,  235,  235,  147,  160,  235,   79,   85,   90,  235,
      235,  302,  302,  302,  302,  302,  302,  326,  210,  326,
      326,  326,  326,  326,  151,  326,  326,  326,  157,  326,
      164,  326,  326,  326,  192,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  123,  326,  326,  326,  326,  326,

      326,  326,  189,  326,  326,  326,  159,  326,  326,  326,
      326,  326,  147,  160,  326,   79,   85,   90,  326,  326,
        0,    0,    0,    0,    0,    0,  209,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  146,  235,  161,
       54,  235,  235,  235,  106,  235,  235,  235,  235,  235,
      235,  235,  188,  235,  235,  119,  235,  235,  122,  235,
      235,  235,  235,  235,  235,  131,  235,  235,  154,  166,
      235,  185,  235,  167,  235,  235,  235,  235,  302,  293,
      302,  302,  302,  302,  209,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  146,  326,  161,   54,  326,

      326,  326,  106,  326,  326,  326,  326,  326,  326,  326,
      188,  326,  326,  119,  326,  326,  122,  326,  326,  326,
      326,  326,  326,  131,  326,  326,  154,  166,  326,  185,
      326,  167,  326,  326,  326,  326,    0,    0,  141,  135,
        0,    0,  235,  235,   71,  235,  235,  235,  235,  235,
      172,  152,   70,  150,  235,  235,  235,  235,   61,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  133,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  129,  235,
      235,  235,  235,  235,  235,  177,  235,  235,  235,  291,
      302,  302,  302,  296,  326,  326,   71,  326,  326,  326,

      326,  326,  172,  152,   70,  150,  326,  326,  326,  326,
       61,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      133,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      129,  326,  326,  326,  326,  326,  326,  177,  326,  326,
      326,    0,    0,  137,    0,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      178,  105,  235,  235,  235,  235,  235,  235,  235,  118,
      235,  235,  235,  235,  235,  235,  235,  235,   67,  235,
      235,  168,  235,  235,   95,  302,  302,  302,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  178,  105,  326,  326,  326,  326,  326,
      326,  326,  118,  326,  326,  326,  326,  326,  326,  326,
      326,   67,  326,  326,  168,  326,  326,   95,  283,    0,
        0,  235,  212,  235,  235,  235,  235,  235,  235,  149,
      235,  235,  235,  235,  153,  186,  235,  235,  235,  235,
      235,  235,  117,  235,  121,  235,  235,  235,  235,  235,
      235,  235,  235,  235,   92,  302,  302,  302,  326,  212,
      326,  326,  326,  326,  326,  326,  149,  326,  326,  326,
      326,  153,  186,  326,  326,  326,  326,  326,  326,  117,
      326,  121,  326,  326,  326,  326,  326,  326,  326,  326,

      326,   92,    0,    0,  211,  235,  235,  203,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  127,  128,  235,  235,  180,  235,
      235,  302,  302,  302,  211,  326,  326,  203,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  127,  128,  326,  326,  180,  326,
      326,    0,    0,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  107,  235,  235,  235,  235,  235,  235,  235,
      134,  235,  235,  235,  235,  235,  235,  175,   64,  302,
      297,  302,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  107,  326,  326,  326,  326,  326,  326,  326,  134,
      326,  326,  326,  326,  326,  326,  175,   64,  140,    0,
      235,  235,  199,  198,  235,  235,  235,  235,   65,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  126,  235,
      132,  235,  302,  302,  326,  326,  199,  198,  326,  326,
      326,  326,   65,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  126,  326,  132,  326,    0,  235,  235,  235,
       72,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  181,  302,  294,  326,  326,
      326,   72,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  181,    0,  200,  235,
      235,   66,  235,  235,  235,  110,  235,  235,  113,  235,
      235,  235,  235,  235,  235,  302,  200,  326,  326,   66,
      326,  326,  326,  110,  326,  326,  113,  326,  326,  326,
      326,  326,  326,    0,  202,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  120,  235,  235,  302,  202,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  120,  326,
      326,    0,  235,  235,  108,  235,  111,  235,  235,  235,
      235,  124,  235,  302,  326,  326,  108,  326,  111,  326,
      326,  326,  326,  124,  326,    0,  235,  235,  235,  235,

      235,  115,  235,  235,  295,  326,  326,  326,  326,  326,
      115,  326,  326,    0,  201,  235,  235,  235,  235,  235,
      235,  201,  326,  326,  326,  326,  326,  326,    0,  235,
      235,  235,  235,  235,  130,  326,  326,  326,  326,  326,
      130,    0,  235,  235,  235,  114,  116,  326,  326,  326,
      114,  116,    0,  235,  109,  112,  326,  109,  112,    0,
      235,  326,    0,  235,  326,  136,   69,   69,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,    1,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   43,   43,   45,   43,   46,   47,   48,
       43,   49,   50,   51,   52,   53,   43,   54,   43,   43,
       55,   56,   57,   58,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        4,    1,    1,    5,    1,    1,    1,    6,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    1,    8,    8,    8,    8,    9,
       10,    3,    3,    3,   11,    3,    3,   12,    3,    3,
        3,   13,    3,    3,    1,    1,    1,   14,    3,    8,
        8,    8,    8,    9,   10,    3,    3,   13,    3,    3,
       11,    3,    3,    3,   12,    3,    3,    3,    3,   13,
        3,    3,    3,    3,    3,   14,    1,   15
    } ;

static yyconst flex_int16_t yy_base[2813] =
    {   0,
        0,    0,    0,    0,   86,   87, 3890, 3889, 3803, 3802,
       89,   92,   90,   95,  101,  106,   94,   96,  108,  113,
      180,    0,  268,    0,  118,  120,  355,  358,  361,  372,
        0,    0,    0,    0, 3889, 3894, 3894,  120, 3894, 3894,
     3855,   90,  365,    0, 3854,  116, 3830, 3852,  109,  111,
      134,  363,  441,  507, 3854, 3894,  105, 3850,  106,  159,
      407, 3879, 3848,  552,   63,   94,  339,  102,  324,  344,
     3806,  305,  305, 3799,  344,  351,  303, 3814,  355,  366,
       94,   61,  112, 3894,  348,    0, 3894, 3858, 3862,    0,
     3894,    0, 3894,    0,  370, 3894, 3894, 3894, 3894, 3894,

     3894, 3894, 3894, 3894, 3894, 3894, 3873, 3894, 3894,  417,
     3871, 3894, 3871, 3894, 3894,    0, 3894, 3869, 3812, 3799,
     3795, 3808, 3790, 3802, 3894, 3863, 3894, 3894, 3831,    0,
     3830,  392, 3894, 3894, 3829,  439, 3894,  415,  387, 3828,
      390,  431, 3830,  413, 3826,  418,  473, 3855, 3824,  598,
      320,  400,  429,  414,  421,  439, 3782,  425,  427, 3775,
      458,  474,  437, 3790,  475,  496,  382,  452,  479,  475,
     3894, 3894, 3894, 3894, 3894, 3851, 3894, 3894, 3894, 3849,
     3894, 3849, 3894, 3894, 3894, 3847, 3790, 3774, 3773, 3894,
      554,  598, 3894,  509, 3894,  674,    0,  690,  764, 3778,

     3768,    0, 3894, 3894, 3894,  508,  815, 3894, 3894, 3894,
     3894, 3894, 3830, 3894, 3825,  541, 3894, 3894, 3894,  606,
      486,  567,  754, 3894,  607,  499,    0,  660,    0,  613,
      596,  699, 3894, 3809, 3894, 3894, 3894, 3808,  560, 3784,
      747, 3803,  496, 3764, 3773, 3762, 3755, 3894, 3894,  505,
     3760, 3759, 3768, 3759, 3756, 3750, 3761,  863, 3764, 3762,
     3765, 3745, 3763, 3750, 3742, 3746, 3755,  513, 3758, 3757,
     3743,  512, 3735, 3736, 3733,  575, 3739, 3737, 3733, 3741,
     3729,    0,  522, 3747, 3733, 3726, 3732, 3721, 3731, 3736,
     3736,  536, 3738,  577, 3724,  543,  420, 3729, 3724,  561,

     3711, 3719,  594, 3725, 3715,  487, 3724, 3722, 3894, 3894,
        0, 3894, 3894,    0,    0,    0,  637, 3894, 3787,  719,
     3894, 3894, 3786,    0, 3894,  669, 3719, 3723, 3723, 3724,
     3721, 3780,    0,    0,  763,  777,  637,  773, 3894,  574,
     3707, 3706, 3715, 3706, 3703, 3697, 3708,  910, 3711, 3709,
     3712, 3692, 3710, 3697, 3689, 3693, 3702,  596, 3705, 3704,
     3690,  671, 3682, 3683, 3680,  627, 3686, 3684, 3680, 3688,
     3676,    0,  653, 3694, 3680, 3673, 3679, 3668, 3678, 3683,
     3683,  669, 3685,  625, 3671,  641,  668, 3676, 3671,  686,
     3658, 3666,  678, 3672, 3662,  691, 3671, 3669, 3734, 3894,

     3733, 3894, 3653, 3654, 3661,  839,    0,  799,  802, 3894,
      813,  991,  829, 3658, 3670, 3894,  891,    0, 3894, 3894,
      935, 3894,  957, 1009, 1028,  832,  718, 3894,  773,  786,
     1021,  573, 3707, 3704, 3894,  720, 3894,  778,  861,  738,
     3705, 3702, 3894, 3894, 3894, 3666, 3656, 3648, 3659,  772,
     3641, 3652, 3651, 3644, 3643, 3644, 3642, 3654, 3636, 3652,
     3634, 3665, 3661, 3662,  775, 3627,  793, 3642, 3622,  936,
     3633, 3643,  998,  808, 3637,  889, 3637,  993,  816,  830,
      844, 3636, 3637, 3620, 3634, 3619,    0, 3621, 3623, 3633,
     3628, 3629, 3613, 3611,  827, 3617, 3627, 3622, 3624, 3620,

     3611, 3618, 3610, 3616, 3619, 3618,    0, 3613, 3602, 3607,
        0, 3593, 3607, 3612, 3607,    0, 3599, 3591, 3591, 3586,
     3587, 3594, 3596, 3584, 3582, 3584, 3587, 3595, 3579, 3577,
     3577, 3580, 3576,  817,    0, 3589, 3578, 3583, 3577, 3570,
     3585, 3587, 3586, 3574, 3573, 3569, 3582, 3564, 3576, 3573,
     3574, 3567, 3563, 3556, 1032,  887, 3894,  807,  980,  910,
     3612, 3609, 3894, 3564, 3557, 3556, 3557, 3555, 3567, 3549,
     3565, 3547, 3578, 3574, 3575, 1007, 3540,  846, 3555, 3535,
     1019, 3546, 3556, 1032,  919, 3550,  963, 3550, 1034, 1014,
      859, 1018, 3549, 3550, 3533, 3547, 3532,    0, 3534, 3536,

     3546, 3541, 3542, 3526, 3524,  921, 3530, 3540, 3535, 3537,
     3533, 3524, 3531, 3523, 3529, 3532, 3531,    0, 3526, 3515,
     3520,    0, 3506, 3520, 3525, 3520,    0, 3512, 3504, 3504,
     3499, 3500, 3507, 3509, 3497, 3495, 3497, 3500, 3508, 3492,
     3490, 3490, 3493, 3489,  879,    0, 3502, 3491, 3496, 3490,
     3483, 3498, 3500, 3499, 3487, 3483, 3482, 3495, 1101, 1152,
     3894, 3490, 3487, 1109, 1207, 1117, 1023, 1127, 1154, 3894,
      960, 3530, 3527, 3894, 1111, 1116, 1258, 1126, 1141, 3522,
     3894,  983, 3527, 3524, 3894, 3519, 1157, 3467, 3471, 3464,
     3479, 3462, 3464, 3477, 3473, 3466, 3466, 3461, 3471, 3468,

     3469, 3453, 3467, 3486, 3480, 3477, 3459, 3454, 3446, 3456,
     3459,  973, 3460,  751, 3443, 3447, 3445, 3441, 3443, 3438,
     3456, 3454, 1040, 3437, 3453, 3450, 3450, 3444, 3446, 3447,
     3429, 3428,  680, 3438, 3441, 3437, 3438, 3438, 3422, 3414,
     3422, 3425, 3424, 3470, 3433, 3424, 3429, 3419, 3410, 3426,
     3428,    0,    0, 3416,    0, 3418,    0, 3406, 3404, 3414,
     3402, 3400, 3400, 3407,    0,    0, 3402, 3408, 3398, 3403,
     3394, 3399,    0, 3398, 3406,    0, 3408, 3390, 3392, 3402,
     3405, 3404, 3399, 3394, 3383, 3383, 3382, 3379, 3393, 3382,
     3387, 3392, 3391, 3381,    0, 3391, 3368, 1186, 3376, 3382,

     3381, 3366,    0, 3366, 3367, 3379, 3374, 3378, 3378, 3379,
     3376, 3362,    0, 3370, 3341, 3341, 1243, 1138, 1229, 3894,
     1036, 3392, 3386, 3894, 3381, 3340, 3327, 3327, 3319, 3329,
     3323, 3324, 3290, 3283, 3301, 3295, 3292, 3263, 3253, 3241,
     3234, 3236,  987, 3237, 1037, 3220, 3216, 3214, 3210, 3204,
     3199, 3217, 3203, 1131, 3158, 3163, 3158, 3146, 3139, 3133,
     3134, 3116, 3101,  750, 3097,  111,  301,  340,  377,  364,
      513,  538,  595,  597,  666,  692,  705,  733,  803,  807,
      848,  863,    0,    0,  865,    0,  884,    0,  887,  901,
      922,  946,  947,  962, 1009,    0,    0, 1008, 1046, 1040,

     1047, 1081, 1090,    0, 1093, 1106,    0, 1121, 1106, 1110,
     1136, 1141, 1143, 1140, 1143, 1142, 1144, 1145, 1144, 1160,
     1152, 1169, 1176, 1177, 1169,    0, 1181, 1160, 1188, 1180,
     1192, 1198, 1185,    0, 1187, 1197, 1212, 1206, 3894, 1210,
     1284,    0, 1304, 1219, 1281,    0, 1265, 1246, 1321, 1255,
     3894, 1276, 1311, 1263, 1289, 1287, 1289, 1292, 3894, 1290,
     1245, 1277, 1240, 1254, 1262, 1282, 1295, 1280, 1296, 3894,
     1286, 1292,    0, 1290, 1285, 1295, 1285, 1297, 1306, 1325,
     1321, 1333, 1304, 1312, 1295, 1302, 1312, 1302, 1300, 1308,
     1316, 1317, 1304, 1324, 1325, 1324, 1326, 1329, 1325, 1324,

     1323, 1371,    0, 1340, 1329, 1314, 1318, 1335, 1340, 1384,
     1345, 1340, 1333, 1340,    0, 1335, 1354, 1360, 1358,    0,
     1359, 1344, 1365,    0, 1356, 1348, 1357, 1351, 1368, 1371,
     1372,    0,    0,    0, 1369, 1361, 1351, 1365, 1373, 1374,
     1360, 1378, 1368, 1371,    0, 1380, 1380,    0, 1374, 1371,
     1368, 1369, 1370, 1371, 1389, 1390, 1374, 1386, 1382,    0,
     1393, 1392, 1396, 1380, 1393, 1401, 1399,    0, 1399, 1401,
     1405, 1401,    0, 1394,    0, 1408, 1401, 1411,    0, 1405,
     1408, 1403, 1401, 1396, 1412, 1414, 1403, 1402, 1428, 3894,
     1436, 1461, 1464, 1461, 1461, 3894, 1460, 1418, 1424,    0,

     1422, 1417, 1427, 1417, 1429, 1438, 1457, 1453, 1465, 1436,
     1444, 1427, 1434, 1444, 1434, 1432, 1440, 1448, 1449, 1435,
     1455, 1456, 1455, 1457, 1460, 1456, 1455, 1454, 1502,    0,
     1471, 1460, 1445, 1449, 1466, 1471, 1515, 1476, 1471, 1464,
     1471,    0, 1466, 1485, 1491, 1489,    0, 1490, 1475, 1496,
        0, 1487, 1479, 1488, 1482, 1499, 1502, 1503,    0,    0,
        0, 1500, 1492, 1482, 1496, 1504, 1505, 1491, 1509, 1499,
     1502,    0, 1511, 1511,    0, 1505, 1502, 1499, 1500, 1501,
     1502, 1520, 1521, 1505, 1517, 1513,    0, 1524, 1523, 1527,
     1511, 1524, 1532, 1530,    0, 1530, 1532, 1536, 1532,    0,

     1525,    0, 1539, 1532, 1542,    0, 1542, 1535, 1602, 1545,
     1591, 1612, 1601, 3894, 1621, 1585, 1585, 3894, 1582, 1544,
     1566, 1581, 1586, 1586, 1571, 1587, 1573, 1580, 1590, 1595,
     1594, 1593, 1590, 1586, 1580, 1599, 1599, 1617, 1611, 1626,
     1594, 1609, 1602, 1592, 1602, 1603, 1596, 1598, 1602, 1605,
     1617, 1609, 1602, 1618, 1623, 1624, 1602, 1613, 1629, 1617,
     1665, 1670, 1669,    0, 1633, 1635, 1625, 1634, 1628, 1629,
     1632, 1643, 1644, 1636, 1650, 1640, 1649, 1650, 1651, 1644,
     1695, 1694,    0, 1660, 1643, 1657, 1657, 1663, 1656, 1665,
     1652, 1663, 1649,    0, 1665,    0, 1655, 1671, 1661, 1656,

     1651, 1655, 1661, 1658,    0,    0,    0, 1670,    0, 1655,
        0,    0, 1676, 1681, 1665, 1669, 1670, 1681, 1667,    0,
     1683, 1686,    0,    0,    0, 1690,    0,    0, 1671, 1692,
     1687,    0, 1681,    0, 1690, 1684, 1685, 1678, 1685, 1700,
     1696, 1683, 1688, 1700,    0, 1704, 1706, 3894, 1744, 1745,
     1744, 3894, 1741, 1711, 1710, 1709, 1706, 1702, 1696, 1715,
     1715, 1733, 1727, 1742, 1709, 1724, 1716, 1707, 1716, 1717,
     1710, 1712, 1716, 1719, 1731, 1723, 1716, 1732, 1737, 1738,
     1716, 1727, 1743, 1731, 1779, 1784, 1783,    0, 1747, 1749,
     1739, 1748, 1742, 1743, 1746, 1757, 1758, 1750, 1764, 1754,

     1763, 1764, 1765, 1758, 1809, 1808,    0, 1774, 1757, 1771,
     1771, 1777, 1770, 1779, 1766, 1777, 1763,    0, 1779,    0,
     1769, 1785, 1775, 1770, 1765, 1769, 1775, 1772,    0,    0,
        0, 1784,    0, 1769,    0,    0, 1790, 1795, 1779, 1783,
     1784, 1795, 1781,    0, 1797, 1800,    0,    0,    0, 1804,
        0,    0, 1785, 1806, 1801,    0, 1795,    0, 1804, 1798,
     1799, 1792, 1793, 1802, 1872, 1855, 1844, 1858, 1815, 1809,
     3894, 1828, 1820, 3894, 3894, 1832, 1812, 1835, 1817, 1831,
        0, 1814, 1836, 1839, 1823, 1842, 1843, 1856, 1864, 1866,
     1842,    0, 1846, 1840, 1851, 1847, 1853, 1838, 1835, 1839,

     1858, 1848, 1899, 1853, 1851, 1845, 1850, 1857, 1852, 1850,
     1850, 1861, 1862, 1852, 1873, 1869,    0,    0,    0, 1856,
     1857, 1876, 1864, 1867, 1864, 1860, 1862, 1879, 1878, 1884,
     1873, 1878, 1876, 1889,    0, 1870, 1888, 1892,    0,    0,
     1894, 1886, 1892, 1881, 1886, 1885, 1896, 1895, 1902, 1894,
     1889, 1900, 1894, 1895, 1901, 1893, 1905, 1906,    0, 1892,
        0,    0, 1910,    0, 1908, 1897,    0, 1911, 1899, 1898,
     1918, 1915, 1909,    0, 1917, 1919,    0, 1919,    0, 1920,
     1926, 1923, 1912, 1911,    0, 1912, 1912, 1963, 1914, 1928,
        0, 1911, 1933, 1936, 1920, 1939, 1940, 1953, 1961, 1963,

     1939,    0, 1943, 1937, 1947, 1943, 1949, 1934, 1931, 1933,
     1952, 1943, 1994, 1948, 1946, 1940, 1945, 1952, 1947, 1945,
     1945, 1956, 1957, 1947, 1968, 1964,    0,    0,    0, 1951,
     1952, 1971, 1959, 1962, 1959, 1955, 1957, 1974, 1973, 1979,
     1968, 1973, 1971, 1984,    0, 1965, 1983, 1987,    0,    0,
     1989, 1981, 1987, 1976, 1981, 1980, 1991, 1990, 1997, 1989,
     1984, 1995, 1989, 1990, 1996, 1988, 2000, 2001,    0, 1987,
        0,    0, 2005,    0, 2003, 1992,    0, 2006, 1994, 1993,
     2013, 2010, 2004,    0, 2012, 2014,    0, 2014,    0, 2011,
     2016,    0, 2079, 2022, 3894, 2019, 3894, 2023, 2025, 2026,

        0,    0,    0,    0, 2010, 2015, 2029, 2019, 2050, 2043,
     2044, 2031, 2030, 2016, 2024, 2039, 2016, 2041, 2037,    0,
     2034, 2032, 2020, 2083, 2033, 2048, 2030, 2034, 2037, 2032,
     2044, 2049, 2037, 2037, 2057,    0, 2058, 2039, 2055, 2042,
     2040, 2058, 2044, 2052, 2061,    0, 2042, 2068, 2057, 2054,
     2056, 2051, 2073, 2059,    0,    0,    0, 2072, 2076,    0,
     2065, 2074,    0, 2079, 2071, 2069, 2068, 2080, 2072,    0,
     2085, 2068,    0,    0,    0, 2082,    0,    0, 2084,    0,
        0, 2070,    0, 2075,    0,    0,    0, 2087,    0, 2092,
     2092, 2094, 2090, 2087,    0,    0,    0,    0, 2079, 2084,

     2098, 2088, 2119, 2112, 2113, 2100, 2099, 2085, 2093, 2108,
     2085, 2110, 2106,    0, 2103, 2101, 2089, 2152, 2102, 2117,
     2099, 2103, 2106, 2101, 2113, 2118, 2106, 2106, 2126,    0,
     2127, 2108, 2124, 2111, 2109, 2127, 2113, 2121, 2130,    0,
     2111, 2137, 2126, 2123, 2125, 2120, 2142, 2128,    0,    0,
        0, 2141, 2145,    0, 2134, 2143,    0, 2148, 2140, 2138,
     2137, 2149, 2141,    0, 2154, 2137,    0,    0,    0, 2151,
        0,    0, 2153,    0,    0, 2139,    0, 2144,    0,    0,
        0, 2148, 3894, 2141, 2143, 2151, 2152, 2151, 2141,    0,
     2148, 2153, 2169, 2170, 2171, 2172, 2173, 2154, 2175,    0,

     2176,    0, 2174, 2163, 2167,    0, 2211, 2169, 2164, 2174,
     2159, 2184, 2178, 2165, 2170, 2169, 2170, 2186, 2192, 2175,
     2194, 2176, 2191, 2190, 2173,    0, 2181, 2187, 2200, 2197,
     2192, 2191, 2201,    0, 2201, 2188, 2209,    0, 2201, 2211,
     2198, 2208, 2202,    0,    0, 2195,    0,    0,    0, 2197,
     2214, 2218, 2219, 2202, 2202, 2208, 2197, 2199,    0, 2206,
     2211, 2227, 2228, 2229, 2230, 2231, 2212, 2233,    0, 2234,
        0, 2232, 2221, 2225,    0, 2269, 2227, 2222, 2232, 2217,
     2242, 2236, 2223, 2228, 2227, 2228, 2244, 2250, 2233, 2252,
     2234, 2249, 2248, 2231,    0, 2239, 2245, 2258, 2255, 2250,

     2249, 2259,    0, 2259, 2246, 2267,    0, 2259, 2269, 2256,
     2266, 2260,    0,    0, 2253,    0,    0,    0, 2255, 2272,
     2271, 2286, 2259, 2274, 2259, 2267,    0, 2263, 2280, 2284,
     2284, 2287, 2288, 2291, 2287, 2292, 2294,    0, 2281,    0,
        0, 2287, 2292, 2291,    0, 2287, 2282, 2292, 2302, 2282,
     2286, 2282,    0, 2307, 2294,    0, 2292, 2310,    0, 2307,
     2300, 2298, 2305, 2314, 2314,    0, 2320, 2321,    0,    0,
     2304,    0, 2323, 2324, 2300, 2301, 2322, 2327, 2329,    0,
     2325, 2322, 2312, 2328,    0, 2315, 2332, 2336, 2336, 2339,
     2340, 2343, 2339, 2344, 2346,    0, 2333,    0,    0, 2339,

     2344, 2343,    0, 2339, 2334, 2344, 2354, 2334, 2338, 2334,
        0, 2359, 2346,    0, 2344, 2362,    0, 2359, 2352, 2350,
     2357, 2366, 2366,    0, 2372, 2373,    0,    0, 2356,    0,
     2375, 2376, 2352, 2353, 2374, 2379, 2381, 2362, 3894, 3894,
     2378, 2369, 2380, 2385,    0, 2369, 2379, 2365, 2375, 2383,
        0,    0,    0, 2392, 2381, 2389, 2371, 2396,    0, 2398,
     2385, 2393, 2387, 2393, 2388, 2403, 2401, 2405,    0, 2398,
     2405, 2403, 2390, 2391, 2411, 2395, 2396, 2414,    0, 2416,
     2414, 2418, 2414, 2402, 2421,    0, 2406, 2405, 2412,    0,
     2411, 2400, 2427,    0, 2423, 2428,    0, 2412, 2422, 2408,

     2418, 2426,    0,    0,    0, 2435, 2424, 2432, 2414, 2439,
        0, 2441, 2428, 2436, 2430, 2436, 2431, 2446, 2444, 2448,
        0, 2441, 2448, 2446, 2433, 2434, 2454, 2438, 2439, 2457,
        0, 2459, 2457, 2461, 2457, 2445, 2464,    0, 2449, 2448,
     2455, 2468, 2451, 3894, 2450, 2453, 2460, 2455, 2454, 2460,
     2467, 2459, 2460, 2479, 2471, 2475, 2466, 2483, 2484, 2480,
        0,    0, 2460, 2464, 2476, 2484, 2478, 2472, 2472,    0,
     2484, 2489, 2492, 2480, 2496, 2479, 2477, 2488,    0, 2498,
     2497,    0, 2498, 2484,    0, 2485, 2501, 2486, 2490, 2497,
     2492, 2491, 2497, 2504, 2496, 2497, 2516, 2508, 2512, 2503,

     2520, 2521, 2517,    0,    0, 2497, 2501, 2513, 2521, 2515,
     2509, 2509,    0, 2521, 2526, 2529, 2517, 2533, 2516, 2514,
     2525,    0, 2535, 2534,    0, 2535, 2521,    0, 3894, 2533,
     2542, 2524,    0, 2544, 2524, 2535, 2529, 2548, 2545,    0,
     2544, 2533, 2548, 2553,    0,    0, 2550, 2556, 2557, 2539,
     2559, 2540,    0, 2559,    0, 2557, 2555, 2539, 2546, 2565,
     2566, 2548, 2562, 2555,    0, 2571, 2572, 2559, 2554,    0,
     2574, 2554, 2565, 2559, 2578, 2575,    0, 2574, 2563, 2578,
     2583,    0,    0, 2580, 2586, 2587, 2569, 2589, 2570,    0,
     2589,    0, 2587, 2585, 2569, 2576, 2595, 2596, 2578, 2592,

     2585,    0, 2587, 2582,    0, 2578, 2599,    0, 2585, 2594,
     2606, 2594, 2604, 2591, 2593, 2594, 2612, 2613, 2598, 2615,
     2601, 2609, 2622, 2614,    0,    0, 2612, 2606, 2626, 2608,
     2622, 2608, 2630, 2622,    0, 2607, 2628,    0, 2614, 2623,
     2635, 2623, 2633, 2620, 2622, 2623, 2641, 2642, 2627, 2644,
     2630, 2638, 2651, 2643,    0,    0, 2641, 2635, 2655, 2637,
     2651, 2651, 2650, 2660, 2658, 2643, 2651, 2660, 2650, 2646,
     2667, 2661,    0, 2650, 2655, 2652, 2657, 2668, 2656, 2670,
        0, 2671, 2674, 2675, 2658, 2661, 2663,    0,    0, 2668,
        0, 2668, 2684, 2682, 2667, 2675, 2684, 2674, 2670, 2691,

     2685,    0, 2674, 2679, 2676, 2681, 2692, 2680, 2694,    0,
     2695, 2698, 2699, 2682, 2685, 2687,    0,    0, 3894, 2691,
     2692, 2688,    0,    0, 2709, 2704, 2696, 2709,    0, 2694,
     2700, 2696, 2703, 2699, 2699, 2702, 2722, 2711,    0, 2719,
        0, 2757, 2717, 2713, 2713, 2709,    0,    0, 2730, 2725,
     2717, 2730,    0, 2715, 2721, 2717, 2724, 2720, 2720, 2723,
     2743, 2732,    0, 2740,    0, 2778, 2733, 2742, 2734, 2738,
        0, 2745, 2737, 2744, 2735, 2730, 2747, 2738, 2733, 2739,
     2757, 2741, 2742, 2762, 2764,    0, 2750,    0, 2760, 2752,
     2756,    0, 2763, 2755, 2762, 2753, 2748, 2765, 2756, 2751,

     2757, 2775, 2759, 2760, 2780, 2782,    0, 2783,    0, 2766,
     2770,    0, 2773, 2780, 2768,    0, 2782, 2770,    0, 2773,
     2772, 2775, 2779, 2776, 2793, 2783,    0, 2780, 2784,    0,
     2787, 2794, 2782,    0, 2796, 2784,    0, 2787, 2786, 2789,
     2793, 2790, 2807, 2810,    0, 2809, 2797, 2800, 2797, 2802,
     2799, 2797, 2804, 2799,    0, 2802, 2810, 2823,    0, 2821,
     2809, 2812, 2809, 2814, 2811, 2809, 2816, 2811,    0, 2814,
     2822, 2815, 2835, 2836,    0, 2817,    0, 2818, 2837, 2823,
     2839,    0, 2842, 2844, 2844, 2845,    0, 2826,    0, 2827,
     2846, 2832, 2848,    0, 2851, 2833, 2842, 2835, 2853, 2854,

     2838,    0, 2839, 2841,    0, 2849, 2842, 2860, 2861, 2845,
        0, 2846, 2848, 2850,    0, 2860, 2850, 2851, 2857, 2858,
     2855,    0, 2866, 2856, 2857, 2863, 2864, 2861, 2872, 2880,
     2868, 2869, 2867, 2868,    0, 2885, 2873, 2874, 2872, 2873,
        0, 2890, 2881, 2876, 2877,    0,    0, 2884, 2879, 2880,
        0,    0, 2878, 2895,    0,    0, 2896,    0,    0, 2882,
     2903, 2904, 2900, 2890, 2891, 3894,    0,    0, 3894, 2966,
     2981, 2996, 3011, 3026, 3041, 3056, 3071, 3086, 3101, 3116,
     3131, 3146, 3161, 3176, 3189, 3202, 3217, 3232, 3247, 3261,
     3272, 3283, 3290, 3303, 3312, 3317, 3323, 3327, 3331, 3335,

     3342, 3352, 3367, 3376, 3380, 3385, 3390, 3395, 3401, 3406,
     3417, 3426
    } ;

static yyconst flex_int16_t yy_def[2813] =
    {   0,
     2770, 2770, 2769,    3, 2771, 2771, 2772, 2772, 2773, 2773,
     2774, 2774, 2775, 2775, 2776, 2776, 2777, 2777, 2778, 2778,
     2769,   21, 2769,   23, 2779, 2779, 2780, 2780, 2781, 2781,
     2782, 2782, 2782, 2782, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2783, 2784, 2785, 2769, 2769, 2786, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2785,
     2769, 2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2769, 2769, 2787, 2769, 2769, 2769, 2788,
     2769, 2789, 2769, 2790, 2790, 2769, 2769, 2769, 2769, 2769,

     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2791, 2769, 2769, 2791, 2791,
     2791, 2791, 2791, 2791, 2769, 2769, 2769, 2769, 2769, 2792,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2793, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2784, 2769, 2783, 2769, 2769, 2784, 2784, 2794, 2784,

     2784, 2785, 2769, 2769, 2769, 2786, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2795, 2769, 2769, 2769, 2796,
       53, 2797, 2769, 2769, 2769, 2769, 2798, 2769,   54, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2783, 2786,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2769, 2769,
     2787, 2769, 2769, 2788, 2789, 2790, 2790, 2769, 2769, 2769,
     2769, 2769, 2769, 2791, 2769, 2791, 2791, 2791, 2791, 2791,
     2791, 2769, 2792, 2799, 2800, 2769, 2769, 2769, 2769, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769,

     2769, 2769, 2769, 2769, 2769, 2783, 2801, 2802, 2802, 2769,
     2802, 2802, 2802, 2803, 2803, 2769, 2786, 2804, 2769, 2769,
     2769, 2769, 2796, 2769, 2769, 2805, 2769, 2769, 2769, 2769,
     2798, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2791, 2791, 2791, 2791, 2791, 2791,
     2791, 2791, 2791, 2791, 2799, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2769, 2769, 2769, 2783, 2783,
     2769, 2803, 2803, 2786, 2786, 2769, 2806, 2769, 2807, 2769,
     2769, 2769, 2769, 2769, 2808, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2791, 2791, 2791, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769, 2769,
     2783,  660, 2803, 2803, 2786,  665, 2769, 2808, 2769, 2769,
     2769, 2769, 2809, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 2791, 2791, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769, 2803, 2803,
     2769, 2769, 2810, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 2791, 2769, 2769, 2769,
     2769, 2769, 2769, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2769, 2769, 2811, 2769, 2812, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791,
     2791, 2791, 2791, 2791, 2791, 2791, 2791, 2769, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769,
     2769, 2811, 2811, 2769, 2769, 2769, 2769, 2769, 2769, 2769,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791, 2791, 2791,
     2791, 2791, 2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2791, 2791, 2791, 2791, 2791, 2791, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2769, 2769, 2769, 2769, 2769, 2769, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791, 2791,
     2791, 2791, 2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769, 2769, 2769,
     2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791,
     2791, 2791, 2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2769, 2769, 2769, 2769, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2791, 2791, 2791, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769,
     2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2791, 2791, 2791, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2791, 2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2769, 2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791,
     2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2769,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2791, 2791, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2769, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2791, 2791, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,

     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2791, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2769, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2785, 2785, 2785, 2785, 2791, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2769, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2785, 2785, 2791, 2792, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2792, 2792, 2769, 2785, 2785, 2785, 2785,

     2785, 2785, 2785, 2785, 2791, 2792, 2792, 2792, 2792, 2792,
     2792, 2792, 2792, 2769, 2785, 2785, 2785, 2785, 2785, 2785,
     2785, 2792, 2792, 2792, 2792, 2792, 2792, 2792, 2769, 2785,
     2785, 2785, 2785, 2785, 2785, 2792, 2792, 2792, 2792, 2792,
     2792, 2769, 2785, 2785, 2785, 2785, 2785, 2792, 2792, 2792,
     2792, 2792, 2769, 2785, 2785, 2785, 2792, 2792, 2792, 2769,
     2785, 2792, 2769, 2785, 2792, 2769, 2785, 2792,    0, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,

     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769
    } ;

static yyconst flex_int16_t yy_nxt[3983] =
    {   0,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   37,   37,   48,   49,   37,   50,   51,   52,   53,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
       56,   57,   58,   59,   37,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   60,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   61,   62,   37,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   44,   72,   44,   44,
       73,   74,   75,   76,   77,   44,   78,   79,   80,   81,
       82,   83,   44,   44,   44,   84,   85,   37,   87,   87,
       95,   96,   96,   95,   96,  195,   96,   96,   96,   88,

       88,   99,  100,   96,   89,   89,   99,  100,   96,  107,
      108,  109,  102,  103,  107,  108,  109,  102,  103,  110,
       96,  191,   96,  209,  110,  204,  192,  211,  305,  172,
      173,  172,  173,  174,  306,  174,  234,  235,  237,  238,
      264,  210,  265,  212,  213,  196,   96,  214,  205,   96,
      105,  215,  105,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  111,  239,  272,  303,  266,  111,  240,
      267,  304, 1142,  307,   97,  273,   96,   97,  308,   96,
      112,  113,  114,  115,  112,  112,  112,  116,  112,  112,
      112,  112,  117,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  112,  118,  112,  112,  119,  120,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  121,  116,  116,  122,  116,  116,  116,  123,  116,
      124,  116,  116,  116,  116,  112,  112,  112,  125,  126,
      127,  128,  129,  125,  125,  130,  131,  132,  125,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  143,  125,  144,

      145,  146,  125,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  147,  148,  125,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  130,  158,  130,  130,  159,  160,
      161,  162,  163,  130,  164,  165,  166,  167,  168,  169,
      130,  130,  130,  125,  170,  125,  176,  177,  178,  176,
      177,  178,  182,  183,  184, 1143,  198,  179,  284,  282,
      179,  317,  185,  182,  183,  184,  217,  283,  285,  292,
      309,  218,  293,  185,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  274,  219,  275,  354,  268,  355,

      214,  204, 1144,  287,  215,  269,  276,  288,  241,  270,
      180,  277,  271,  180,  278,  290,  186,  279,  320,  187,
      280,  295,  296,  289,  205,  291,  188,  186,  321,  299,
      187,  211,  300,  297,  310,  200,  298,  188, 1145,  201,
     1146,  189,  301,  334,  234,  235,  190,  212,  213,  302,
      237,  238,  189,  209,  393,  318,  242,  190,  220,  394,
      221,  221,  221,  221,  221,  221,  221,  221,  222,  222,
      243,  210,  334,  356,  241,  336,  357,  362,  244,  529,
      223,  224,  337,  245,  246,  225,  247,  363,  358,  372,
      374,  364,  226,  365,  227,  359,  530,  373,  338,  360,

      375,  336,  361,  366,  223,  224,  367,  309,  228,  368,
      337,  225,  369,  382,  195,  370,  383,  377,  416,  395,
      226,  378,  242,  227,  220,  396,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  243,  379,  380, 2769,
      397,  385,  386,  429,  244,  398,  223,  224,  381,  245,
      246,  230,  247,  387,  541,  191,  388,  542,  231,  389,
      192,  310,  390,  207,  196,  195,  430,  447, 2769,  429,
      223,  224,  391,  496,  232,  453,  497,  230,  448,  392,
      421,  224,  498,  454,  220,  422,  231,  250,  251,  252,
      491,  492,  510,  253,  680,  254, 1147,  255,  435,  198,

      511,  256,  257,  520,  421,  224,  223,  224,  527,  521,
      258,  422, 1148,  259,  260,  196,  261,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  528,  533,  262,
      223,  224,  263,  340,  341,  342,  502,  534,  317,  343,
      438,  344,  523,  345,  564,  424,  224,  346,  347,  503,
      422,  427,  565,  504,  524,  525,  348,  436,  428,  349,
      350,  537,  351,  439,  437, 1149,  438, 1150,  200,  424,
      224,  538,  201,  602,  603,  352,  422,  427,  353,  194,
      432,  558,  433,  436,  194,  434,  428,  435,  613, 1151,
      634,  198,  437,  406,  406,  406,  406,  406,  406,  406,

      406,  614,  635,  636,  559,  615,  638,  558,  194,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  440,
      320,  441,  318,  621,  442,  639,  443,  640,  545,  194,
      321,  622,  607,  194,  194,  608,  631,  194,  194, 1012,
      546,  609,  632,  547,  641,  648,  194,  548,  241,  549,
      194, 1152,  194,  644,  194,  649,  407, 1013,  652,  686,
      200,  653,  645,  443,  201,  409,  410,  411,  425,  670,
      425,  681, 1153,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  560, 1154,  561,  242,  670,  562,  681,

      563,  410,  411,  409,  410,  411,  671,  336,  672, 1139,
      243,  673,  991,  674,  337,  410,  411,  670,  244,  413,
      206,  556,  681,  245,  246,  206,  247, 1140,  557,  992,
      338,  661,  411,  336,  417,  417,  417,  417,  417,  417,
      417,  417,  337,  670,  195,  707,  691,  556,  681,  206,
      692,  820,  708,  709,  413,  711,  557,  413,  659,  659,
      659,  659,  659,  659,  659,  659,  712,  726,  413,  744,
      206,  727,  224, 1155,  206,  206,  422,  820,  206,  206,
      796,  682,  739,  683,  413, 1156,  684,  206,  685,  742,
      797,  206,  740,  206,  196,  206,  224,  418,  462,  741,

      463,  416,  422,  743,  759,  760,  464,  745,  842, 1157,
      664,  664,  664,  664,  664,  664,  664,  664,  873,  843,
      746, 1158,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  825,  874,  474, 1159,  563,  475,  476,  820,  477,
      478,  479,  927,  480,  481,  573,  207,  574,  729,  666,
     1160,  666,  928,  575,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667, 1161,  730,  820,  731,  732,  576,
      577,  578,  579,  580,  581,  582,  583,  584,  857, 1162,
      585,  947,  858,  586,  587,  674,  588,  589,  590, 1163,
      591,  592,  409,  410,  411,  715,  424,  224,  890,  891,

      821,  422,  822,  716,  960,  823,  717,  824,  685,  718,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      424,  224,  860,  668, 1164,  668, 1165,  422,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  675,  861,
     1166,  862,  863,  875,  988,  989,  413,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1097, 1115, 1116,
      734,  824,  721,  224,  735,  676,  736,  422,  677,  722,
      723,  737,  678,  738,  724,  725,  817,  838,  846, 1167,
      870,  876, 1168,  818,  839,  840,  847,  224,  679,  848,
      871,  676,  849,  422,  877,  677,  852,  872, 1118,  819,

      678,  865,  817,  853,  854,  866,  195,  867,  855,  856,
     1001,  818,  868, 1169,  869, 1119, 1170, 1171, 1002,  416,
      941,  941,  941,  941,  941,  941,  941,  941,  945,  945,
      945,  945,  945,  945,  945,  945,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  196,  195,  949, 1172,
      950,  956, 1173,  957,  207, 1174,  958,  951,  959, 1175,
      954,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942, 1176, 1091, 1177, 1178,  949,  950,  942,  942,  942,
      942,  942,  942,  955,  224,  951,  954,  961,  422, 1179,

     1180, 1128, 1181, 1182,  962, 1092,  963,  196, 1091, 1129,
     1183,  942,  942,  942,  942,  942,  942,  416,  224, 1184,
     1185, 1186, 1187, 1188,  422, 1189,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946, 1190, 1191, 1192, 1193,
     1194, 1195,  946,  946,  946,  946,  946,  946, 1069, 1093,
     1196, 1094, 1200, 1070, 1095, 1197, 1096, 1201, 1071, 1072,
     1198, 1199,  207, 1202, 1203, 1204,  946,  946,  946,  946,
      946,  946,  952, 1205,  952, 1206, 1207,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953, 1089, 1208,  195,
     1210,  416,  674, 1211, 1090,  953,  953,  953,  953,  953,

      953,  953,  953,  953,  953, 1209, 1214, 1214, 1219, 1215,
      959, 1216,  959, 1089, 1217,  959, 1218,  685, 1220, 1223,
     1211, 1224, 1090,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199, 1214, 1214, 1212,  207, 1212, 1225,  196,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1221,  224, 1226, 1222, 1227,  422, 1228, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245,  200,  224, 1246, 1247, 1248, 1249,
     1250,  422, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1259,
     1260, 1261, 1276, 1262, 1277, 1278, 1263, 1258, 1264, 1265,

     1266, 1267, 1268, 1269, 1279, 1280, 1281, 1270, 1283, 1282,
     1284, 1285, 1286, 1287, 1271, 1288, 1272, 1273, 1289, 1274,
     1275, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
     1348, 1349, 1096, 1350, 1096, 1353, 1351,  824, 1352, 1096,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,

     1364, 1365, 1366, 1367, 1368, 1369, 1348, 1348, 1370, 1371,
     1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
     1383, 1384, 1385, 1400, 1386, 1401, 1402, 1387, 1382, 1388,
     1389, 1390, 1391, 1392, 1393, 1403, 1404, 1405, 1394, 1407,
     1406, 1408, 1409, 1410, 1411, 1395, 1412, 1396, 1397, 1413,
     1398, 1399, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
     1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
     1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,

     1462, 1463, 1464, 1209, 1465, 1466, 1218, 1466, 1218,  959,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1469,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213,  224, 1468, 1470, 1471,  422, 1218, 1472, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490,  224, 1491, 1492, 1480, 1493,
     1494,  422, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1505, 1506, 1513, 1507, 1514, 1515, 1508, 1516,
     1517, 1518, 1519, 1520, 1521, 1522, 1509, 1524, 1523, 1525,

     1526, 1527, 1510, 1511, 1512, 1528, 1529, 1530, 1532, 1533,
     1534, 1531, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1352, 1352, 1096, 1352,
     1589, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1603, 1590, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1623, 1617,

     1624, 1625, 1618, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
     1619, 1634, 1633, 1635, 1636, 1637, 1620, 1621, 1622, 1638,
     1639, 1640, 1642, 1643, 1644, 1641, 1645, 1646, 1647, 1648,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
     1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
     1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
     1689, 1690, 1691, 1693, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467,  224, 1218, 1694, 1695,  422, 1696,
     1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,

     1707, 1708, 1709, 1710, 1711, 1712, 1714, 1715,  224, 1716,
     1717, 1718, 1719, 1720,  422, 1713, 1721, 1722, 1723, 1724,
     1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
     1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
     1745, 1746, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1747,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
     1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
     1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
     1352, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,

     1804, 1805, 1806, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
     1815, 1816, 1807, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
     1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
     1834, 1835, 1836, 1837, 1838, 1839, 1840, 1842, 1843, 1844,
     1845, 1846, 1847, 1848, 1841, 1849, 1850, 1851, 1852, 1853,
     1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
     1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
     1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
     1693, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
     1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,

     1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
     1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
     1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
     1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
     1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
     1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
     1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,

     2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
     2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
     2064, 2063, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
     2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
     2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
     2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,

     2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
     2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2122, 2121,
     2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
     2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2151, 2152, 2148, 2149, 2153,
     2154, 2155, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
     2167, 2168, 2150, 2169, 2170, 2156, 2171, 2172, 2173, 2174,
     2157, 2175, 2158, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
     2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
     2193, 2194, 2195, 2196, 2197, 2198, 2199, 2203, 2204, 2200,

     2201, 2205, 2206, 2207, 2211, 2212, 2213, 2214, 2215, 2216,
     2217, 2218, 2219, 2220, 2202, 2221, 2222, 2208, 2223, 2224,
     2225, 2226, 2209, 2227, 2210, 2228, 2229, 2230, 2231, 2232,
     2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
     2243, 2244, 2245, 2246, 2247, 2248, 2249, 2251, 2252, 2253,
     2254, 2255, 2250, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
     2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272,
     2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282,
     2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292,
     2294, 2295, 2296, 2297, 2298, 2293, 2299, 2300, 2301, 2302,

     2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312,
     2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322,
     2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
     2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,
     2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352,
     2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372,
     2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382,
     2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402,

     2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412,
     2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422,
     2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432,
     2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442,
     2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452,
     2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462,
     2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472,
     2473, 2474, 2476, 2475, 2477, 2478, 2479, 2480, 2481, 2482,
     2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492,
     2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502,

     2503, 2505, 2504, 2506, 2507, 2508, 2509, 2510, 2511, 2512,
     2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522,
     2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532,
     2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542,
     2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552,
     2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562,
     2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572,
     2573, 2574, 2575, 2577, 2576, 2578, 2580, 2579, 2581, 2582,
     2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592,
     2593, 2594, 2595, 2596, 2598, 2597, 2599, 2601, 2600, 2602,

     2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612,
     2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622,
     2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632,
     2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642,
     2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652,
     2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662,
     2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672,
     2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682,
     2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692,
     2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702,

     2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712,
     2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,
     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732,
     2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742,
     2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752,
     2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762,
     2763, 2764, 2765, 2766, 2767, 2768,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  194, 1141,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  197, 1138,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  202, 1137, 1136, 1135,  202,  202,  202,  202,  202,

      202,  202,  206, 1134,  206, 1133,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  311, 1132,  311,
      311, 1131,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  314, 1130,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  316, 1127,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  324, 1126, 1125, 1124,  324,  324,
      324,  324,  324,  324,  324,  333, 1123, 1122, 1121,  333,
      333,  333,  333,  333,  333,  333,  335, 1120, 1117, 1114,

      335, 1113,  335,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  216, 1112,
      216,  216,  216,  423, 1111,  423,  423,  423,  222,  222,
     1110,  222,  222,  431,  431,  431,  431,  555,  555,  555,
      555,  335, 1109, 1108, 1107,  335, 1106,  335,  660,  660,
      660,  660,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  197, 1105,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  665,  665,  665,  665,  426, 1104, 1103,  426,
      426,  667, 1102, 1101,  667,  667,  669, 1100, 1099,  669,

      669,  948,  948,  948,  948, 1098,  948,  953,  563,  824,
      953,  953, 1213,  824, 1088, 1213, 1213, 1692, 1087, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1467, 1086, 1085, 1467, 1467, 1084, 1083, 1082,
     1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1068,
     1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058,
     1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048,
     1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038,
     1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028,
     1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018,

     1017, 1016, 1015, 1014, 1011, 1010, 1009, 1008, 1007, 1006,
     1005, 1004, 1003, 1000,  999,  998,  997,  996,  995,  994,
      993,  990,  987,  986,  985,  984,  983,  982,  981,  980,
      979,  978,  977,  976,  975,  974,  973,  972,  971,  970,
      969,  968,  967,  966,  965,  964,  443,  685,  685,  435,
      674,  674,  944,  943,  940,  939,  938,  937,  936,  935,
      934,  933,  932,  931,  930,  929,  926,  925,  924,  923,
      922,  921,  920,  919,  918,  917,  916,  915,  914,  913,
      912,  911,  910,  909,  908,  907,  906,  905,  904,  903,
      902,  901,  900,  899,  898,  897,  896,  895,  894,  893,

      892,  889,  888,  887,  886,  885,  884,  883,  882,  881,
      880,  879,  878,  864,  859,  851,  850,  845,  844,  841,
      837,  836,  835,  834,  833,  832,  831,  830,  829,  828,
      827,  826,  563,  563,  816,  815,  814,  813,  812,  811,
      810,  809,  808,  807,  806,  805,  804,  803,  802,  801,
      800,  799,  798,  795,  794,  793,  792,  791,  790,  789,
      788,  787,  786,  785,  784,  783,  782,  781,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  764,  763,  762,  761,  758,  757,
      756,  755,  754,  753,  752,  751,  750,  749,  748,  747,

      733,  728,  720,  719,  714,  713,  710,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  690,  689,  688,  687,  443,  443,  435,  435,  663,
      662,  658,  657,  656,  401,  399,  655,  654,  651,  650,
      647,  646,  643,  642,  637,  633,  630,  629,  628,  627,
      626,  625,  624,  623,  620,  619,  618,  617,  616,  612,
      611,  610,  606,  605,  604,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  572,  571,  570,  569,  568,  567,
      566,  332,  554,  553,  552,  551,  550,  323,  319,  544,
      543,  540,  539,  536,  535,  532,  531,  526,  522,  519,

      518,  517,  516,  515,  514,  513,  512,  509,  508,  507,
      506,  505,  501,  500,  499,  495,  494,  493,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  461,  460,  459,
      458,  457,  456,  455,  452,  451,  450,  449,  446,  207,
      445,  444,  420,  419,  415,  414,  405,  404,  403,  402,
      401,  400,  399,  384,  376,  371,  249,  339,  236,  233,
      219,  208,  203,  193,  332,  331,  330,  329,  328,  327,
      326,  325,  323,  322,  319,  313,  312,  294,  286,  281,
      249,  248,  236,  233,  208,  207,  203,  193, 2769,   93,
       93,   91,   91,   35, 2769, 2769, 2769, 2769, 2769, 2769,

     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769
    } ;

static yyconst flex_int16_t yy_chk[3983] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    6,
       11,   11,   13,   12,   12,   42,   17,   14,   18,    5,

        6,   13,   13,   15,    5,    6,   14,   14,   16,   19,
       19,   19,   15,   15,   20,   20,   20,   16,   16,   19,
       25,   38,   26,   49,   20,   46,   38,   50,   82,   25,
       25,   26,   26,   25,   82,   26,   57,   57,   59,   59,
       65,   49,   65,   50,   50,   42,   11,   51,   46,   12,
       17,   51,   18,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   19,   60,   68,   81,   66,   20,   60,
       66,   81,  866,   83,   11,   68,   11,   12,   83,   12,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   27,   27,   27,   28,
       28,   28,   29,   29,   29,  867,   43,   27,   73,   72,
       28,   95,   29,   30,   30,   30,   52,   72,   73,   77,
       85,   52,   77,   30,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   69,   52,   69,  151,   67,  151,

      139,  132,  868,   75,  139,   67,   69,   75,   61,   67,
       27,   70,   67,   28,   70,   76,   29,   70,  110,   29,
       70,   79,   79,   75,  132,   76,   29,   30,  110,   80,
       30,  138,   80,   79,   85,   43,   79,   30,  869,   43,
      870,   29,   80,  141,  144,  144,   29,  138,  138,   80,
      146,  146,   30,  136,  167,   95,   61,   30,   53,  167,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       61,  136,  141,  152,  147,  142,  152,  154,   61,  297,
       53,   53,  142,   61,   61,   53,   61,  154,  153,  158,
      159,  155,   53,  155,   53,  153,  297,  158,  142,  153,

      159,  142,  153,  155,   53,   53,  156,  170,   53,  156,
      142,   53,  156,  163,  194,  156,  163,  161,  206,  168,
       53,  161,  147,   53,   54,  168,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  147,  161,  162,  221,
      169,  165,  165,  226,  147,  169,   54,   54,  162,  147,
      147,   54,  147,  165,  306,  191,  165,  306,   54,  166,
      191,  170,  166,  206,  194,  239,  226,  243,  221,  226,
       54,   54,  166,  272,   54,  250,  272,   54,  243,  166,
      216,  216,  272,  250,  222,  216,   54,   64,   64,   64,
      268,  268,  283,   64,  432,   64,  871,   64,  432,  192,

      283,   64,   64,  292,  216,  216,  222,  222,  296,  292,
       64,  216,  872,   64,   64,  239,   64,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  296,  300,   64,
      222,  222,   64,  150,  150,  150,  276,  300,  317,  150,
      231,  150,  294,  150,  340,  220,  220,  150,  150,  276,
      220,  225,  340,  276,  294,  294,  150,  230,  225,  150,
      150,  303,  150,  231,  230,  873,  231,  874,  192,  220,
      220,  303,  192,  358,  358,  150,  220,  225,  150,  196,
      228,  337,  228,  230,  196,  228,  225,  228,  366,  875,
      384,  198,  230,  196,  196,  196,  196,  196,  196,  196,

      196,  366,  384,  384,  337,  366,  386,  337,  196,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  232,
      320,  232,  317,  373,  232,  386,  232,  387,  326,  196,
      320,  373,  362,  196,  196,  362,  382,  196,  196,  733,
      326,  362,  382,  326,  387,  393,  196,  326,  241,  326,
      196,  876,  196,  390,  196,  393,  196,  733,  396,  440,
      198,  396,  390,  440,  198,  199,  199,  199,  223,  427,
      223,  436,  877,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  338,  878,  338,  241,  427,  338,  436,

      338,  408,  408,  409,  409,  409,  430,  335,  430,  864,
      241,  430,  714,  430,  335,  411,  411,  429,  241,  199,
      207,  336,  438,  241,  241,  207,  241,  864,  336,  714,
      335,  413,  413,  335,  207,  207,  207,  207,  207,  207,
      207,  207,  335,  429,  406,  465,  450,  336,  438,  207,
      450,  558,  465,  465,  408,  467,  336,  409,  406,  406,
      406,  406,  406,  406,  406,  406,  467,  474,  411,  481,
      207,  474,  426,  879,  207,  207,  426,  558,  207,  207,
      534,  439,  479,  439,  413,  880,  439,  207,  439,  480,
      534,  207,  479,  207,  406,  207,  426,  207,  258,  479,

      258,  417,  426,  480,  495,  495,  258,  481,  578,  881,
      417,  417,  417,  417,  417,  417,  417,  417,  591,  578,
      481,  882,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  560,  591,  258,  885,  560,  258,  258,  556,  258,
      258,  258,  645,  258,  258,  348,  417,  348,  476,  421,
      887,  421,  645,  348,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  889,  476,  556,  476,  476,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  585,  890,
      348,  671,  585,  348,  348,  671,  348,  348,  348,  891,
      348,  348,  412,  412,  412,  470,  423,  423,  606,  606,

      559,  423,  559,  470,  682,  559,  470,  559,  682,  470,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      423,  423,  587,  424,  892,  424,  893,  423,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  431,  587,
      894,  587,  587,  592,  712,  712,  412,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  821,  843,  843,
      478,  821,  473,  667,  478,  431,  478,  667,  431,  473,
      473,  478,  431,  478,  473,  473,  555,  576,  581,  895,
      590,  592,  898,  555,  576,  576,  581,  667,  431,  581,
      590,  431,  581,  667,  592,  431,  584,  590,  845,  555,

      431,  589,  555,  584,  584,  589,  659,  589,  584,  584,
      723,  555,  589,  899,  589,  845,  900,  901,  723,  664,
      659,  659,  659,  659,  659,  659,  659,  659,  664,  664,
      664,  664,  664,  664,  664,  664,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  659,  660,  675,  902,
      676,  679,  903,  679,  664,  905,  679,  676,  679,  906,
      678,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  908,  818,  909,  910,  675,  676,  660,  660,  660,
      660,  660,  660,  678,  669,  676,  678,  687,  669,  911,

      912,  854,  913,  914,  687,  818,  687,  660,  818,  854,
      915,  660,  660,  660,  660,  660,  660,  665,  669,  916,
      917,  918,  919,  920,  669,  921,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  922,  923,  924,  925,
      927,  928,  665,  665,  665,  665,  665,  665,  798,  819,
      929,  819,  930,  798,  819,  929,  819,  931,  798,  798,
      929,  929,  665,  932,  933,  935,  665,  665,  665,  665,
      665,  665,  677,  936,  677,  937,  938,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  817,  940,  941,
      944,  945,  947,  948,  817,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  943,  950,  954,  956,  955,
      957,  955,  956,  817,  955,  958,  955,  960,  961,  963,
      948,  964,  817,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  954,  950,  949,  945,  949,  965,  941,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      962,  953,  966,  962,  967,  953,  968,  969,  971,  972,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  943,  953,  988,  989,  990,  991,
      992,  953,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1005, 1002, 1006, 1007, 1002,  999, 1002, 1004,

     1004, 1004, 1004, 1004, 1008, 1009, 1010, 1004, 1011, 1010,
     1012, 1013, 1014, 1016, 1004, 1017, 1004, 1004, 1018, 1004,
     1004, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1069, 1070, 1071, 1072, 1074, 1076, 1077, 1078,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
     1091, 1092, 1094, 1092, 1095, 1093, 1092, 1097, 1092, 1093,
     1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,

     1109, 1110, 1111, 1112, 1113, 1114, 1091, 1089, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1132, 1129, 1133, 1134, 1129, 1126, 1129,
     1131, 1131, 1131, 1131, 1131, 1135, 1136, 1137, 1131, 1138,
     1137, 1139, 1140, 1141, 1143, 1131, 1144, 1131, 1131, 1145,
     1131, 1131, 1146, 1148, 1149, 1150, 1152, 1153, 1154, 1155,
     1156, 1157, 1158, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1173, 1174, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1203, 1204,

     1205, 1207, 1208, 1209, 1210, 1211, 1216, 1211, 1217, 1219,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1220, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1213, 1215, 1221, 1222, 1213, 1215, 1223, 1224, 1225,
     1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1213, 1241, 1242, 1230, 1243,
     1244, 1213, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1256, 1258, 1259, 1256, 1260,
     1261, 1262, 1263, 1265, 1266, 1267, 1256, 1268, 1267, 1269,

     1269, 1270, 1256, 1256, 1256, 1271, 1272, 1273, 1274, 1275,
     1276, 1273, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1308, 1310, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1321, 1322, 1326, 1329,
     1330, 1331, 1333, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
     1342, 1343, 1344, 1346, 1347, 1349, 1350, 1351, 1353, 1349,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1354, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1380,

     1382, 1383, 1380, 1384, 1385, 1386, 1387, 1389, 1390, 1391,
     1380, 1392, 1391, 1393, 1393, 1394, 1380, 1380, 1380, 1395,
     1396, 1397, 1398, 1399, 1400, 1397, 1401, 1402, 1403, 1404,
     1405, 1406, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
     1416, 1417, 1419, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
     1428, 1432, 1434, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1445, 1446, 1450, 1453, 1454, 1455, 1457, 1459, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1467, 1468, 1469, 1470, 1467, 1472,
     1473, 1476, 1477, 1478, 1479, 1480, 1482, 1483, 1484, 1485,

     1486, 1487, 1488, 1489, 1490, 1491, 1493, 1494, 1467, 1495,
     1496, 1497, 1498, 1499, 1467, 1491, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
     1514, 1515, 1516, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1536, 1528,
     1537, 1538, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
     1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1560, 1563, 1565, 1566, 1568, 1569, 1570, 1571, 1572, 1573,
     1575, 1576, 1578, 1580, 1581, 1582, 1583, 1584, 1586, 1587,
     1588, 1589, 1590, 1592, 1593, 1594, 1595, 1596, 1597, 1598,

     1599, 1600, 1601, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1611, 1601, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
     1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1630, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
     1642, 1643, 1644, 1646, 1638, 1647, 1648, 1651, 1652, 1653,
     1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
     1664, 1665, 1666, 1667, 1668, 1670, 1673, 1675, 1676, 1678,
     1679, 1680, 1681, 1682, 1683, 1685, 1686, 1688, 1690, 1691,
     1693, 1694, 1696, 1698, 1699, 1700, 1705, 1706, 1707, 1708,
     1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,

     1719, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1737, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1758, 1759, 1761, 1762, 1764, 1765, 1766,
     1767, 1768, 1769, 1771, 1772, 1776, 1779, 1782, 1784, 1788,
     1790, 1791, 1792, 1793, 1794, 1799, 1800, 1801, 1802, 1803,
     1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
     1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1831, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1839, 1841, 1842, 1843, 1844, 1845, 1846,

     1847, 1848, 1852, 1853, 1855, 1856, 1858, 1859, 1860, 1861,
     1862, 1863, 1865, 1866, 1870, 1873, 1876, 1878, 1882, 1884,
     1885, 1886, 1887, 1888, 1889, 1891, 1892, 1893, 1894, 1895,
     1896, 1897, 1898, 1899, 1901, 1903, 1904, 1905, 1907, 1908,
     1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
     1919, 1920, 1921, 1922, 1923, 1924, 1925, 1927, 1928, 1929,
     1930, 1929, 1931, 1932, 1933, 1935, 1936, 1937, 1939, 1940,
     1941, 1942, 1943, 1946, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1957, 1958, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
     1967, 1968, 1970, 1972, 1973, 1974, 1976, 1977, 1978, 1979,

     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
     1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 1998,
     2000, 2001, 2002, 2004, 2005, 2006, 2008, 2009, 2010, 2011,
     2012, 2015, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
     2028, 2029, 2030, 2031, 2031, 2032, 2033, 2031, 2031, 2034,
     2035, 2036, 2037, 2039, 2042, 2043, 2044, 2046, 2047, 2048,
     2049, 2050, 2031, 2051, 2052, 2036, 2054, 2055, 2057, 2058,
     2036, 2060, 2036, 2061, 2062, 2063, 2064, 2065, 2067, 2068,
     2071, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2081, 2082,
     2083, 2084, 2086, 2087, 2088, 2089, 2089, 2090, 2091, 2089,

     2089, 2092, 2093, 2094, 2095, 2097, 2100, 2101, 2102, 2104,
     2105, 2106, 2107, 2108, 2089, 2109, 2110, 2094, 2112, 2113,
     2115, 2116, 2094, 2118, 2094, 2119, 2120, 2121, 2122, 2123,
     2125, 2126, 2129, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2141, 2142, 2143, 2144, 2146, 2147, 2148, 2149, 2150,
     2154, 2155, 2147, 2156, 2157, 2158, 2160, 2161, 2162, 2163,
     2164, 2165, 2166, 2167, 2168, 2170, 2171, 2172, 2173, 2174,
     2175, 2176, 2177, 2178, 2180, 2181, 2182, 2183, 2184, 2185,
     2187, 2188, 2189, 2191, 2192, 2193, 2195, 2196, 2198, 2199,
     2200, 2201, 2202, 2206, 2207, 2199, 2208, 2209, 2210, 2212,

     2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2222, 2223,
     2224, 2225, 2226, 2227, 2228, 2229, 2230, 2232, 2233, 2234,
     2235, 2236, 2237, 2239, 2240, 2241, 2242, 2243, 2245, 2246,
     2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256,
     2257, 2258, 2259, 2260, 2263, 2264, 2265, 2266, 2267, 2268,
     2269, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2280,
     2281, 2283, 2284, 2286, 2287, 2288, 2289, 2290, 2291, 2292,
     2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302,
     2303, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2314, 2315,
     2316, 2317, 2318, 2319, 2320, 2321, 2323, 2324, 2326, 2327,

     2330, 2331, 2332, 2334, 2335, 2336, 2337, 2338, 2339, 2341,
     2342, 2343, 2344, 2347, 2348, 2349, 2350, 2351, 2352, 2354,
     2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2366,
     2367, 2368, 2369, 2371, 2372, 2373, 2374, 2375, 2376, 2378,
     2379, 2380, 2381, 2384, 2385, 2386, 2387, 2388, 2389, 2391,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2403,
     2404, 2406, 2407, 2409, 2410, 2411, 2412, 2413, 2414, 2415,
     2416, 2417, 2418, 2417, 2418, 2418, 2419, 2420, 2421, 2422,
     2423, 2424, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434,
     2436, 2437, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446,

     2447, 2448, 2447, 2448, 2448, 2449, 2450, 2451, 2452, 2453,
     2454, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465,
     2466, 2467, 2468, 2469, 2470, 2471, 2472, 2474, 2475, 2476,
     2477, 2478, 2479, 2480, 2482, 2483, 2484, 2485, 2486, 2487,
     2490, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500,
     2501, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2511, 2512,
     2513, 2514, 2515, 2516, 2520, 2521, 2522, 2525, 2526, 2527,
     2528, 2530, 2531, 2532, 2531, 2533, 2534, 2533, 2535, 2536,
     2537, 2538, 2540, 2542, 2543, 2544, 2545, 2546, 2549, 2550,
     2551, 2552, 2554, 2555, 2556, 2555, 2557, 2558, 2557, 2559,

     2560, 2561, 2562, 2564, 2566, 2567, 2568, 2569, 2570, 2572,
     2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582,
     2583, 2584, 2585, 2587, 2589, 2590, 2591, 2593, 2594, 2595,
     2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605,
     2606, 2608, 2610, 2611, 2613, 2614, 2615, 2617, 2618, 2620,
     2621, 2622, 2623, 2624, 2625, 2626, 2628, 2629, 2631, 2632,
     2633, 2635, 2636, 2638, 2639, 2640, 2641, 2642, 2643, 2644,
     2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2656,
     2657, 2658, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667,
     2668, 2670, 2671, 2672, 2673, 2674, 2676, 2678, 2679, 2680,

     2681, 2683, 2684, 2685, 2686, 2688, 2690, 2691, 2692, 2693,
     2695, 2696, 2697, 2698, 2699, 2700, 2701, 2703, 2704, 2706,
     2707, 2708, 2709, 2710, 2712, 2713, 2714, 2716, 2717, 2718,
     2719, 2720, 2721, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
     2730, 2731, 2732, 2733, 2734, 2736, 2737, 2738, 2739, 2740,
     2742, 2743, 2744, 2745, 2748, 2749, 2750, 2753, 2754, 2757,
     2760, 2761, 2762, 2763, 2764, 2765, 2770, 2770, 2770, 2770,
     2770, 2770, 2770, 2770, 2770, 2770, 2770, 2770, 2770, 2770,
     2770, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771,
     2771, 2771, 2771, 2771, 2771, 2771, 2772, 2772, 2772, 2772,

     2772, 2772, 2772, 2772, 2772, 2772, 2772, 2772, 2772, 2772,
     2772, 2773, 2773, 2773, 2773, 2773, 2773, 2773, 2773, 2773,
     2773, 2773, 2773, 2773, 2773, 2773, 2774, 2774, 2774, 2774,
     2774, 2774, 2774, 2774, 2774, 2774, 2774, 2774, 2774, 2774,
     2774, 2775, 2775, 2775, 2775, 2775, 2775, 2775, 2775, 2775,
     2775, 2775, 2775, 2775, 2775, 2775, 2776, 2776, 2776, 2776,
     2776, 2776, 2776, 2776, 2776, 2776, 2776, 2776, 2776, 2776,
     2776, 2777, 2777, 2777, 2777, 2777, 2777, 2777, 2777, 2777,
     2777, 2777, 2777, 2777, 2777, 2777, 2778, 2778, 2778, 2778,
     2778, 2778, 2778, 2778, 2778, 2778, 2778, 2778, 2778, 2778,

     2778, 2779, 2779, 2779, 2779, 2779, 2779, 2779, 2779, 2779,
     2779, 2779, 2779, 2779, 2779, 2779, 2780, 2780, 2780, 2780,
     2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780,
     2780, 2781, 2781, 2781, 2781, 2781, 2781, 2781, 2781, 2781,
     2781, 2781, 2781, 2781, 2781, 2781, 2782, 2782, 2782, 2782,
     2782, 2782, 2782, 2782, 2782, 2782, 2782, 2782, 2782, 2782,
     2782, 2783,  865, 2783, 2783, 2783, 2783, 2783, 2783, 2783,
     2783, 2783, 2783, 2783, 2783, 2783, 2784,  863, 2784, 2784,
     2784, 2784, 2784, 2784, 2784, 2784, 2784, 2784, 2784, 2784,
     2784, 2785,  862,  861,  860, 2785, 2785, 2785, 2785, 2785,

     2785, 2785, 2786,  859, 2786,  858, 2786, 2786, 2786, 2786,
     2786, 2786, 2786, 2786, 2786, 2786, 2786, 2787,  857, 2787,
     2787,  856, 2787, 2787, 2787, 2787, 2787, 2787, 2787, 2787,
     2787, 2787, 2788,  855, 2788, 2788, 2788, 2788, 2788, 2788,
     2788, 2788, 2788, 2788, 2788, 2788, 2788, 2789, 2789, 2789,
     2789, 2789, 2789, 2789, 2789, 2789, 2789, 2789, 2789, 2789,
     2789, 2790,  853, 2790, 2790, 2790, 2790, 2790, 2790, 2790,
     2790, 2790, 2790, 2790, 2791,  852,  851,  850, 2791, 2791,
     2791, 2791, 2791, 2791, 2791, 2792,  849,  848,  847, 2792,
     2792, 2792, 2792, 2792, 2792, 2792, 2793,  846,  844,  842,

     2793,  841, 2793, 2794, 2794, 2794, 2794, 2794, 2794, 2794,
     2794, 2794, 2794, 2794, 2794, 2794, 2794, 2794, 2795,  840,
     2795, 2795, 2795, 2796,  839, 2796, 2796, 2796, 2797, 2797,
      838, 2797, 2797, 2798, 2798, 2798, 2798, 2799, 2799, 2799,
     2799, 2800,  837,  836,  835, 2800,  834, 2800, 2801, 2801,
     2801, 2801, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
     2802, 2802, 2802, 2802, 2802, 2802, 2802, 2803,  833, 2803,
     2803, 2803, 2803, 2803, 2803, 2803, 2803, 2803, 2803, 2803,
     2803, 2803, 2804, 2804, 2804, 2804, 2805,  832,  831, 2805,
     2805, 2806,  830,  829, 2806, 2806, 2807,  828,  827, 2807,

     2807, 2808, 2808, 2808, 2808,  826, 2808, 2809,  825,  823,
     2809, 2809, 2810,  822,  816, 2810, 2810, 2811,  815, 2811,
     2811, 2811, 2811, 2811, 2811, 2811, 2811, 2811, 2811, 2811,
     2811, 2811, 2812,  814,  812, 2812, 2812,  811,  810,  809,
      808,  807,  806,  805,  804,  802,  801,  800,  799,  797,
      796,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  775,
      774,  772,  771,  770,  769,  768,  767,  764,  763,  762,
      761,  760,  759,  758,  756,  754,  751,  750,  749,  748,
      747,  746,  745,  744,  743,  742,  741,  740,  739,  738,

      737,  736,  735,  734,  732,  731,  730,  729,  728,  727,
      726,  725,  724,  722,  721,  720,  719,  718,  717,  716,
      715,  713,  711,  710,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  692,  691,  690,  689,  688,  686,  684,  683,  680,
      673,  672,  663,  662,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  626,  625,  624,  623,  621,  620,  619,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,

      607,  605,  604,  603,  602,  601,  600,  599,  597,  596,
      595,  594,  593,  588,  586,  583,  582,  580,  579,  577,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  562,  561,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      515,  514,  513,  512,  510,  509,  508,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  494,  493,
      492,  491,  490,  489,  488,  486,  485,  484,  483,  482,

      477,  475,  472,  471,  469,  468,  466,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  449,  448,  447,  446,  442,  441,  434,  433,  415,
      414,  405,  404,  403,  401,  399,  398,  397,  395,  394,
      392,  391,  389,  388,  385,  383,  381,  380,  379,  378,
      377,  376,  375,  374,  371,  370,  369,  368,  367,  365,
      364,  363,  361,  360,  359,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  347,  346,  345,  344,  343,  342,
      341,  332,  331,  330,  329,  328,  327,  323,  319,  308,
      307,  305,  304,  302,  301,  299,  298,  295,  293,  291,

      290,  289,  288,  287,  286,  285,  284,  281,  280,  279,
      278,  277,  275,  274,  273,  271,  270,  269,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  257,  256,  255,
      254,  253,  252,  251,  247,  246,  245,  244,  242,  240,
      238,  234,  215,  213,  201,  200,  189,  188,  187,  186,
      182,  180,  176,  164,  160,  157,  149,  148,  145,  143,
      140,  135,  131,  129,  126,  124,  123,  122,  121,  120,
      119,  118,  113,  111,  107,   89,   88,   78,   74,   71,
       63,   62,   58,   55,   48,   47,   45,   41,   35,   10,
        9,    8,    7, 2769, 2769, 2769, 2769, 2769, 2769, 2769,

     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769, 2769,
     2769, 2769
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyansi_c_flex_debug;
int yyansi_c_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyansi_ctext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*
 * This scanner is based on:
 *
 * cpp5.l, a C/C++ scanner written by James A. Roskind.
 * "Portions Copyright (c) 1989, 1990 James A. Roskind".
 * (http://www.idiom.com/free-compilers/,
 * ftp://ftp.infoseek.com/ftp/pub/c++grammar/,
 * ftp://ftp.sra.co.jp/.a/pub/cmd/c++grammar2.0.tar.gz)
 */

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER ansi_c_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "ansi_c_parser.h"
#include "y.tab.h"

#define loc() \
  { newstack(yyansi_clval); PARSER.set_location(stack(yyansi_clval)); }

int make_identifier()
{
  loc();

  std::string base_name(yyansi_ctext);
  std::string identifier(base_name);

  // figure out if this is a typedef or something else
  ansi_c_id_classt result=
    PARSER.lookup(identifier, PARSER.tag_following, false);

  PARSER.tag_following=false;

  stack(yyansi_clval).id(ID_symbol);
  stack(yyansi_clval).set(ID_C_base_name, base_name);
  stack(yyansi_clval).set(ID_identifier, identifier);
  stack(yyansi_clval).set(ID_C_id_class, result);

  if(result==ANSI_C_TYPEDEF)
    return TOK_TYPEDEFNAME;
  else
    return TOK_IDENTIFIER;
}

int MSC_Keyword(int token)
{
  if(PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    PARSER.tag_following=false;
    return token;
  }
  else
    return make_identifier();
}

int cpp_keyword(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int MSC_cpp_keyword(int token)
{
  if(PARSER.cpp && PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int cpp_operator(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
  {
    yyansi_cerror("C++ operator not allowed in C mode");
    return TOK_SCANNER_ERROR;
  }
}

/*** macros for easier rule definition **********************************/
















#line 203 "scanner.l"
void ansi_c_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 2407 "lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT1 2
#define COMMENT2 3
#define ASM_BLOCK 4
#define MSC_ASM 5
#define MSC_DECLSPEC 6
#define MSC_PRAGMA 7
#define MSC_ANNOTATION 8
#define GCC_ATTRIBUTE1 9
#define GCC_ATTRIBUTE2 10
#define GCC_ATTRIBUTE3 11
#define GCC_ATTRIBUTE4 12
#define GCC_ATTRIBUTE5 13
#define GCC_ASM 14
#define GCC_ASM_VOLATILE 15
#define GCC_ASM_PAREN 16

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyansi_clex_destroy (void );

int yyansi_cget_debug (void );

void yyansi_cset_debug (int debug_flag  );

YY_EXTRA_TYPE yyansi_cget_extra (void );

void yyansi_cset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyansi_cget_in (void );

void yyansi_cset_in  (FILE * in_str  );

FILE *yyansi_cget_out (void );

void yyansi_cset_out  (FILE * out_str  );

int yyansi_cget_leng (void );

char *yyansi_cget_text (void );

int yyansi_cget_lineno (void );

void yyansi_cset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyansi_cwrap (void );
#else
extern int yyansi_cwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yyansi_ctext, yyansi_cleng, 1, yyansi_cout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyansi_cin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyansi_cin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyansi_cin))==0 && ferror(yyansi_cin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyansi_cin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyansi_clex (void);

#define YY_DECL int yyansi_clex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyansi_ctext and yyansi_cleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 210 "scanner.l"


#line 2606 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyansi_cin )
			yyansi_cin = stdin;

		if ( ! yyansi_cout )
			yyansi_cout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyansi_censure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
		}

		yyansi_c_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyansi_ctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2770 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3894 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 212 "scanner.l"
{ BEGIN(GRAMMAR);
		  yyless(0);		/* start again with this character */
		  //yy_current_buffer->yy_at_bol = 1; /* at beginning of line */
		  switch(PARSER.grammar)
		   {
                   case ansi_c_parsert::EXPRESSION: return TOK_PARSE_EXPRESSION;
                   case ansi_c_parsert::LANGUAGE: return TOK_PARSE_LANGUAGE;
		   default: assert(0);
		   }
		 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 223 "scanner.l"
{ BEGIN(COMMENT1); } /* begin C comment state */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 226 "scanner.l"
{ BEGIN(GRAMMAR); } /* end comment state, back GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 227 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 228 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 229 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 230 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 231 "scanner.l"
{ }
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 234 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 237 "scanner.l"
{ BEGIN(GRAMMAR); }	/* end comment state, back GRAMMAR */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 238 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 241 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_character_literal(yyansi_ctext, true);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_CHARACTER;
                }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 248 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_string_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_STRING;
                }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 255 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 256 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 258 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER.line_no, PARSER.filename);
                  PARSER.line_no--;
		 }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 262 "scanner.l"
{
                  #if 0
		  TmpString.form(
			"'pragma' directive found:" GL_WARN_MSG_NEWLINE
			"%s" GL_WARN_MSG_NEWLINE
			"Directive ignored",
			&PRS_text[0]);
		  PRS_PrintWarning(GL_WARN_INFORMATIVE, TmpString.chars());
		  TmpString = "";
                  #endif
		 }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 273 "scanner.l"
{
		  yyansi_cerror("Preprocessor directive found");
		  return TOK_SCANNER_ERROR;
		 }
	YY_BREAK

/*** keywords ***/


case 18:
YY_RULE_SETUP
#line 283 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 284 "scanner.l"
{ loc(); return TOK_BOOL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 285 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 286 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 287 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 288 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 289 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 290 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 291 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 292 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 293 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 294 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 295 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_ENUM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 296 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 297 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 298 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 299 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 300 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 301 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 302 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 303 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 304 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 305 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 306 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 307 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 308 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 309 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 310 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 311 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_STRUCT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 312 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 313 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 314 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_UNION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 315 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 316 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 317 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 318 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 320 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_FLOAT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 326 "scanner.l"
{ return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 327 "scanner.l"
{ return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 328 "scanner.l"
{ return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 330 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM ||
                     PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_INT64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 337 "scanner.l"
{ return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 338 "scanner.l"
{ return MSC_Keyword(TOK_PTR64); }
	YY_BREAK

/*
"__stdcall"     { return MSC_Keyword(TOK_STDCALL); }
"__fastcall"    { return MSC_Keyword(TOK_FASTCALL); }
"__clrcall"     { return MSC_Keyword(TOK_CLRCALL); }
*/

case 61:
YY_RULE_SETUP
#line 348 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_COMPLEX; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 355 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_REAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 362 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAG; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* note: "wchar_t" should be in the list above, but it is left out */
/*       because it is a 'typedef' in some standard header files   */

case 64:
YY_RULE_SETUP
#line 374 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_CW_VAR_ARG_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 380 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_BUILTIN_VA_ARG; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 66:
#line 388 "scanner.l"
case 67:
#line 389 "scanner.l"
case 68:
YY_RULE_SETUP
#line 389 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_OFFSETOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 396 "scanner.l"
{
                  if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_BUILTIN_TYPES_COMPATIBLE_P; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 404 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 411 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 417 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                         PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 424 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else
                    BEGIN(GCC_ASM);
                }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 434 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 441 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK

/* C++ Keywords and Operators */

case 76:
YY_RULE_SETUP
#line 453 "scanner.l"
{ return cpp_keyword(TOK_BOOL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 454 "scanner.l"
{ return cpp_keyword(TOK_CATCH); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 455 "scanner.l"
{ return cpp_keyword(TOK_CLASS); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 456 "scanner.l"
{ return cpp_keyword(TOK_CONSTEXPR); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 457 "scanner.l"
{ return cpp_keyword(TOK_DELETE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 458 "scanner.l"
{ return cpp_keyword(TOK_DECLTYPE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 459 "scanner.l"
{ return cpp_keyword(TOK_EXPLICIT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 460 "scanner.l"
{ return cpp_keyword(TOK_FRIEND); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 461 "scanner.l"
{ return cpp_keyword(TOK_MUTABLE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 462 "scanner.l"
{ return cpp_keyword(TOK_NAMESPACE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 463 "scanner.l"
{ return cpp_keyword(TOK_NEW); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 464 "scanner.l"
{ return cpp_keyword(TOK_NULLPTR); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 465 "scanner.l"
{ return cpp_keyword(TOK_OPERATOR); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 466 "scanner.l"
{ return cpp_keyword(TOK_PRIVATE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 467 "scanner.l"
{ return cpp_keyword(TOK_PROTECTED); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 468 "scanner.l"
{ return cpp_keyword(TOK_PUBLIC); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 469 "scanner.l"
{ return cpp_keyword(TOK_STATIC_ASSERT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 470 "scanner.l"
{ return cpp_keyword(TOK_TEMPLATE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 471 "scanner.l"
{ return cpp_keyword(TOK_THIS); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 472 "scanner.l"
{ return cpp_keyword(TOK_THREAD_LOCAL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 473 "scanner.l"
{ return cpp_keyword(TOK_THROW); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 474 "scanner.l"
{ return cpp_keyword(TOK_TYPEID); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 475 "scanner.l"
{ return cpp_keyword(TOK_TYPENAME); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 476 "scanner.l"
{ return cpp_keyword(TOK_USING); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 477 "scanner.l"
{ return cpp_keyword(TOK_VIRTUAL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 478 "scanner.l"
{ // CodeWarrior doesn't have wchar_t built in
                      if(PARSER.mode==ansi_c_parsert::CW)
                        return make_identifier();
                      else
                        return cpp_keyword(TOK_WCHAR_T);
                    }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 484 "scanner.l"
{ return cpp_operator(TOK_DOTPM); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 485 "scanner.l"
{ return cpp_operator(TOK_ARROWPM); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 486 "scanner.l"
{ if(PARSER.cpp)
                        return cpp_operator(TOK_SCOPE);
                      else
                      {
                        yyless(1); // puts all but one : back into stream
                        loc();
                        PARSER.tag_following=false;
                        return ':';
                      }
                    }
	YY_BREAK

/* a huge batch of MS C++ extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 105:
YY_RULE_SETUP
#line 502 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 503 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 504 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 505 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 506 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 507 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 508 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 509 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 510 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 511 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 512 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 513 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 514 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 515 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 516 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 517 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 518 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 519 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 520 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 521 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 522 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 523 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 524 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 525 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 526 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 527 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 528 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 529 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 531 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 532 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 135:
#line 535 "scanner.l"
case 136:
#line 536 "scanner.l"
case 137:
#line 537 "scanner.l"
case 138:
#line 538 "scanner.l"
case 139:
#line 539 "scanner.l"
case 140:
#line 540 "scanner.l"
case 141:
#line 541 "scanner.l"
case 142:
#line 542 "scanner.l"
case 143:
#line 543 "scanner.l"
case 144:
#line 544 "scanner.l"
case 145:
YY_RULE_SETUP
#line 544 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
	             BEGIN(MSC_ANNOTATION);
                   else
	           {
	             yyless(1); // puts all but [ back into stream
	             loc();
	             PARSER.tag_following=false;
	             return yyansi_ctext[0]; // returns the [
	           }
                 }
	YY_BREAK
case 146:
#line 556 "scanner.l"
case 147:
YY_RULE_SETUP
#line 556 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 567 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    BEGIN(MSC_PRAGMA);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 149:
#line 577 "scanner.l"
case 150:
YY_RULE_SETUP
#line 577 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ATTRIBUTE1);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 585 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 586 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 588 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 590 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 592 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 593 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 594 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 595 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 596 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 597 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 598 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 599 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 601 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 602 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 604 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 605 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 607 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 608 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 610 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 619 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 629 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 639 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 648 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 657 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 666 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 675 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 684 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 693 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 703 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 713 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 723 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 733 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 742 "scanner.l"
{ if(PARSER.cpp ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 751 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 759 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 761 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 767 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 768 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 770 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_LABEL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 777 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 783 "scanner.l"
{ if(PARSER.cpp) // C++?
                    { loc(); return TOK_TRY; }
                  else if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_TRY; }                    
                  else
                    return make_identifier();
                }
	YY_BREAK
case 192:
#line 792 "scanner.l"
case 193:
YY_RULE_SETUP
#line 792 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_FINALLY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 194:
#line 799 "scanner.l"
case 195:
YY_RULE_SETUP
#line 799 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_EXCEPT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 196:
#line 806 "scanner.l"
case 197:
YY_RULE_SETUP
#line 806 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_LEAVE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 812 "scanner.l"
{ loc(); return TOK_FORALL; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 813 "scanner.l"
{ loc(); return TOK_EXISTS; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 814 "scanner.l"
{ loc(); return TOK_ARRAY_OF; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 815 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 816 "scanner.l"
{ loc(); return TOK_CPROVER_BITVECTOR; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 817 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 819 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 205:
YY_RULE_SETUP
#line 828 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNAS; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 206:
YY_RULE_SETUP
#line 837 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 207:
YY_RULE_SETUP
#line 846 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ATOMIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 208:
YY_RULE_SETUP
#line 855 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GENERIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 209:
YY_RULE_SETUP
#line 864 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAGINARY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 210:
YY_RULE_SETUP
#line 873 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_NORETURN; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 211:
YY_RULE_SETUP
#line 882 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_STATIC_ASSERT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 212:
YY_RULE_SETUP
#line 891 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* operators following */

case 213:
YY_RULE_SETUP
#line 903 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 904 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 905 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 906 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 907 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 908 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 909 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 910 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 911 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 912 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 913 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 914 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 916 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 917 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 918 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 919 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 920 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 921 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 922 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 923 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 924 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 925 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK


case 235:
YY_RULE_SETUP
#line 930 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 236:
#line 933 "scanner.l"
case 237:
#line 934 "scanner.l"
case 238:
#line 935 "scanner.l"
case 239:
#line 936 "scanner.l"
case 240:
#line 937 "scanner.l"
case 241:
#line 938 "scanner.l"
case 242:
#line 939 "scanner.l"
case 243:
YY_RULE_SETUP
#line 939 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 10);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 244:
#line 946 "scanner.l"
case 245:
#line 947 "scanner.l"
case 246:
#line 948 "scanner.l"
case 247:
#line 949 "scanner.l"
case 248:
#line 950 "scanner.l"
case 249:
#line 951 "scanner.l"
case 250:
#line 952 "scanner.l"
case 251:
YY_RULE_SETUP
#line 952 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 8);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 252:
#line 959 "scanner.l"
case 253:
#line 960 "scanner.l"
case 254:
#line 961 "scanner.l"
case 255:
#line 962 "scanner.l"
case 256:
#line 963 "scanner.l"
case 257:
#line 964 "scanner.l"
case 258:
#line 965 "scanner.l"
case 259:
YY_RULE_SETUP
#line 965 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 16);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 971 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 976 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 981 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 987 "scanner.l"
{ 
                  PARSER.tag_following=false;
                  if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 994 "scanner.l"
{ PARSER.asm_block_following=false;
                  PARSER.tag_following=false;
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
/* This catches all one-character operators */
case 265:
YY_RULE_SETUP
#line 1001 "scanner.l"
{ loc(); PARSER.tag_following=false; return yyansi_ctext[0]; }
	YY_BREAK

case 266:
YY_RULE_SETUP
#line 1004 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1005 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 1007 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 1008 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  BEGIN(GRAMMAR);
                  return TOK_ASM_STRING;
                }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 1015 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1019 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(GRAMMAR); loc(); return '}'; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1022 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1025 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1026 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1028 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1031 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1032 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
/* The following ugly stuff avoids two-token lookahead in the parser;
     e.g., asm void f()  vs.  asm ("xyz") or asm { ... } */

case 278:
YY_RULE_SETUP
#line 1037 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 1038 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1039 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1040 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1041 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1042 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1043 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1044 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM; }
	YY_BREAK


case 286:
YY_RULE_SETUP
#line 1048 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE2); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1049 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 1050 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1051 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute is following -- these may be keywords!
case 290:
#line 1057 "scanner.l"
case 291:
YY_RULE_SETUP
#line 1057 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_ALIGNED; }
	YY_BREAK
case 292:
#line 1060 "scanner.l"
case 293:
YY_RULE_SETUP
#line 1060 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_PACKED; }
	YY_BREAK
case 294:
#line 1063 "scanner.l"
case 295:
YY_RULE_SETUP
#line 1063 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_TRANSPARENT_UNION; }
	YY_BREAK
case 296:
#line 1066 "scanner.l"
case 297:
YY_RULE_SETUP
#line 1066 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_VECTOR_SIZE; }
	YY_BREAK
case 298:
#line 1069 "scanner.l"
case 299:
YY_RULE_SETUP
#line 1069 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_MODE; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1071 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 1072 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1073 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE4); }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1074 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE5); }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1075 "scanner.l"
{ /* ignore */ }
	YY_BREAK

// an attribute we do process
case 305:
YY_RULE_SETUP
#line 1079 "scanner.l"
{ PARSER.parenthesis_counter++; loc(); return '('; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1080 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE5);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    PARSER.parenthesis_counter--;
                    loc();
                    return ')';
                  }
                }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1093 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE2);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    loc();
                    return ',';
                  }
                }
	YY_BREAK
case 308:
#line 1106 "scanner.l"
case 309:
#line 1107 "scanner.l"
case 310:
#line 1108 "scanner.l"
case 311:
#line 1109 "scanner.l"
case 312:
#line 1110 "scanner.l"
case 313:
#line 1111 "scanner.l"
case 314:
#line 1112 "scanner.l"
case 315:
YY_RULE_SETUP
#line 1112 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 10);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 316:
#line 1118 "scanner.l"
case 317:
#line 1119 "scanner.l"
case 318:
#line 1120 "scanner.l"
case 319:
#line 1121 "scanner.l"
case 320:
#line 1122 "scanner.l"
case 321:
#line 1123 "scanner.l"
case 322:
#line 1124 "scanner.l"
case 323:
YY_RULE_SETUP
#line 1124 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 16);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 1129 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 1130 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 1131 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 1132 "scanner.l"
{ loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute we just ignore
case 328:
YY_RULE_SETUP
#line 1136 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 1137 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE5);
                  else
                    PARSER.parenthesis_counter--;
                }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 1142 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE2); }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 1144 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

// end bit: the closing parenthesis
case 332:
YY_RULE_SETUP
#line 1148 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 1149 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 1150 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1151 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
case YY_STATE_EOF(GCC_ATTRIBUTE1):
case YY_STATE_EOF(GCC_ATTRIBUTE2):
case YY_STATE_EOF(GCC_ATTRIBUTE3):
case YY_STATE_EOF(GCC_ATTRIBUTE4):
case YY_STATE_EOF(GCC_ATTRIBUTE5):
case YY_STATE_EOF(GCC_ASM):
case YY_STATE_EOF(GCC_ASM_VOLATILE):
case YY_STATE_EOF(GCC_ASM_PAREN):
#line 1154 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 1156 "scanner.l"
ECHO;
	YY_BREAK
#line 4722 "lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyansi_cin at a new source and called
			 * yyansi_clex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyansi_cin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyansi_cwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyansi_ctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yyansi_clex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyansi_crealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyansi_crestart(yyansi_cin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyansi_crealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2770 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2770 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2769);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyansi_crestart(yyansi_cin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyansi_cwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyansi_ctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyansi_crestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyansi_censure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
	}

	yyansi_c_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyansi_c_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyansi_c_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyansi_cpop_buffer_state();
	 *		yyansi_cpush_buffer_state(new_buffer);
     */
	yyansi_censure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyansi_c_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyansi_cwrap()) processing, but the only time this flag
	 * is looked at is after yyansi_cwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyansi_c_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyansi_cin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyansi_c_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyansi_calloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyansi_c_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyansi_c_create_buffer()
 * 
 */
    void yyansi_c_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyansi_cfree((void *) b->yy_ch_buf  );

	yyansi_cfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyansi_crestart() or at EOF.
 */
    static void yyansi_c_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyansi_c_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyansi_c_init_buffer was _probably_
     * called from yyansi_crestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyansi_c_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyansi_c_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyansi_censure_buffer_stack();

	/* This block is copied from yyansi_c_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyansi_c_switch_to_buffer. */
	yyansi_c_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyansi_cpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyansi_c_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyansi_c_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyansi_censure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_calloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_crealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyansi_c_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyansi_c_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyansi_clex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyansi_c_scan_bytes() instead.
 */
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char * yystr )
{
    
	return yyansi_c_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyansi_clex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyansi_c_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyansi_calloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyansi_c_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyansi_c_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyansi_ctext[yyansi_cleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyansi_ctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyansi_cleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyansi_cget_lineno  (void)
{
        
    return yyansi_clineno;
}

/** Get the input stream.
 * 
 */
FILE *yyansi_cget_in  (void)
{
        return yyansi_cin;
}

/** Get the output stream.
 * 
 */
FILE *yyansi_cget_out  (void)
{
        return yyansi_cout;
}

/** Get the length of the current token.
 * 
 */
int yyansi_cget_leng  (void)
{
        return yyansi_cleng;
}

/** Get the current token.
 * 
 */

char *yyansi_cget_text  (void)
{
        return yyansi_ctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyansi_cset_lineno (int  line_number )
{
    
    yyansi_clineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yyansi_c_switch_to_buffer
 */
void yyansi_cset_in (FILE *  in_str )
{
        yyansi_cin = in_str ;
}

void yyansi_cset_out (FILE *  out_str )
{
        yyansi_cout = out_str ;
}

int yyansi_cget_debug  (void)
{
        return yyansi_c_flex_debug;
}

void yyansi_cset_debug (int  bdebug )
{
        yyansi_c_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyansi_clex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyansi_cin = stdin;
    yyansi_cout = stdout;
#else
    yyansi_cin = (FILE *) 0;
    yyansi_cout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyansi_clex_init()
     */
    return 0;
}

/* yyansi_clex_destroy is for both reentrant and non-reentrant scanners. */
int yyansi_clex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyansi_c_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyansi_cpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyansi_cfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyansi_clex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyansi_calloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyansi_crealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyansi_cfree (void * ptr )
{
	free( (char *) ptr );	/* see yyansi_crealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1156 "scanner.l"



int yyansi_cwrap() { return 1; }

