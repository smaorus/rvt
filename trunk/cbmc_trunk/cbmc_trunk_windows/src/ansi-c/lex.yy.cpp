#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyansi_c_create_buffer
#define yy_delete_buffer yyansi_c_delete_buffer
#define yy_flex_debug yyansi_c_flex_debug
#define yy_init_buffer yyansi_c_init_buffer
#define yy_flush_buffer yyansi_c_flush_buffer
#define yy_load_buffer_state yyansi_c_load_buffer_state
#define yy_switch_to_buffer yyansi_c_switch_to_buffer
#define yyin yyansi_cin
#define yyleng yyansi_cleng
#define yylex yyansi_clex
#define yylineno yyansi_clineno
#define yyout yyansi_cout
#define yyrestart yyansi_crestart
#define yytext yyansi_ctext
#define yywrap yyansi_cwrap
#define yyalloc yyansi_calloc
#define yyrealloc yyansi_crealloc
#define yyfree yyansi_cfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyansi_crestart(yyansi_cin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyansi_cleng;

extern FILE *yyansi_cin, *yyansi_cout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyansi_ctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyansi_crestart()), so that the user can continue scanning by
	 * just pointing yyansi_cin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyansi_ctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyansi_cleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyansi_cwrap()'s to do buffer switches
 * instead of setting up a fresh yyansi_cin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyansi_crestart (FILE *input_file  );
void yyansi_c_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyansi_c_create_buffer (FILE *file,int size  );
void yyansi_c_delete_buffer (YY_BUFFER_STATE b  );
void yyansi_c_flush_buffer (YY_BUFFER_STATE b  );
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyansi_cpop_buffer_state (void );

static void yyansi_censure_buffer_stack (void );
static void yyansi_c_load_buffer_state (void );
static void yyansi_c_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyansi_c_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyansi_c_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyansi_c_scan_bytes (yyconst char *bytes,int len  );

void *yyansi_calloc (yy_size_t  );
void *yyansi_crealloc (void *,yy_size_t  );
void yyansi_cfree (void *  );

#define yy_new_buffer yyansi_c_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyansi_cin = (FILE *) 0, *yyansi_cout = (FILE *) 0;

typedef int yy_state_type;

extern int yyansi_clineno;

int yyansi_clineno = 1;

extern char *yyansi_ctext;
#define yytext_ptr yyansi_ctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyansi_ctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyansi_cleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 255
#define YY_END_OF_BUFFER 256
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1739] =
    {   0,
        0,    0,    0,    0,    5,    5,   10,   10,  200,  200,
      199,  199,    0,    0,    0,    0,    0,    0,  216,  216,
      227,  227,  243,  243,    0,    0,  252,  252,  208,  208,
        0,    0,    0,    0,    0,    0,    0,    0,  256,    1,
      195,   14,   13,   13,  195,  195,   17,  165,  195,  195,
      195,  195,  195,  195,  195,  195,  174,  166,  194,  195,
      195,  195,  165,  195,  195,  195,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  193,  195,    5,    7,    6,    6,   10,
        9,  200,  201,  199,  199,  255,  198,  204,  203,  202,

      207,  206,  205,  197,  196,  218,  216,  217,  217,  218,
      218,  231,  227,  228,  228,  229,  230,  231,  229,  229,
      229,  229,  229,  246,  243,  244,  244,  246,  245,  246,
      246,  232,  233,  246,  246,  234,  246,  246,  246,  235,
      246,  246,  246,  246,  246,  246,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  246,  250,  247,  248,  249,  254,  252,
      253,  253,  251,  254,  214,  208,  209,  209,  211,  214,
      214,  214,  210,   14,   17,  151,    0,   12,    0,   17,
       17,   17,   17,   17,  165,  157,  152,  162,    0,    0,

      155,  144,  158,  145,  159,  143,    0,  190,    2,    8,
      156,  190,  174,    0,    0,  191,  175,  177,    0,    0,
      166,  167,  169,    0,  146,  148,  150,  149,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   13,  163,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,   27,  165,  165,  165,  165,  165,
      165,  165,   35,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  164,  153,    5,
        3,    4,   10,  200,  199,  199,  198,  216,    0,  215,
      217,  227,  229,  228,  229,  229,  229,  229,  229,  243,

      245,  235,  236,  238,    0,  244,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       27,  245,  245,  245,  245,  245,  245,  245,   35,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  252,  253,  208,  209,    0,    0,    0,
        0,   17,   17,   15,   15,   17,   17,   17,   17,   11,
        0,    0,  154,    0,  192,  190,    0,    0,  190,  176,
      178,  178,    0,  182,    0,    0,    0,  180,  168,  170,
      170,    0,    0,    0,    0,  172,  160,  161,    0,    0,
        0,    0,    0,    0,    0,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
       72,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,   33,  165,  165,   37,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      130,  165,  165,  165,  165,  165,  165,  229,  229,  229,
      229,  229,  229,  229,  229,  237,  239,  239,    0,    0,
        0,    0,  241,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,   72,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,   33,  245,  245,   37,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  130,  245,
      245,  245,  245,  245,  245,    0,    0,    0,    0,   15,
       17,   17,    0,    0,    0,  190,    0,  190,  179,    0,
        0,    0,  181,  183,  185,    0,    0,  171,    0,    0,
        0,  173,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,   18,  165,   21,   22,
      165,  165,  165,  165,   29,   30,  165,  165,  165,  165,
       34,  165,  165,   38,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,   51,  165,  165,
      229,  229,  229,  229,  229,  229,  229,  229,  240,    0,
        0,    0,  242,    0,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,   18,
      245,   21,   22,  245,  245,  245,  245,   29,   30,  245,
      245,  245,  245,   34,  245,  245,   38,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       51,  245,  245,    0,    0,    0,    0,   17,   17,    0,
        0,    0,  184,  186,  186,    0,    0,    0,    0,  188,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,   19,  165,  165,  165,  165,  165,   71,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  112,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  110,  165,  165,  118,  165,  129,
      165,  165,  165,  101,  165,  165,  165,  165,  165,  165,
       20,   24,  165,  165,  165,  165,  165,  165,   32,  165,
      136,  165,  165,  165,  165,   42,  165,  165,  165,  165,
      165,  165,  165,   49,  165,  165,   53,  229,  229,  229,
      229,  229,  229,  229,  229,    0,   19,  245,  245,  245,
      245,  245,   71,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  112,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  110,
      245,  245,  118,  245,  129,  245,  245,  245,  101,  245,

      245,  245,  245,  245,  245,   20,   24,  245,  245,  245,
      245,  245,  245,   32,  245,  136,  245,  245,  245,  245,
       42,  245,  245,  245,  245,  245,  245,  245,   49,  245,
      245,   53,    0,    0,   17,   17,  187,    0,    0,    0,
      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,   54,  165,  165,  165,  165,
      165,  165,  165,  108,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  115,  165,   94,  165,  165,  165,

      165,  165,   28,  134,   31,  165,   36,  165,  165,  165,
       41,   43,   44,   45,   46,   47,  165,  122,  165,  165,
      229,  229,  229,  229,  229,  221,  229,  229,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,   54,  245,  245,  245,  245,  245,  245,  245,  108,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      115,  245,   94,  245,  245,  245,  245,  245,   28,  134,
       31,  245,   36,  245,  245,  245,   41,   43,   44,   45,
       46,   47,  245,  122,  245,  245,    0,    0,   16,    0,

        0,    0,   77,    0,    0,   84,   83,    0,    0,    0,
      165,  165,  165,  165,  109,   73,  165,  165,   95,  165,
      102,  165,  165,  165,  165,  165,  165,  165,  165,  165,
       55,   56,   57,  165,  135,  165,  165,  165,   58,   59,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,   26,  132,  165,  165,  165,
       48,  165,  165,  229,  229,  229,  229,  219,  229,  229,
      245,  245,  245,  245,  109,   73,  245,  245,   95,  245,
      102,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       55,   56,   57,  245,  135,  245,  245,  245,   58,   59,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,   26,  132,  245,  245,  245,
       48,  245,  245,    0,    0,   16,   16,    0,   78,    0,
       82,    0,    0,    0,   23,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  133,  165,  165,  165,
      165,  165,   62,  126,  165,  165,  113,   87,   61,  165,
      104,  121,  165,  165,  142,  123,  165,  165,  165,  165,
      165,   97,   25,   66,   39,   40,   50,   52,  229,  229,
      229,  229,  229,  229,   23,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  133,  245,  245,  245,

      245,  245,   62,  126,  245,  245,  113,   87,   61,  245,
      104,  121,  245,  245,  142,  123,  245,  245,  245,  245,
      245,   97,   25,   66,   39,   40,   50,   52,    0,  212,
        0,    0,    0,    0,    0,  165,  165,  165,   90,  165,
      165,  165,   96,  165,  103,  165,  165,  165,  131,  165,
      165,  165,  128,  165,  165,  165,   98,  165,  165,  165,
      165,  165,   86,   99,  229,  229,  229,  229,  229,  229,
      245,  245,  245,   90,  245,  245,  245,   96,  245,  103,
      245,  245,  245,  131,  245,  245,  245,  128,  245,  245,
      245,   98,  245,  245,  245,  245,  245,   86,   99,    0,

        0,    0,    0,    0,    0,  165,  165,  165,  165,  165,
      165,  165,  165,   85,  165,  100,  165,  165,  127,  165,
       93,  105,  165,  124,  165,  106,  165,  229,  222,  229,
      229,  229,  229,  245,  245,  245,  245,  245,  245,  245,
      245,   85,  245,  100,  245,  245,  127,  245,   93,  105,
      245,  124,  245,  106,  245,    0,    0,   80,   74,    0,
        0,   69,  165,  165,  165,  165,  165,  111,   91,   68,
       89,  165,  165,  165,  165,   60,  165,  165,  165,  165,
      165,  165,  165,  116,  220,  229,  229,  229,  225,   69,
      245,  245,  245,  245,  245,  111,   91,   68,   89,  245,

      245,  245,  245,   60,  245,  245,  245,  245,  245,  245,
      245,  116,    0,    0,   76,    0,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  117,   65,
      165,  165,  107,  229,  229,  229,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  117,   65,
      245,  245,  107,  213,    0,    0,  165,  165,  165,  165,
      165,   88,  165,  165,  165,  165,   92,  125,  165,  165,
      229,  229,  229,  245,  245,  245,  245,  245,   88,  245,
      245,  245,  245,   92,  125,  245,  245,    0,    0,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  119,  165,

      229,  229,  229,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  119,  245,    0,    0,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  114,  229,  226,  229,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      114,   79,    0,  165,  165,  138,  137,  165,  165,  165,
      165,   63,  165,  229,  229,  245,  245,  138,  137,  245,
      245,  245,  245,   63,  245,    0,  165,  165,  165,   70,
      165,  165,  120,  229,  223,  245,  245,  245,   70,  245,
      245,  120,    0,  139,  165,  165,   64,  165,  229,  139,
      245,  245,   64,  245,    0,  141,  165,  165,  229,  141,

      245,  245,    0,  165,  165,  229,  245,  245,    0,  165,
      165,  224,  245,  245,    0,  140,  165,  140,  245,    0,
      165,  245,    0,  165,  245,    0,  165,  245,    0,  165,
      245,    0,  165,  245,   75,   67,   67,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,    1,   30,   31,
       32,   33,   34,    1,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   42,   42,   44,   42,   45,   46,   47,
       42,   48,   49,   50,   51,   52,   42,   53,   42,   42,
       54,   55,   56,   57,   58,    1,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[88] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        4,    1,    1,    5,    1,    1,    1,    6,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    8,    8,    8,    8,    9,   10,
        3,    3,    3,   11,    3,    3,    3,    3,    3,    3,
       12,    3,    3,    1,    1,    1,   13,    3,    8,    8,
        8,    8,    9,   10,    3,    3,   12,    3,    3,   11,
        3,    3,    3,    3,    3,    3,    3,    3,   12,    3,
        3,    3,    3,    3,   13,    1,   14
    } ;

static yyconst flex_int16_t yy_base[1776] =
    {   0,
        0,    0,    0,    0,   85,   86, 2721, 2720, 2635, 2634,
       88,   91,   89,   94,  100,  105,   93,   95,  107,  112,
      178,    0,  265,    0,  117,  119,  351,  354,  357,  368,
        0,    0,    0,    0,    0,    0,    0,    0, 2720, 2725,
     2725,  119, 2725, 2725, 2687,   89,  361,    0, 2686,  115,
     2662, 2684,  108,  110,  132,  359,  436,  501, 2725,  105,
     2683,  106,  135,  373, 2711, 2681,  340,   86, 2636,  334,
      101,  338,   99, 2638,  302,  332, 2646, 2646,  347,   94,
     2636, 2634, 2640, 2725,  330,    0, 2725, 2686, 2690,    0,
     2725,    0, 2725,    0,  366, 2725, 2725, 2725, 2725, 2725,

     2725, 2725, 2725, 2725, 2725, 2725, 2701, 2725, 2725,  409,
     2699, 2725, 2699, 2725, 2725,    0, 2725, 2697, 2641, 2628,
     2638, 2620, 2632, 2725, 2692, 2725, 2725, 2661,    0, 2660,
      386, 2725, 2725, 2659,  409, 2725,  413, 2672, 2657,  423,
      401, 2656,  406,  471, 2684, 2654,  433,  315, 2609,  412,
      356,  414,  431, 2611,  383,  409, 2619, 2619,  465,  351,
     2609, 2607, 2613,  447, 2725, 2725, 2725, 2725, 2725, 2676,
     2725, 2725, 2725, 2674, 2725, 2674, 2725, 2725, 2725, 2672,
     2616, 2600, 2725,  481,  533, 2725,  437, 2725,  602,    0,
      561,  683, 2605, 2595,    0, 2725, 2725, 2725,  457,  733,

     2725, 2725, 2725, 2725, 2725, 2725, 2652,  530, 2725, 2725,
     2725,  570,  454,  533,  622, 2725,  551,  531,    0,  488,
        0,  609,  548,  647, 2637, 2725, 2725, 2725, 2636,  511,
     2612,  618, 2631,  395, 2592, 2601, 2590, 2583, 2725, 2725,
     2588, 2587,  781, 2597, 2595, 2598, 2578, 2584, 2576, 2590,
     2575, 2592, 2578, 2585, 2569, 2570, 2567,  538, 2573, 2571,
     2567, 2564,    0,  435, 2582, 2568, 2575,  594, 2565,  554,
      582, 2570, 2553, 2561,  472,  101, 2567, 2725, 2725,    0,
     2725, 2725,    0,    0,    0,  506, 2725, 2631,  565, 2725,
     2725, 2630,    0, 2725,  618, 2564, 2569, 2570, 2567, 2625,

        0,  649,  670,  632,  692, 2725, 2553, 2552,  828, 2562,
     2560, 2563, 2543, 2549, 2541, 2555, 2540, 2557, 2543, 2550,
     2534, 2535, 2532,  591, 2538, 2536, 2532, 2529,    0,  534,
     2547, 2533, 2540,  652, 2530,  599,  665, 2535, 2518, 2526,
      624,  509, 2532, 2596, 2725, 2595, 2725, 2516, 2525,  755,
        0,  719,  729, 2725,  731,  908,  739, 2522, 2534, 2725,
      809,    0, 2725,  852, 2725,  875,  926,  944,  725,  527,
     2725,  681,  724,  720,  377, 2570, 2567, 2725,  712, 2725,
      692,  780,  744, 2568, 2565, 2725, 2725, 2725, 2530, 2520,
     2512, 2523,  694, 2505, 2516, 2509, 2510, 2536, 2532, 2533,

      744, 2498,  664, 2513, 2493,  780, 2504,  845,  739, 2509,
      807, 2509,  907,  837,  306,  774, 2508, 2509, 2492, 2506,
        0, 2494, 2507, 2502, 2488,  460, 2504, 2502, 2498, 2489,
     2496, 2495, 2498, 2497,    0, 2482, 2487,    0, 2473, 2487,
     2474, 2483, 2471, 2469, 2471, 2474, 2482, 2466, 2464, 2464,
        0, 2478, 2467, 2472, 2476, 2478, 2466, 2465, 2475, 2457,
     2469, 2466, 2461, 2457, 2450,  777, 2725,  768,  956,  797,
     2505, 2502, 2725, 2452, 2453, 2479, 2475, 2476,  848, 2441,
      787, 2456, 2436,  916, 2447,  851,  837, 2452,  881, 2452,
      919,  915,  809,  930, 2451, 2452, 2435, 2449,    0, 2437,

     2450, 2445, 2431,  577, 2447, 2445, 2441, 2432, 2439, 2438,
     2441, 2440,    0, 2425, 2430,    0, 2416, 2430, 2417, 2426,
     2414, 2412, 2414, 2417, 2425, 2409, 2407, 2407,    0, 2421,
     2410, 2415, 2419, 2421, 2409, 2405, 2418,  988, 1038, 2725,
     2413, 2410,  996, 1092, 1004, 1040, 1113, 1041, 2725,  936,
     2452, 2449, 2725, 1099, 1001, 1013, 2444, 2725,  974, 2449,
     2446, 2725, 2441,  955, 2390, 2394, 2387, 2402, 2385, 2387,
     2400, 2391, 2386, 2416, 2410, 2407, 2389, 2384, 2376, 2386,
     2389,  754, 2390,  846, 2373, 2377, 2372, 2374, 2387,  968,
     2370, 2384, 2384, 2378, 2380, 2381, 2363, 2362,  793, 2372,

     2375, 2371, 2372, 2372, 2356, 2348, 2356, 2359, 2358, 2403,
     2367, 2358, 2363, 2353, 2344, 2360,    0, 2351,    0,    0,
     2341, 2351, 2338, 2346,    0,    0, 2341, 2338, 2343, 2334,
        0, 2339, 2347,    0, 2346, 2331, 2331, 2330, 2327, 2341,
     2330, 2335, 2340, 2339,  975, 2327, 2333,    0, 2319, 2333,
     2328, 2333, 2334, 2331, 2319, 2327, 2312, 2315, 2725,  979,
     2365, 2362, 2725, 2357, 2314, 2309, 2339, 2333, 2330, 2312,
     2307, 2299, 2309, 2312,  978, 2313,  883, 2296, 2300, 2295,
     2297, 2310,  977, 2293, 2307, 2307, 2301, 2303, 2304, 2286,
     2285,  976, 2295, 2298, 2294, 2295, 2295, 2279, 2271, 2279,

     2282, 2281, 2326, 2290, 2281, 2286, 2276, 2267, 2283,    0,
     2274,    0,    0, 2264, 2274, 2261, 2269,    0,    0, 2264,
     2261, 2266, 2257,    0, 2262, 2270,    0, 2269, 2254, 2254,
     2253, 2250, 2264, 2253, 2258, 2263, 2262, 1010, 2250, 2256,
        0, 2242, 2256, 2248, 2239,  997,    0, 1159, 2245,  762,
        0, 2287,  991, 2725, 1012, 1066, 1064, 2292, 2289, 2725,
     2284, 2238,  731, 2231, 2242, 2232, 2237, 2247, 2229, 2243,
     2725,    0, 2233, 2261, 2255, 2265, 2234, 2240, 2221, 2226,
     2234, 2220, 2216, 2222, 2228, 2227, 2211, 2229, 2226, 2226,
     2220, 2217, 1136,    0, 2220, 2202, 2204, 2211, 2214,  871,

     2215, 2207, 2198, 2203,    0, 2196, 2212, 2214, 2208,    0,
     2207, 2190, 2209,    0, 2198, 2188, 2195, 2187, 2202, 2203,
        0,    0, 2189, 2190, 2196, 2180, 2185, 2174,    0, 2177,
        0, 2161, 2157, 2167, 2158,    0, 2167, 2147, 2124, 2101,
     2108, 2093, 2091,    0, 2082, 2079,    0, 2080, 2075, 2064,
     2057, 2071, 2060, 2021, 2008, 2053,    0, 1999, 2026, 2013,
     2023, 1992, 1985, 1953,   58,   73,  323,  363,  411,  481,
      542,  533,  558,  571,  596,  598,  623, 1137,    0,  664,
      666,  671,  714,  720, 1031,  764,  814,  821,  870,    0,
      898,  927,  982, 1006,    0, 1016, 1009, 1032,    0, 1026,

     1018, 1036, 1030, 1047, 1050,    0,    0, 1050, 1053, 1061,
     1047, 1054, 1074,    0, 1082,    0, 1068, 1070, 1082, 1094,
        0, 1105, 1104, 1109, 1093, 1106, 1110, 1110,    0, 1103,
     1109,    0, 1118, 1122, 1188, 1132, 2725, 1170, 1171, 1170,
     2725, 1167, 1121, 1121, 1136, 1139, 1139, 1124, 1140, 1126,
     1133, 1143, 1144, 1173, 1167, 1182, 1149, 1164, 1156, 1146,
     1155, 1156, 1149, 1151, 1156, 1159, 1171, 1163, 1171, 1176,
     1178, 1165, 1212, 1217, 1216,    0, 1171, 1179, 1180, 1181,
     1174, 1224, 1223,    0, 1190, 1173, 1187, 1187, 1193, 1186,
     1195, 1182, 1193, 1179,    0, 1195,    0, 1185, 1201, 1191,

     1183, 1185,    0,    0,    0, 1181,    0, 1192, 1203, 1206,
        0,    0,    0,    0,    0,    0, 1204,    0, 1206, 1200,
     1199, 1209, 1196, 1201, 1213,    0, 1217, 1219, 1215, 1234,
     1228, 1243, 1210, 1225, 1217, 1207, 1216, 1217, 1210, 1212,
     1216, 1219, 1231, 1223, 1231, 1236, 1238, 1225, 1272, 1277,
     1276,    0, 1231, 1239, 1240, 1241, 1234, 1284, 1283,    0,
     1250, 1233, 1247, 1247, 1253, 1246, 1255, 1242, 1253, 1239,
        0, 1255,    0, 1245, 1261, 1251, 1243, 1245,    0,    0,
        0, 1241,    0, 1252, 1263, 1266,    0,    0,    0,    0,
        0,    0, 1264,    0, 1266, 1260, 1253, 1262, 1331, 1306,

     1264, 1258, 2725, 1276, 1268, 2725, 2725, 1280, 1260, 1283,
     1260, 1297, 1305, 1307, 1283,    0, 1287, 1281, 1291, 1287,
     1293, 1278, 1275, 1277, 1296, 1287, 1291, 1289, 1302, 1298,
        0,    0,    0, 1304,    0, 1285, 1302, 1306,    0,    0,
     1308, 1300, 1306, 1295, 1300, 1299, 1310, 1309, 1316, 1308,
     1303, 1314, 1308, 1309, 1317,    0,    0, 1317, 1306, 1305,
        0, 1322, 1322, 1323, 1325, 1314, 1313,    0, 1314, 1314,
     1310, 1347, 1355, 1357, 1333,    0, 1337, 1331, 1341, 1337,
     1343, 1328, 1325, 1327, 1346, 1337, 1341, 1339, 1352, 1348,
        0,    0,    0, 1354,    0, 1335, 1352, 1356,    0,    0,

     1358, 1350, 1356, 1345, 1350, 1349, 1360, 1359, 1366, 1358,
     1353, 1364, 1358, 1359, 1367,    0,    0, 1367, 1356, 1355,
        0, 1372, 1372, 1369, 1374,    0, 1436, 1380, 2725, 1377,
     2725, 1381, 1383, 1384,    0, 1404, 1397, 1398, 1385, 1384,
     1370, 1378, 1393, 1370, 1395, 1391,    0, 1388, 1386, 1374,
     1386, 1401,    0, 1402, 1403, 1389,    0,    0,    0, 1402,
     1406,    0, 1395, 1404,    0, 1409, 1401, 1399, 1398, 1410,
     1402,    0,    0,    0,    0,    0,    0,    0, 1411, 1416,
     1416, 1418, 1414, 1411,    0, 1439, 1432, 1433, 1420, 1419,
     1405, 1413, 1428, 1405, 1430, 1426,    0, 1423, 1421, 1409,

     1421, 1436,    0, 1437, 1438, 1424,    0,    0,    0, 1437,
     1441,    0, 1430, 1439,    0, 1444, 1436, 1434, 1433, 1445,
     1437,    0,    0,    0,    0,    0,    0,    0, 1438, 2725,
     1431, 1433, 1441, 1442, 1441, 1456, 1457, 1458, 1459, 1460,
     1441, 1462,    0, 1463,    0, 1461, 1450, 1454,    0, 1455,
     1450, 1469,    0, 1464, 1451, 1472,    0, 1464, 1474, 1461,
     1471, 1465,    0,    0, 1478, 1479, 1462, 1462, 1468, 1457,
     1484, 1485, 1486, 1487, 1488, 1469, 1490,    0, 1491,    0,
     1489, 1478, 1482,    0, 1483, 1478, 1497,    0, 1492, 1479,
     1500,    0, 1492, 1502, 1489, 1499, 1493,    0,    0, 1501,

     1516, 1489, 1504, 1489, 1497, 1512, 1512, 1515, 1516, 1519,
     1515, 1520, 1522,    0, 1509,    0, 1515, 1520,    0, 1526,
        0,    0, 1509,    0, 1528, 1529, 1505, 1531,    0, 1528,
     1525, 1516, 1532, 1538, 1542, 1539, 1541, 1545, 1541, 1548,
     1550,    0, 1537,    0, 1543, 1548,    0, 1554,    0,    0,
     1537,    0, 1556, 1557, 1533, 1559, 1540, 2725, 2725, 1556,
     1549,    0, 1547, 1557, 1543, 1554, 1563,    0,    0,    0,
     1572, 1561, 1568, 1550, 1575,    0, 1577, 1564, 1572, 1580,
     1576, 1564, 1583,    0,    0, 1570, 1559, 1586,    0,    0,
     1569, 1579, 1565, 1575, 1583,    0,    0,    0, 1592, 1581,

     1588, 1570, 1595,    0, 1597, 1584, 1592, 1600, 1596, 1584,
     1603,    0, 1604, 1587, 2725, 1586, 1589, 1588, 1600, 1592,
     1593, 1612, 1604, 1608, 1599, 1616, 1617, 1613,    0,    0,
     1616, 1615,    0, 1601, 1617, 1602, 1606, 1605, 1617, 1609,
     1610, 1629, 1621, 1625, 1616, 1633, 1634, 1630,    0,    0,
     1633, 1632,    0, 2725, 1629, 1638, 1639, 1619, 1623, 1642,
     1639,    0, 1638, 1627, 1642, 1647,    0,    0, 1629, 1643,
     1651, 1652, 1639, 1653, 1633, 1637, 1656, 1653,    0, 1652,
     1641, 1656, 1661,    0,    0, 1643, 1657, 1651, 1646, 1642,
     1663, 1649, 1658, 1670, 1658, 1668, 1655, 1657, 1676, 1658,

     1657, 1679, 1671, 1656, 1677, 1663, 1672, 1684, 1672, 1682,
     1669, 1671, 1690, 1672, 1685, 1684, 1694, 1692, 1677, 1685,
     1694, 1684, 1680, 1701, 1695, 1685,    0, 1690,    0, 1690,
     1706, 1704, 1689, 1697, 1706, 1696, 1692, 1713, 1707, 1697,
        0, 2725, 1701, 1702, 1698,    0,    0, 1719, 1714, 1706,
     1719,    0, 1754, 1715, 1711, 1711, 1707,    0,    0, 1728,
     1723, 1715, 1728,    0, 1763, 1719, 1728, 1720, 1724,    0,
     1731, 1723,    0, 1724,    0, 1734, 1726, 1730,    0, 1737,
     1729,    0, 1745,    0, 1728, 1732,    0, 1735, 1735,    0,
     1732, 1736,    0, 1739, 1752,    0, 1751, 1739, 1756,    0,

     1754, 1742, 1739, 1759, 1760, 1762, 1762, 1763, 1745, 1754,
     1747,    0, 1756, 1749, 1752,    0, 1762,    0, 1763, 1764,
     1772, 1773, 1774, 1765, 1766, 1758, 1775, 1776, 1762, 1783,
     1784, 1780, 1770, 1771, 2725,    0,    0, 2725, 1845, 1859,
     1873, 1887, 1901, 1915, 1929, 1943, 1957, 1971, 1985, 1999,
     2013, 2027, 2041, 2053, 2065, 2079, 2093, 2107, 2120, 2130,
     2140, 2146, 2158, 2166, 2171, 2177, 2181, 2185, 2195, 2209,
     2217, 2221, 2226, 2231, 2242
    } ;

static yyconst flex_int16_t yy_def[1776] =
    {   0,
     1739, 1739, 1738,    3, 1740, 1740, 1741, 1741, 1742, 1742,
     1743, 1743, 1744, 1744, 1745, 1745, 1746, 1746, 1747, 1747,
     1738,   21, 1738,   23, 1748, 1748, 1749, 1749, 1750, 1750,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1752, 1753, 1754, 1738, 1738,
     1755, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1754, 1738, 1738, 1738, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1738, 1738, 1756, 1738, 1738, 1738, 1757,
     1738, 1758, 1738, 1759, 1759, 1738, 1738, 1738, 1738, 1738,

     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1760, 1738, 1738, 1760, 1760,
     1760, 1760, 1760, 1738, 1738, 1738, 1738, 1738, 1761, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1762,
     1738, 1738, 1738, 1738, 1738, 1738, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1753, 1738, 1752, 1738, 1738, 1753,
     1753, 1763, 1753, 1753, 1754, 1738, 1738, 1738, 1755, 1738,

     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1764, 1738, 1738,
     1738, 1765,   57, 1766, 1738, 1738, 1738, 1738, 1767, 1738,
       58, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1752,
     1755, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1738, 1738, 1756,
     1738, 1738, 1757, 1758, 1759, 1759, 1738, 1738, 1738, 1738,
     1738, 1738, 1760, 1738, 1760, 1760, 1760, 1760, 1760, 1738,

     1761, 1762, 1738, 1738, 1738, 1738, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1738, 1738, 1738, 1738, 1738, 1738, 1752,
     1768, 1769, 1769, 1738, 1769, 1769, 1769, 1770, 1770, 1738,
     1755, 1771, 1738, 1738, 1738, 1765, 1738, 1738, 1772, 1738,
     1738, 1738, 1738, 1767, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1754, 1754, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1738, 1738, 1752, 1752, 1738,
     1770, 1770, 1755, 1755, 1738, 1773, 1738, 1774, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1738, 1738,
     1738, 1738, 1738, 1738, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1738, 1738, 1752,  539, 1770, 1770, 1755,
      544, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1760, 1738, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1738, 1738, 1770, 1770, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,

     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1738, 1738, 1775, 1738,

     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1738, 1738, 1775, 1775, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1760, 1760,
     1760, 1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1760, 1760, 1760, 1760, 1760, 1760,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1738,

     1738, 1738, 1738, 1738, 1738, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1760, 1760, 1760,
     1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1738, 1738, 1738, 1738, 1738,
     1738, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1760, 1760, 1760, 1760, 1760, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1738, 1738, 1738, 1738, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1760, 1760, 1760, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1738, 1738, 1738, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1738, 1738, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,

     1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1738, 1738, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1760, 1760, 1760,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1738, 1738, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1760, 1760, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1738, 1754, 1754, 1754, 1754,
     1754, 1754, 1754, 1760, 1760, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1738, 1754, 1754, 1754, 1754, 1754, 1760, 1761,
     1761, 1761, 1761, 1761, 1738, 1754, 1754, 1754, 1760, 1761,

     1761, 1761, 1738, 1754, 1754, 1760, 1761, 1761, 1738, 1754,
     1754, 1760, 1761, 1761, 1738, 1754, 1754, 1761, 1761, 1738,
     1754, 1761, 1738, 1754, 1761, 1738, 1754, 1761, 1738, 1754,
     1761, 1738, 1754, 1761, 1738, 1754, 1761,    0, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738
    } ;

static yyconst flex_int16_t yy_nxt[2813] =
    {   0,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   41,   41,   52,   53,   41,   54,   55,   56,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       60,   61,   62,   41,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   63,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   64,   65,   41,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   48,   75,   48,   48,   76,
       48,   48,   77,   48,   48,   78,   79,   80,   81,   82,
       83,   48,   48,   48,   84,   85,   41,   87,   87,   95,
       96,   96,   95,   96,  188,   96,   96,   96,   88,   88,

       99,  100,   96,   89,   89,   99,  100,   96,  107,  108,
      109,  102,  103,  107,  108,  109,  102,  103,  110,   96,
      184,   96,  202,  110,  197,  185,  204, 1036,  166,  167,
      166,  167,  168, 1037,  168,  225,  226,  228,  229,  203,
      230,  205,  206,  189,   96,  231,  198,   96,  105,  207,
      105,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  111,  248,  254,  249,  259,  111,  455,  260,  273,
      456,  261,   97,  255,   96,   97,  274,   96,  112,  113,
      114,  115,  112,  112,  112,  116,  112,  112,  112,  112,
      117,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  112,  118,  112,  112,  119,  120,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  121,  116,  116,  116,  122,  116,  123,  116,  116,
      116,  116,  112,  112,  112,  124,  125,  126,  127,  128,
      124,  124,  129,  130,  131,  124,  132,  133,  134,  135,
      136,  137,  138,  139,  124,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  124,  141,  142,  143,  124,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  144,  145,
      124,  146,  147,  148,  149,  150,  151,  152,  153,  154,
      129,  155,  129,  129,  156,  129,  129,  157,  129,  129,
      158,  159,  160,  161,  162,  163,  129,  129,  129,  124,
      164,  124,  170,  171,  172,  170,  171,  172,  176,  177,
      178,  278,  191,  173,  608,  263,  173,  286,  179,  176,
      177,  178,  209,  264,  232,  241,  242,  210,  609,  179,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      211,  314,  251,  315,  265,  197, 1038,  243,  557,  252,

      244,  245,  378,  246,  266,  174,  253,  256,  174,  257,
      289,  180,  269,  270,  181,  279,  247,  198,  320,  258,
      290,  233,  180,  202,  271,  181,  339,  272,  321,  204,
      193,  225,  226,  340,  194,  234,  182,  228,  229, 1039,
      203,  183,  188,  235,  205,  206,  329,  182,  236,  237,
      287,  238,  183,  212,  330,  213,  213,  213,  213,  213,
      213,  213,  213,  214,  214,  390,  303,  360,  307,  308,
      317,  331,  232,  304,  215,  216,  391,  318,  278,  217,
     1040,  332,  184,  322,  319,  323,  218,  185,  219,  305,
      309,  189,  303,  310,  311,  324,  312,  325,  215,  216,

      326,  304,  220,  327,  437,  217, 1738,  286,  375,  313,
      376,  200,  438,  377,  218,  378,  188,  219,  212,  233,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      335,  336,  279,  234,  191, 1738,  621,  622,  453,  215,
      216,  235,  337, 1041,  222,  338,  236,  237,  454,  238,
      212,  223,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  191,  215,  216,  189,  289,  224,  364,  216,
      222,  215,  216,  365,  372,  533,  290,  549,  534,  223,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      287,  381,  364,  216,  370,  215,  216,  373,  431,  365,

      372,  371,  193,  515, 1042,  549,  194,  187,  367,  216,
     1043,  516,  187,  365,  382,  432, 1044,  381,  446,  232,
      370,  350,  350,  350,  350,  350,  350,  350,  350,  371,
      193, 1045,  367,  216,  194,  187,  368,  447,  368,  365,
      448,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  509,  379,  714,  715, 1046,  187,  449,  442,  380,
      187,  187, 1047,  524,  187,  187,  233,  383,  510,  384,
      443,  444,  385,  187,  386,  468,  458,  187,  379,  187,
      234,  187,  525,  351,  353,  354,  355,  380,  235, 1048,
      531,  459,  303,  236,  237,  460,  238,  461,  469,  304,

      532,  468,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  470,  466,  471,  305,  520,  472,  303,  473,
      467,  354,  355,  526,  549,  581, 1053,  304,  521,  522,
      353,  354,  355,  354,  355,  558,  582,  357,  199,  466,
      527,  540,  355,  199,  550, 1054,  551, 1055,  467,  552,
      549,  553,  361,  361,  361,  361,  361,  361,  361,  361,
      188,  558,  558,  554,  216,  563,  199,  568,  365,  386,
      555,  569,  360,  357,  538,  538,  538,  538,  538,  538,
      538,  538, 1056,  357, 1057,  357,  556,  199,  216,  554,
      558,  199,  199,  357,  365,  199,  199,  592,  555,  610,

      559,  593,  560,  944,  199,  561,  945,  562,  199,  189,
      199,  659,  199,  577,  362,  398,  200,  399,  664,  360,
      578,  579,  473,  400,  782,  783, 1060,  659,  543,  543,
      543,  543,  543,  543,  543,  543,  611,  659,  585,  401,
      402,  403,  404,  405,  406,  407,  586,  408,  674,  612,
      409,  802,  587,  410,  411,  659,  412,  413,  414,  675,
      415,  416,  476,  200,  477,  595,  545,  701,  545,  803,
      478,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  702,  596, 1061,  597,  598,  479,  480,  481,  482,
      483,  484,  485,  982,  486,  685,  983,  487, 1062,  686,

      488,  489,  605,  490,  491,  492,  785,  493,  494,  353,
      354,  355,  606,  367,  216,  589,  590,  670,  365,  607,
      591,  682,  683,  786,  671,  672,  684,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  367,  216,  688,
      547, 1063,  547,  870,  365,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  703,  689,  752,  690,  691,
      871,  553,  357,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  600,  678, 1064,  660,  601,  661,  602,
      698,  662,  679,  663,  603,  693,  604, 1065,  680,  694,
      699,  695,  704,  188,  762,  761,  696,  700,  697,  562,

      856,  763,  188,  764,  663,  705,  360,  746,  746,  746,
      746,  746,  746,  746,  746,  750,  750,  750,  750,  750,
      750,  750,  750,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  757,  887,  758,  842,  792,  759, 1066,
      760,  937,  189,  188,  755,  793,  877,  843,  867,  868,
      200,  189,  888, 1058,  878,  937, 1059,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  756, 1067,  937,
      755,  927,  747,  747,  747,  747,  747,  747, 1068,  216,
      216,  937,  928,  365,  365,  942,  938, 1069,  939,  760,
     1070,  940,  189,  941, 1071, 1072,  747,  747,  747,  747,

      747,  747,  360,  216,  216, 1073, 1074, 1075, 1076,  365,
      365,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751, 1077, 1078, 1079, 1080, 1081,  751,  751,  751,  751,
      751,  751,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  753, 1082, 1083, 1084,  200, 1085, 1086,  754,
      751,  751,  751,  751,  751,  751,  973, 1049,  974, 1050,
      935,  975, 1051,  976, 1052, 1087, 1088, 1089,  753, 1090,
     1091, 1092, 1093, 1094, 1095, 1096, 1097,  754,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192, 1098,  935,
     1099, 1100,  941,  941,  760,  941, 1101, 1102, 1103, 1104,

     1105, 1106, 1107, 1108, 1109, 1110, 1111,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192, 1112, 1113, 1114,
     1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,  193, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,

     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1227,  941, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1240, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294,

     1295, 1296, 1297, 1298, 1299, 1290, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1227, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
     1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,

     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
     1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1468, 1469, 1465, 1466, 1470, 1471, 1472, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1467,
     1486, 1487, 1473, 1488, 1489, 1490, 1496, 1474, 1497, 1475,

     1491, 1492, 1498, 1499, 1493, 1494, 1500, 1504, 1505, 1506,
     1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1495,
     1501, 1516, 1517, 1518, 1519, 1502, 1520, 1503, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,

     1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
     1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
     1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,

     1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
     1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
     1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
     1733, 1734, 1735, 1736, 1737,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  187, 1035,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  190, 1034,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  195, 1033, 1032, 1031,  195,
      195,  195,  195,  195,  195,  199, 1030,  199, 1029,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  280,
      663,  280,  280, 1028,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  283, 1027,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      285, 1026,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  293, 1025, 1024, 1023,  293,  293,  293,  293,
      293,  293,  301, 1022, 1021, 1020,  301,  301,  301,  301,
      301,  301,  302, 1019, 1018, 1017,  302,  302,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  208, 1016,  208,  208,  208,  366, 1015,  366,
      366,  366,  214,  214, 1014,  214,  214,  374,  374,  374,
      374,  539,  539,  539,  539,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  190,
     1013,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  544,  544,  544,  544,  369, 1012, 1011,
      369,  369,  546, 1010, 1009,  546,  546,  548, 1008, 1007,
      548,  548, 1226, 1006, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1005, 1004, 1003, 1002,
     1001, 1000,  999,  998,  997,  996,  995,  994,  993,  992,
      991,  990,  989,  988,  987,  986,  985,  984,  981,  980,
      979,  978,  977,  972,  971,  970,  969,  968,  967,  966,
      965,  964,  963,  962,  961,  960,  959,  958,  957,  956,

      955,  954,  953,  952,  951,  950,  949,  948,  947,  946,
      943,  562,  760,  760,  553,  936,  934,  933,  932,  931,
      930,  929,  926,  925,  924,  923,  922,  921,  920,  919,
      918,  917,  916,  915,  914,  913,  912,  911,  910,  909,
      908,  907,  906,  905,  904,  903,  902,  901,  900,  899,
      898,  897,  896,  895,  894,  893,  892,  891,  890,  889,
      886,  885,  884,  883,  882,  881,  880,  879,  876,  875,
      874,  873,  872,  869,  866,  865,  864,  863,  862,  861,
      860,  859,  858,  857,  473,  663,  663,  855,  854,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  844,  841,

      840,  839,  838,  837,  836,  835,  834,  833,  832,  831,
      830,  829,  828,  827,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  817,  816,  815,  814,  813,  812,  811,
      810,  809,  808,  807,  806,  805,  804,  801,  800,  799,
      798,  797,  796,  795,  794,  791,  790,  789,  788,  787,
      784,  781,  780,  779,  778,  777,  776,  775,  774,  773,
      772,  771,  770,  769,  768,  767,  766,  765,  386,  562,
      562,  378,  553,  553,  749,  748,  745,  744,  743,  742,
      741,  740,  739,  738,  737,  736,  735,  734,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,

      721,  720,  719,  718,  717,  716,  713,  712,  711,  710,
      709,  708,  707,  706,  692,  687,  681,  677,  676,  673,
      669,  668,  667,  666,  665,  473,  473,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  620,  619,  618,  617,  616,  615,  614,
      613,  599,  594,  588,  584,  583,  580,  576,  575,  574,
      573,  572,  571,  570,  567,  566,  565,  564,  386,  386,
      378,  378,  542,  541,  537,  536,  346,  344,  535,  530,

      529,  528,  523,  519,  518,  517,  514,  513,  512,  511,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  475,  474,  300,  465,  464,  463,
      462,  292,  288,  457,  452,  451,  450,  445,  441,  440,
      439,  436,  435,  434,  433,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  397,
      396,  395,  394,  393,  392,  389,  200,  388,  387,  363,
      359,  358,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  334,  333,  328,  316,  240,  306,  227,  211,  207,
      201,  196,  186,  300,  299,  298,  297,  296,  295,  294,

      292,  291,  288,  282,  281,  277,  276,  275,  268,  267,
      262,  250,  240,  239,  227,  201,  200,  196,  186, 1738,
       93,   93,   91,   91,   39, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,

     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738
    } ;

static yyconst flex_int16_t yy_chk[2813] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    6,   11,
       11,   13,   12,   12,   46,   17,   14,   18,    5,    6,

       13,   13,   15,    5,    6,   14,   14,   16,   19,   19,
       19,   15,   15,   20,   20,   20,   16,   16,   19,   25,
       42,   26,   53,   20,   50,   42,   54,  865,   25,   25,
       26,   26,   25,  866,   26,   60,   60,   62,   62,   53,
       63,   54,   54,   46,   11,   63,   50,   12,   17,   55,
       18,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   19,   68,   71,   68,   73,   20,  276,   73,   80,
      276,   73,   11,   71,   11,   12,   80,   12,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   27,   27,   27,   28,   28,   28,   29,   29,
       29,   85,   47,   27,  415,   75,   28,   95,   29,   30,
       30,   30,   56,   75,   64,   67,   67,   56,  415,   30,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       56,  148,   70,  148,   76,  131,  867,   67,  375,   70,

       67,   67,  375,   67,   76,   27,   70,   72,   28,   72,
      110,   29,   79,   79,   29,   85,   67,  131,  151,   72,
      110,   64,   30,  135,   79,   30,  160,   79,  151,  137,
       47,  141,  141,  160,   47,   64,   29,  143,  143,  868,
      135,   29,  187,   64,  137,  137,  155,   30,   64,   64,
       95,   64,   30,   57,  155,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,  234,  140,  199,  147,  147,
      150,  156,  144,  140,   57,   57,  234,  150,  164,   57,
      869,  156,  184,  152,  150,  152,   57,  184,   57,  140,
      147,  187,  140,  147,  147,  152,  147,  153,   57,   57,

      153,  140,   57,  153,  264,   57,  213,  286,  220,  147,
      220,  199,  264,  220,   57,  220,  230,   57,   58,  144,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      159,  159,  164,  144,  185,  213,  426,  426,  275,   58,
       58,  144,  159,  870,   58,  159,  144,  144,  275,  144,
      214,   58,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  191,   58,   58,  230,  289,   58,  208,  208,
       58,  214,  214,  208,  218,  342,  289,  370,  342,   58,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      286,  223,  208,  208,  217,  214,  214,  218,  258,  208,

      218,  217,  185,  330,  871,  370,  185,  189,  212,  212,
      872,  330,  189,  212,  223,  258,  873,  223,  270,  232,
      217,  189,  189,  189,  189,  189,  189,  189,  189,  217,
      191,  874,  212,  212,  191,  189,  215,  270,  215,  212,
      271,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  324,  222,  504,  504,  875,  189,  271,  268,  222,
      189,  189,  876,  336,  189,  189,  232,  224,  324,  224,
      268,  268,  224,  189,  224,  304,  295,  189,  222,  189,
      232,  189,  336,  189,  192,  192,  192,  222,  232,  877,
      341,  295,  302,  232,  232,  295,  232,  295,  304,  302,

      341,  304,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  305,  303,  305,  302,  334,  305,  302,  305,
      303,  352,  352,  337,  372,  403,  880,  302,  334,  334,
      353,  353,  353,  355,  355,  381,  403,  192,  200,  303,
      337,  357,  357,  200,  373,  881,  373,  882,  303,  373,
      372,  373,  200,  200,  200,  200,  200,  200,  200,  200,
      350,  381,  379,  374,  369,  383,  200,  393,  369,  383,
      374,  393,  750,  352,  350,  350,  350,  350,  350,  350,
      350,  350,  883,  353,  884,  355,  374,  200,  369,  374,
      379,  200,  200,  357,  369,  200,  200,  409,  374,  416,

      382,  409,  382,  763,  200,  382,  763,  382,  200,  350,
      200,  468,  200,  401,  200,  243,  750,  243,  470,  361,
      401,  401,  470,  243,  582,  582,  886,  466,  361,  361,
      361,  361,  361,  361,  361,  361,  416,  468,  406,  243,
      243,  243,  243,  243,  243,  243,  406,  243,  481,  416,
      243,  599,  406,  243,  243,  466,  243,  243,  243,  481,
      243,  243,  309,  361,  309,  411,  364,  493,  364,  599,
      309,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  493,  411,  887,  411,  411,  309,  309,  309,  309,
      309,  309,  309,  800,  309,  487,  800,  309,  888,  487,

      309,  309,  414,  309,  309,  309,  584,  309,  309,  356,
      356,  356,  414,  366,  366,  408,  408,  479,  366,  414,
      408,  486,  486,  584,  479,  479,  486,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  366,  366,  489,
      367,  889,  367,  677,  366,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  494,  489,  550,  489,  489,
      677,  550,  356,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  413,  484,  891,  469,  413,  469,  413,
      492,  469,  484,  469,  413,  491,  413,  892,  484,  491,
      492,  491,  494,  538,  564,  559,  491,  492,  491,  559,

      660,  564,  746,  564,  660,  494,  543,  538,  538,  538,
      538,  538,  538,  538,  538,  543,  543,  543,  543,  543,
      543,  543,  543,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  556,  692,  556,  645,  590,  556,  893,
      556,  753,  538,  539,  555,  590,  683,  645,  675,  675,
      543,  746,  692,  885,  683,  755,  885,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  555,  894,  753,
      555,  738,  539,  539,  539,  539,  539,  539,  896,  546,
      548,  755,  738,  546,  548,  757,  756,  897,  756,  757,
      898,  756,  539,  756,  900,  901,  539,  539,  539,  539,

      539,  539,  544,  546,  548,  902,  903,  904,  905,  546,
      548,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  908,  909,  910,  911,  912,  544,  544,  544,  544,
      544,  544,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  554,  913,  915,  917,  544,  918,  919,  554,
      544,  544,  544,  544,  544,  544,  793,  878,  793,  878,
      748,  793,  878,  793,  878,  920,  922,  923,  554,  924,
      925,  926,  927,  928,  930,  931,  933,  554,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  934,  935,
      936,  938,  939,  940,  942,  938,  943,  944,  945,  946,

      947,  948,  949,  950,  951,  952,  953,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  963,  964,  748,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,
      977,  978,  979,  980,  981,  982,  983,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  996,  998,  999,
     1000, 1001, 1002, 1006, 1008, 1009, 1010, 1017, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,

     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1074, 1075,
     1076, 1077, 1078, 1082, 1084, 1085, 1086, 1093, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1115, 1126, 1127, 1128, 1129,
     1130, 1134, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
     1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180,

     1181, 1182, 1183, 1184, 1185, 1175, 1186, 1187, 1188, 1189,
     1190, 1194, 1196, 1197, 1198, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1218, 1219, 1220, 1222, 1223, 1224, 1225, 1227, 1228, 1230,
     1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1254,
     1255, 1256, 1260, 1261, 1263, 1264, 1266, 1267, 1268, 1269,
     1270, 1271, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287,
     1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298,
     1299, 1300, 1301, 1302, 1304, 1305, 1306, 1310, 1311, 1313,

     1314, 1316, 1317, 1318, 1319, 1320, 1321, 1329, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1344, 1346, 1347, 1348, 1350, 1351, 1352, 1354, 1355, 1356,
     1358, 1359, 1360, 1361, 1362, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1381,
     1382, 1383, 1385, 1386, 1387, 1389, 1390, 1391, 1393, 1394,
     1395, 1396, 1397, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1407, 1408, 1409, 1407, 1407, 1410, 1411, 1412, 1413,
     1415, 1417, 1418, 1420, 1423, 1425, 1426, 1427, 1428, 1407,
     1430, 1431, 1412, 1432, 1433, 1434, 1436, 1412, 1437, 1412,

     1435, 1435, 1438, 1439, 1435, 1435, 1440, 1441, 1443, 1445,
     1446, 1448, 1451, 1453, 1454, 1455, 1456, 1457, 1460, 1435,
     1440, 1461, 1463, 1464, 1465, 1440, 1466, 1440, 1467, 1471,
     1472, 1473, 1474, 1475, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1486, 1487, 1488, 1491, 1492, 1493, 1494, 1495, 1499,
     1500, 1501, 1502, 1503, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1513, 1514, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1531, 1532, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1551, 1552, 1555, 1556, 1557, 1558, 1559,

     1560, 1561, 1563, 1564, 1565, 1566, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1580, 1581, 1582, 1583,
     1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
     1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
     1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
     1626, 1628, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1638, 1639, 1640, 1643, 1644, 1645, 1648, 1649, 1650, 1651,
     1653, 1654, 1655, 1656, 1657, 1660, 1661, 1662, 1663, 1665,
     1666, 1667, 1668, 1669, 1671, 1672, 1674, 1676, 1677, 1678,

     1680, 1681, 1683, 1685, 1686, 1688, 1689, 1691, 1692, 1694,
     1695, 1697, 1698, 1699, 1701, 1702, 1703, 1704, 1705, 1706,
     1707, 1708, 1709, 1710, 1711, 1713, 1714, 1715, 1717, 1719,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,

     1742, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1744, 1744, 1744, 1744, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1745, 1745, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1749, 1749, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1750,

     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1752,  864, 1752,
     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1753,  863, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1754,  862,  861,  860, 1754,
     1754, 1754, 1754, 1754, 1754, 1755,  859, 1755,  858, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756,
      856, 1756, 1756,  855, 1756, 1756, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1757,  854, 1757, 1757, 1757, 1757, 1757,

     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1758, 1758, 1758,
     1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
     1759,  853, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759,
     1759, 1759, 1760,  852,  851,  850, 1760, 1760, 1760, 1760,
     1760, 1760, 1761,  849,  848,  846, 1761, 1761, 1761, 1761,
     1761, 1761, 1762,  845,  843,  842, 1762, 1762, 1763, 1763,
     1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1764,  841, 1764, 1764, 1764, 1765,  840, 1765,
     1765, 1765, 1766, 1766,  839, 1766, 1766, 1767, 1767, 1767,
     1767, 1768, 1768, 1768, 1768, 1769, 1769, 1769, 1769, 1769,

     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1770,
      838, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
     1770, 1770, 1770, 1771, 1771, 1771, 1771, 1772,  837,  835,
     1772, 1772, 1773,  834,  833, 1773, 1773, 1774,  832,  830,
     1774, 1774, 1775,  828, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1775, 1775,  827,  826,  825,  824,
      823,  820,  819,  818,  817,  816,  815,  813,  812,  811,
      809,  808,  807,  806,  804,  803,  802,  801,  799,  798,
      797,  796,  795,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,

      775,  774,  773,  770,  769,  768,  767,  766,  765,  764,
      762,  761,  759,  758,  752,  749,  745,  744,  743,  742,
      740,  739,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  726,  725,  723,  722,  721,  720,  717,  716,
      715,  714,  711,  709,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,
      691,  690,  689,  688,  687,  686,  685,  684,  682,  681,
      680,  679,  678,  676,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  662,  661,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  647,  646,  644,

      643,  642,  641,  640,  639,  638,  637,  636,  635,  633,
      632,  630,  629,  628,  627,  624,  623,  622,  621,  618,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  598,  597,  596,
      595,  594,  593,  592,  591,  589,  588,  587,  586,  585,
      583,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  563,  561,
      560,  557,  552,  551,  542,  541,  537,  536,  535,  534,
      533,  532,  531,  530,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  515,  514,  512,  511,

      510,  509,  508,  507,  506,  505,  503,  502,  501,  500,
      498,  497,  496,  495,  490,  488,  485,  483,  482,  480,
      478,  477,  476,  475,  474,  472,  471,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  437,  436,  434,  433,  432,  431,  430,
      429,  428,  427,  425,  424,  423,  422,  420,  419,  418,
      417,  412,  410,  407,  405,  404,  402,  400,  399,  398,
      397,  396,  395,  394,  392,  391,  390,  389,  385,  384,
      377,  376,  359,  358,  349,  348,  346,  344,  343,  340,

      339,  338,  335,  333,  332,  331,  328,  327,  326,  325,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  308,  307,  300,  299,  298,  297,
      296,  292,  288,  277,  274,  273,  272,  269,  267,  266,
      265,  262,  261,  260,  259,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  242,
      241,  238,  237,  236,  235,  233,  231,  229,  225,  207,
      194,  193,  182,  181,  180,  176,  174,  170,  163,  162,
      161,  158,  157,  154,  149,  146,  145,  142,  139,  138,
      134,  130,  128,  125,  123,  122,  121,  120,  119,  118,

      113,  111,  107,   89,   88,   83,   82,   81,   78,   77,
       74,   69,   66,   65,   61,   52,   51,   49,   45,   39,
       10,    9,    8,    7, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,

     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
     1738, 1738
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyansi_c_flex_debug;
int yyansi_c_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyansi_ctext;
#line 1 "scanner.l"
#line 4 "scanner.l"

/*
 * This scanner is based on:
 *
 * cpp5.l, a C/C++ scanner written by James A. Roskind.
 * "Portions Copyright (c) 1989, 1990 James A. Roskind".
 * (http://www.idiom.com/free-compilers/,
 * ftp://ftp.infoseek.com/ftp/pub/c++grammar/,
 * ftp://ftp.sra.co.jp/.a/pub/cmd/c++grammar2.0.tar.gz)
 */

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <expr.h>
#include <arith_tools.h>
#include <config.h>

#include <ansi-c/c_types.h>
#include <ansi-c/preprocessor_line.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_integer_literal.h>
#include <ansi-c/literals/convert_character_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER ansi_c_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "ansi_c_parser.h"
#include "y.tab.h"

#define loc() \
  { newstack(yyansi_clval); PARSER.set_location(stack(yyansi_clval)); }

int make_identifier()
{
  loc();

  std::string base_name(yyansi_ctext);
  std::string identifier(base_name);

  ansi_c_id_classt result=
    PARSER.lookup(identifier, PARSER.tag_following);
  PARSER.tag_following=false;

  stack(yyansi_clval).id(ID_symbol);
  stack(yyansi_clval).set(ID_C_base_name, base_name);
  stack(yyansi_clval).set(ID_identifier, identifier);
  stack(yyansi_clval).set(ID_C_id_class, result);

  if(result==ANSI_C_TYPEDEF)
    return TOK_TYPEDEFNAME;
  else
    return TOK_IDENTIFIER;
}

/*** macros for easier rule definition **********************************/


















#line 152 "scanner.l"
void ansi_c_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 1760 "lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT1 2
#define COMMENT2 3
#define ASM_BLOCK 4
#define MSC_ASM 5
#define MSC_DECLSPEC 6
#define MSC_PRAGMA 7
#define MSC_ANNOTATION 8
#define GCC_ATTRIBUTE1 9
#define GCC_ATTRIBUTE2 10
#define GCC_ATTRIBUTE3 11
#define GCC_ATTRIBUTE4 12
#define GCC_ATTRIBUTE5 13
#define GCC_ASM 14
#define GCC_ASM_VOLATILE 15
#define GCC_ASM_BLOCK1 16
#define GCC_ASM_BLOCK2 17
#define GCC_ASM_PAREN 18

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyansi_clex_destroy (void );

int yyansi_cget_debug (void );

void yyansi_cset_debug (int debug_flag  );

YY_EXTRA_TYPE yyansi_cget_extra (void );

void yyansi_cset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyansi_cget_in (void );

void yyansi_cset_in  (FILE * in_str  );

FILE *yyansi_cget_out (void );

void yyansi_cset_out  (FILE * out_str  );

int yyansi_cget_leng (void );

char *yyansi_cget_text (void );

int yyansi_cget_lineno (void );

void yyansi_cset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyansi_cwrap (void );
#else
extern int yyansi_cwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yyansi_ctext, yyansi_cleng, 1, yyansi_cout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyansi_cin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyansi_cin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyansi_cin))==0 && ferror(yyansi_cin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyansi_cin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyansi_clex (void);

#define YY_DECL int yyansi_clex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyansi_ctext and yyansi_cleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 159 "scanner.l"


#line 1961 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyansi_cin )
			yyansi_cin = stdin;

		if ( ! yyansi_cout )
			yyansi_cout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyansi_censure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
		}

		yyansi_c_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyansi_ctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1739 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2725 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 161 "scanner.l"
{ BEGIN(GRAMMAR);
		  yyless(0);		/* start again with this character */
		  //yy_current_buffer->yy_at_bol = 1; /* at beginning of line */
		  switch(PARSER.grammar)
		   {
                   case ansi_c_parsert::EXPRESSION: return TOK_PARSE_EXPRESSION;
                   case ansi_c_parsert::LANGUAGE: return TOK_PARSE_LANGUAGE;
		   default: assert(0);
		   }
		 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 172 "scanner.l"
{ BEGIN(COMMENT1); } /* begin C comment state */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 175 "scanner.l"
{ BEGIN(GRAMMAR); } /* end comment state, back GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 176 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 177 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 178 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 179 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 180 "scanner.l"
{ }
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 183 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 186 "scanner.l"
{ BEGIN(GRAMMAR); }	/* end comment state, back GRAMMAR */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 187 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 190 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_character_literal(yyansi_ctext, true);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_CHARACTER;
                }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_string_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_STRING;
                }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 204 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 205 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 207 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER.line_no, PARSER.filename);
                  PARSER.line_no--;
		 }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 211 "scanner.l"
{
                  #if 0
		  TmpString.form(
			"'pragma' directive found:" GL_WARN_MSG_NEWLINE
			"%s" GL_WARN_MSG_NEWLINE
			"Directive ignored",
			&PRS_text[0]);
		  PRS_PrintWarning(GL_WARN_INFORMATIVE, TmpString.chars());
		  TmpString = "";
                  #endif
		 }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 222 "scanner.l"
{
		  yyansi_cerror("Preprocessor directive found");
		  return TOK_SCANNER_ERROR;
		 }
	YY_BREAK

/*** keywords ***/


case 18:
YY_RULE_SETUP
#line 232 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 233 "scanner.l"
{ loc(); return TOK_BOOL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 234 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 235 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 236 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 237 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 238 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 239 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 240 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 241 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 242 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 243 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 244 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_ENUM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 245 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 246 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 247 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 248 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 249 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 250 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 252 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 253 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 254 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 255 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 256 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 257 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 258 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 259 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 260 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_STRUCT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 261 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 262 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 263 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_UNION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 264 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 265 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 266 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 267 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 269 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INT8; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 274 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INT16; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 279 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INT32; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 284 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM ||
                     PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_INT64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 291 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_PTR32; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 296 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_PTR64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 302 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_COMPLEX; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 309 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_REAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 316 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAG; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* note: "wchar_t" should be in the list above, but it is left out */
/*       because it is a 'typedef' in some standard header files   */

case 63:
YY_RULE_SETUP
#line 328 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_BUILTIN_VA_ARG; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 64:
#line 336 "scanner.l"
case 65:
#line 337 "scanner.l"
case 66:
YY_RULE_SETUP
#line 337 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_OFFSETOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 344 "scanner.l"
{
                  if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_BUILTIN_TYPES_COMPATIBLE_P; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 352 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 359 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 365 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                         PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 372 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else
                    BEGIN(GCC_ASM);
                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 382 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 389 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ASM);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 74:
#line 398 "scanner.l"
case 75:
#line 399 "scanner.l"
case 76:
#line 400 "scanner.l"
case 77:
#line 401 "scanner.l"
case 78:
#line 402 "scanner.l"
case 79:
#line 403 "scanner.l"
case 80:
#line 404 "scanner.l"
case 81:
#line 405 "scanner.l"
case 82:
#line 406 "scanner.l"
case 83:
#line 407 "scanner.l"
case 84:
YY_RULE_SETUP
#line 407 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
	             BEGIN(MSC_ANNOTATION);
                   else
	           {
	             yyless(1); // puts all but [ back into stream
	             loc();
	             PARSER.tag_following=false;
	             return yyansi_ctext[0];
	           }
                 }
	YY_BREAK
case 85:
#line 419 "scanner.l"
case 86:
YY_RULE_SETUP
#line 419 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 430 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    BEGIN(MSC_PRAGMA);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 88:
#line 440 "scanner.l"
case 89:
YY_RULE_SETUP
#line 440 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    BEGIN(GCC_ATTRIBUTE1);
                  else
                    return make_identifier();
                }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 448 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 449 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 451 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 453 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 455 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 456 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 457 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 458 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 459 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 460 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 461 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 462 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 464 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 465 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 467 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 468 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 470 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 471 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 473 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 482 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 492 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 502 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 511 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 520 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 529 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 538 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 547 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 556 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 566 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 576 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 586 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(MSC_DECLSPEC);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 596 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 605 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 613 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 621 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 623 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 629 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 630 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 632 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_LABEL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 129:
#line 640 "scanner.l"
case 130:
YY_RULE_SETUP
#line 640 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 131:
#line 647 "scanner.l"
case 132:
YY_RULE_SETUP
#line 647 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_FINALLY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 133:
#line 654 "scanner.l"
case 134:
YY_RULE_SETUP
#line 654 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_EXCEPT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 135:
#line 661 "scanner.l"
case 136:
YY_RULE_SETUP
#line 661 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_LEAVE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 667 "scanner.l"
{ loc(); return TOK_FORALL; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 668 "scanner.l"
{ loc(); return TOK_EXISTS; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 669 "scanner.l"
{ loc(); return TOK_ARRAY_OF; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 670 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 671 "scanner.l"
{ loc(); return TOK_CPROVER_BITVECTOR; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 673 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* operands following */

case 143:
YY_RULE_SETUP
#line 684 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 685 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 686 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 687 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 688 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 689 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 690 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 691 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 692 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 693 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 694 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 695 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 697 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 698 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 699 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 700 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 701 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 702 "scanner.l"
{ loc(); return TOK_SLASSIGN; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 703 "scanner.l"
{ loc(); return TOK_SRASSIGN; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 704 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 705 "scanner.l"
{ loc(); return TOK_EORASSIGN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 706 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK


case 165:
YY_RULE_SETUP
#line 711 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 166:
#line 714 "scanner.l"
case 167:
#line 715 "scanner.l"
case 168:
#line 716 "scanner.l"
case 169:
#line 717 "scanner.l"
case 170:
#line 718 "scanner.l"
case 171:
#line 719 "scanner.l"
case 172:
#line 720 "scanner.l"
case 173:
YY_RULE_SETUP
#line 720 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 10);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 174:
#line 727 "scanner.l"
case 175:
#line 728 "scanner.l"
case 176:
#line 729 "scanner.l"
case 177:
#line 730 "scanner.l"
case 178:
#line 731 "scanner.l"
case 179:
#line 732 "scanner.l"
case 180:
#line 733 "scanner.l"
case 181:
YY_RULE_SETUP
#line 733 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 8);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 182:
#line 740 "scanner.l"
case 183:
#line 741 "scanner.l"
case 184:
#line 742 "scanner.l"
case 185:
#line 743 "scanner.l"
case 186:
#line 744 "scanner.l"
case 187:
#line 745 "scanner.l"
case 188:
#line 746 "scanner.l"
case 189:
YY_RULE_SETUP
#line 746 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 16);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 752 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 757 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 762 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 768 "scanner.l"
{ 
                  PARSER.tag_following=false;
                  if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 775 "scanner.l"
{ PARSER.asm_block_following=false;
                  PARSER.tag_following=false;
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 781 "scanner.l"
{ loc(); PARSER.tag_following=false; return yyansi_ctext[0]; }
	YY_BREAK

case 196:
YY_RULE_SETUP
#line 784 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 785 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 787 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 788 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  BEGIN(GRAMMAR);
                  return TOK_ASM_STRING;
                }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 795 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 799 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(GRAMMAR); loc(); return '}'; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 802 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 805 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 806 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 808 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 811 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 812 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
/* The following ugly stuff avoids two-token lookahead in the parser;
     e.g., asm void f()  vs.  asm ("xyz") or asm { ... } */

case 208:
YY_RULE_SETUP
#line 817 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 818 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 819 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 820 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 821 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 822 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 823 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM; }
	YY_BREAK


case 215:
YY_RULE_SETUP
#line 827 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE2); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 828 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 829 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 830 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute is following -- these may be keywords!
case 219:
#line 836 "scanner.l"
case 220:
YY_RULE_SETUP
#line 836 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_ALIGNED; }
	YY_BREAK
case 221:
#line 839 "scanner.l"
case 222:
YY_RULE_SETUP
#line 839 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_PACKED; }
	YY_BREAK
case 223:
#line 842 "scanner.l"
case 224:
YY_RULE_SETUP
#line 842 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_TRANSPARENT_UNION; }
	YY_BREAK
case 225:
#line 845 "scanner.l"
case 226:
YY_RULE_SETUP
#line 845 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_VECTOR_SIZE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 847 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 848 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 849 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE4); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 850 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE5); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 851 "scanner.l"
{ /* ignore */ }
	YY_BREAK

// an attribute we do process
case 232:
YY_RULE_SETUP
#line 855 "scanner.l"
{ PARSER.parenthesis_counter++; loc(); return '('; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 856 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE5);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    PARSER.parenthesis_counter--;
                    loc();
                    return ')';
                  }
                }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 869 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE2);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    loc();
                    return ',';
                  }
                }
	YY_BREAK
case 235:
#line 882 "scanner.l"
case 236:
#line 883 "scanner.l"
case 237:
#line 884 "scanner.l"
case 238:
#line 885 "scanner.l"
case 239:
#line 886 "scanner.l"
case 240:
#line 887 "scanner.l"
case 241:
#line 888 "scanner.l"
case 242:
YY_RULE_SETUP
#line 888 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext, 10);
                  PARSER.set_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 893 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 894 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 895 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 896 "scanner.l"
{ loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute we just ignore
case 247:
YY_RULE_SETUP
#line 900 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 901 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE5);
                  else
                    PARSER.parenthesis_counter--;
                }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 906 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE2); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 908 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

// end bit: the closing parenthesis
case 251:
YY_RULE_SETUP
#line 912 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 913 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 914 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 915 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(MSC_DECLSPEC):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
case YY_STATE_EOF(GCC_ATTRIBUTE1):
case YY_STATE_EOF(GCC_ATTRIBUTE2):
case YY_STATE_EOF(GCC_ATTRIBUTE3):
case YY_STATE_EOF(GCC_ATTRIBUTE4):
case YY_STATE_EOF(GCC_ATTRIBUTE5):
case YY_STATE_EOF(GCC_ASM):
case YY_STATE_EOF(GCC_ASM_VOLATILE):
case YY_STATE_EOF(GCC_ASM_BLOCK1):
case YY_STATE_EOF(GCC_ASM_BLOCK2):
case YY_STATE_EOF(GCC_ASM_PAREN):
#line 918 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 920 "scanner.l"
ECHO;
	YY_BREAK
#line 3619 "lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyansi_cin at a new source and called
			 * yyansi_clex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyansi_cin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyansi_cwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyansi_ctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yyansi_clex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyansi_crealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyansi_crestart(yyansi_cin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyansi_crealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1739 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1739 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1738);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyansi_crestart(yyansi_cin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyansi_cwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyansi_ctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyansi_crestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyansi_censure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
	}

	yyansi_c_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyansi_c_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyansi_c_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyansi_cpop_buffer_state();
	 *		yyansi_cpush_buffer_state(new_buffer);
     */
	yyansi_censure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyansi_c_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyansi_cwrap()) processing, but the only time this flag
	 * is looked at is after yyansi_cwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyansi_c_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyansi_cin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyansi_c_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyansi_calloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyansi_c_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyansi_c_create_buffer()
 * 
 */
    void yyansi_c_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyansi_cfree((void *) b->yy_ch_buf  );

	yyansi_cfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyansi_crestart() or at EOF.
 */
    static void yyansi_c_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyansi_c_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyansi_c_init_buffer was _probably_
     * called from yyansi_crestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyansi_c_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyansi_c_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyansi_censure_buffer_stack();

	/* This block is copied from yyansi_c_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyansi_c_switch_to_buffer. */
	yyansi_c_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyansi_cpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyansi_c_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyansi_c_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyansi_censure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_calloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_crealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyansi_c_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyansi_c_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyansi_clex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyansi_c_scan_bytes() instead.
 */
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char * yystr )
{
    
	return yyansi_c_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyansi_clex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyansi_c_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyansi_calloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyansi_c_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyansi_c_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyansi_ctext[yyansi_cleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyansi_ctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyansi_cleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyansi_cget_lineno  (void)
{
        
    return yyansi_clineno;
}

/** Get the input stream.
 * 
 */
FILE *yyansi_cget_in  (void)
{
        return yyansi_cin;
}

/** Get the output stream.
 * 
 */
FILE *yyansi_cget_out  (void)
{
        return yyansi_cout;
}

/** Get the length of the current token.
 * 
 */
int yyansi_cget_leng  (void)
{
        return yyansi_cleng;
}

/** Get the current token.
 * 
 */

char *yyansi_cget_text  (void)
{
        return yyansi_ctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyansi_cset_lineno (int  line_number )
{
    
    yyansi_clineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yyansi_c_switch_to_buffer
 */
void yyansi_cset_in (FILE *  in_str )
{
        yyansi_cin = in_str ;
}

void yyansi_cset_out (FILE *  out_str )
{
        yyansi_cout = out_str ;
}

int yyansi_cget_debug  (void)
{
        return yyansi_c_flex_debug;
}

void yyansi_cset_debug (int  bdebug )
{
        yyansi_c_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyansi_clex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyansi_cin = stdin;
    yyansi_cout = stdout;
#else
    yyansi_cin = (FILE *) 0;
    yyansi_cout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyansi_clex_init()
     */
    return 0;
}

/* yyansi_clex_destroy is for both reentrant and non-reentrant scanners. */
int yyansi_clex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyansi_c_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyansi_cpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyansi_cfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyansi_clex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyansi_calloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyansi_crealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyansi_cfree (void * ptr )
{
	free( (char *) ptr );	/* see yyansi_crealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 920 "scanner.l"



int yyansi_cwrap() { return 1; }

